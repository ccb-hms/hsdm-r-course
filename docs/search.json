[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Design and Analysis",
    "section": "",
    "text": "This is a website for the data analysis module in Research Design and Analysis.\nIn the top navigation bar, you can find the following materials."
  },
  {
    "objectID": "index.html#readings",
    "href": "index.html#readings",
    "title": "Research Design and Analysis",
    "section": "Readings",
    "text": "Readings\nThis page contains all readings and data needed for examples in the readings."
  },
  {
    "objectID": "index.html#session-materials",
    "href": "index.html#session-materials",
    "title": "Research Design and Analysis",
    "section": "Session Materials",
    "text": "Session Materials\nThis page contains a Quarto notebook for each class session and accompanying data."
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Research Design and Analysis",
    "section": "Resources",
    "text": "Resources\nThis page contains links to additional resources for learning data analysis with R."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Licenses",
    "section": "",
    "text": "All Software Carpentry, Data Carpentry, and Library Carpentry instructional material is made available under the Creative Commons Attribution license. The following is a human-readable summary of (and not a substitute for) the full legal text of the CC BY 4.0 license.\nYou are free:\n\nto Share—copy and redistribute the material in any medium or format\nto Adapt—remix, transform, and build upon the material\n\nfor any purpose, even commercially.\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\nUnder the following terms:\n\nAttribution—You must give appropriate credit (mentioning that your work is derived from work that is Copyright © Software Carpentry and, where practical, linking to http://software-carpentry.org/), provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nNo additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. With the understanding that:\nNotices:\n\nYou do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material."
  },
  {
    "objectID": "LICENSE.html#instructional-material",
    "href": "LICENSE.html#instructional-material",
    "title": "Licenses",
    "section": "",
    "text": "All Software Carpentry, Data Carpentry, and Library Carpentry instructional material is made available under the Creative Commons Attribution license. The following is a human-readable summary of (and not a substitute for) the full legal text of the CC BY 4.0 license.\nYou are free:\n\nto Share—copy and redistribute the material in any medium or format\nto Adapt—remix, transform, and build upon the material\n\nfor any purpose, even commercially.\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\nUnder the following terms:\n\nAttribution—You must give appropriate credit (mentioning that your work is derived from work that is Copyright © Software Carpentry and, where practical, linking to http://software-carpentry.org/), provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nNo additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. With the understanding that:\nNotices:\n\nYou do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material."
  },
  {
    "objectID": "LICENSE.html#software",
    "href": "LICENSE.html#software",
    "title": "Licenses",
    "section": "Software",
    "text": "Software\nExcept where otherwise noted, the example programs and other software provided by Software Carpentry and Data Carpentry are made available under the OSI-approved MIT license.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "LICENSE.html#trademark",
    "href": "LICENSE.html#trademark",
    "title": "Licenses",
    "section": "Trademark",
    "text": "Trademark\n“Software Carpentry” and “Data Carpentry” and their respective logos are registered trademarks of Community Initiatives."
  },
  {
    "objectID": "readings/basics.html",
    "href": "readings/basics.html",
    "title": "R Basics",
    "section": "",
    "text": "Extended Materials\n\n\n\nYou can find the original, extended version of this chapter here.\n\n\n\n\nFunctions are at the core of using R. Functions are how you perform tasks and operations. Many functions come installed with R, many more are available for download in packages (explained in the packages section), and you can even write your own custom functions!\nThis basics section on functions explains:\n\nWhat a function is and how they work\n\nWhat function arguments are\n\nHow to get help understanding a function\n\n\n\n\n\n\n\nA quick note on syntax\n\n\n\n\n\nIn this workbook, functions are written in code-text with open parentheses, like this: filter(). As explained in the packages section, functions are downloaded within packages. In this handbook, package names are written in bold, like dplyr. Sometimes in example code you may see the function name linked explicitly to the name of its package with two colons (::) like this: dplyr::filter(). The purpose of this linkage is explained in the packages section.\n\n\n\n\n\n\nA function is like a machine that receives inputs, does some action with those inputs, and produces an output. What the output is depends on the function.\nFunctions typically operate upon some object placed within the function’s parentheses. For example, the function sqrt() calculates the square root of a number:\n\nsqrt(49)\n\n[1] 7\n\n\nThe object provided to a function also can be a column in a dataset (see the Objects section for detail on all the kinds of objects). Because R can store multiple datasets, you will need to specify both the dataset and the column. One way to do this is using the $ notation to link the name of the dataset and the name of the column (dataset$column). In the example below, the function summary() is applied to the numeric column age in the dataset linelist, and the output is a summary of the column’s numeric and missing values.\n\n# Print summary statistics of column 'age' in the dataset 'linelist'\nsummary(linelist$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   0.00    6.00   13.00   16.07   23.00   84.00      86 \n\n\n\n\n\n\n\n\nNote\n\n\n\nBehind the scenes, a function represents complex additional code that has been wrapped up for the user into one easy command.\n\n\n\n\n\n\nFunctions often ask for several inputs, called arguments, located within the parentheses of the function, usually separated by commas.\n\nSome arguments are required for the function to work correctly, others are optional\n\nOptional arguments have default settings\n\nArguments can take character, numeric, logical (TRUE/FALSE), and other inputs\n\nHere is a fun fictional function, called oven_bake(), as an example of a typical function. It takes an input object (e.g. a dataset, or in this example “dough”) and performs operations on it as specified by additional arguments (minutes = and temperature =). The output can be printed to the console, or saved as an object using the assignment operator &lt;-.\n\n\n\n\n\n\n\n\n\nIn a more realistic example, the age_pyramid() command below produces an age pyramid plot based on defined age groups and a binary split column, such as gender. The function is given three arguments within the parentheses, separated by commas. The values supplied to the arguments establish linelist as the dataframe to use, age_cat5 as the column to count, and gender as the binary column to use for splitting the pyramid by color.\n\n# Create an age pyramid\nage_pyramid(data = linelist, age_group = \"age_cat5\", split_by = \"gender\")\n\n\n\n\nThe above command can be equivalently written as below, in a longer style with a new line for each argument. This style can be easier to read, and easier to write “comments” with # to explain each part (commenting extensively is good practice!). To run this longer command you can highlight the entire command and click “Run”, or just place your cursor in the first line and then press the Ctrl and Enter keys simultaneously.\n\n# Create an age pyramid\nage_pyramid(\n  data = linelist,        # use case linelist\n  age_group = \"age_cat5\", # provide age group column\n  split_by = \"gender\"     # use gender column for two sides of pyramid\n  )\n\n\n\n\nThe first half of an argument assignment (e.g. data =) does not need to be specified if the arguments are written in a specific order (specified in the function’s documentation). The below code produces the exact same pyramid as above, because the function expects the argument order: data frame, age_group variable, split_by variable.\n\n# This command will produce the exact same graphic as above\nage_pyramid(linelist, \"age_cat5\", \"gender\")\n\nA more complex age_pyramid() command might include the optional arguments to:\n\nShow proportions instead of counts (set proportional = TRUE when the default is FALSE)\n\nSpecify the two colors to use (pal = is short for “palette” and is supplied with a vector of two color names. See the objects page for how the function c() makes a vector)\n\n\n\n\n\n\n\nNote\n\n\n\nFor arguments that you specify with both parts of the argument (e.g. proportional = TRUE), their order among all the arguments does not matter.\n\n\n\nage_pyramid(\n  linelist,                    # use case linelist\n  \"age_cat5\",                  # age group column\n  \"gender\",                    # split by gender\n  proportional = TRUE,         # percents instead of counts\n  pal = c(\"orange\", \"purple\")  # colors\n  )\n\n\n\n\n\n\n\n\nPackages contain functions.\nAn R package is a shareable bundle of code and documentation that contains pre-defined functions. Users in the R community develop packages all the time catered to specific problems, it is likely that one can help with your work! You will install and use hundreds of packages in your use of R.\nOn installation, R contains “base” packages and functions that perform common elementary tasks. But many R users create specialized functions, which are verified by the R community and which you can download as a package for your own use. In this handbook, package names are written in bold. One of the more challenging aspects of R is that there are often many functions or packages to choose from to complete a given task.\n\n\nFunctions are contained within packages which can be downloaded (“installed”) to your computer from the internet. Once a package is downloaded, it is stored in your “library”. You can then access the functions it contains during your current R session by “loading” the package.\nThink of R as your personal library: When you download a package, your library gains a new book of functions, but each time you want to use a function in that book, you must borrow (“load”) that book from your library.\nIn summary: to use the functions available in an R package, 2 steps must be implemented:\n\nThe package must be installed (once), and\n\nThe package must be loaded (each R session)\n\n\n\nYour “library” is actually a folder on your computer, containing a folder for each package that has been installed. Find out where R is installed in your computer, and look for a folder called “win-library”. For example: R\\win-library\\4.0 (the 4.0 is the R version - you’ll have a different library for each R version you’ve downloaded).\nYou can print the file path to your library by entering .libPaths() (empty parentheses).\n\n\n\nMost often, R users download packages from CRAN. CRAN (Comprehensive R Archive Network) is an online public warehouse of R packages that have been published by R community members.\n\n\n\nThe base R function for installing a package is install.packages(). The name of the package to install must be provided in the parentheses in quotes. If you want to install multiple packages in one command, they must be listed within a character vector c().\n\n\n\n\n\n\nCommon Mistake\n\n\n\nThis command installs a package, but does not load it for use in the current session.\n\n\n\n# install a single package with base R\ninstall.packages(\"tidyverse\")\n\n# install multiple packages with base R\ninstall.packages(c(\"tidyverse\", \"rio\", \"here\"))\n\nInstallation can also be accomplished point-and-click by going to the RStudio “Packages” pane and clicking “Install” and searching for the desired package name.\nThe base R function to load a package for use (after it has been installed) is library(). It can load only one package at a time (another reason to use p_load()). You can provide the package name with or without quotes.\n\n# load packages for use, with base R\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(here)\n\nTo check whether a package in installed and/or loaded, you can view the Packages pane in RStudio. If the package is installed, it is shown there with version number. If its box is checked, it is loaded for the current session.\n\n\n\n\nFor clarity in this handbook, functions are sometimes preceded by the name of their package using the :: symbol in the following way: package_name::function_name()\nOnce a package is loaded for a session, this explicit style is not necessary. One can just use function_name(). However writing the package name is useful when a function name is common and may exist in multiple packages (e.g. plot()). Writing the package name will also load the package if it is not already loaded.\n\n# This command uses the package \"rio\" and its function \"import()\" to import a dataset\nlinelist &lt;- rio::import(\"linelist.xlsx\", which = \"Sheet1\")\n\n\n\n\nTo read more about a function, you can search for it in the Help tab of the lower-right RStudio. You can also run a command like ?thefunctionname (put the name of the function after a question mark) and the Help page will appear in the Help pane. Finally, try searching online for resources.\n\n\n\nYou can update packages by re-installing them. You can also click the green “Update” button in your RStudio Packages pane to see which packages have new versions Wto install. Be aware that your old code may need to be updated if there is a major revision to how a function works!\n\n\n\nUse remove.packages(). Alternatively, go find the folder which contains your library and manually delete the folder.\n\n\n\nPackages often depend on other packages to work. These are called dependencies. If a dependency fails to install, then the package depending on it may also fail to install.\n\n\n\nIt is not uncommon that two or more packages contain the same function name. For example, the package dplyr has a filter() function, but so does the package stats. The default filter() function depends on the order these packages are first loaded in the R session - the later one will be the default for the command filter().\nYou can check the order in your Environment pane of R Studio - click the drop-down for “Global Environment” and see the order of the packages. Functions from packages lower on that drop-down list will mask functions of the same name in packages that appear higher in the drop-down list. When first loading a package, R will warn you in the console if masking is occurring, but this can be easy to miss.\n\n\n\n\n\n\n\n\n\nHere are ways you can fix masking:\n\nSpecify the package name in the command. For example, use dplyr::filter()\n\nRe-arrange the order in which the packages are loaded and start a new R session\n\n\n\n\nSee this guide to install an older version of a particular package.\n\n\n\n\n\nScripts are a fundamental part of programming. They are documents that hold your commands (e.g. functions to create and modify datasets, print visualizations, etc). You can save a script and run it again later. There are many advantages to storing and running your commands from a script (vs. typing commands one-by-one into the R console “command line”):\n\nPortability - you can share your work with others by sending them your scripts\n\nReproducibility - so that you and others know exactly what you did\n\nVersion control - so you can track changes made by yourself or colleagues\n\nCommenting/annotation - to explain to your colleagues what you have done\n\n\n\nIn a script you can also annotate (“comment”) around your R code. Commenting is helpful to explain to yourself and other readers what you are doing. You can add a comment by typing the hash symbol (#) and writing your comment after it. The commented text will appear in a different color than the R code.\nAny code written after the # will not be run. Therefore, placing a # before code is also a useful way to temporarily block a line of code (“comment out”) if you do not want to delete it). You can comment out/in multiple lines at once by highlighting them and pressing Ctrl+Shift+c (Cmd+Shift+c in Mac).\n\n# A comment can be on a line by itself\n# import data\nlinelist &lt;- import(\"linelist_raw.xlsx\") %&gt;%   # a comment can also come after code\n# filter(age &gt; 50)                          # It can also be used to deactivate / remove a line of code\n  count()\n\n\nComment on what you are doing and on why you are doing it.\n\nBreak your code into logical sections\n\nAccompany your code with a text step-by-step description of what you are doing (e.g. numbered steps)\n\n\n\n\nIt is important to be conscious of your coding style - especially if working on a team. Some nice R styles guide are the tidyverse style guide, Hadley Wickham’s style guide, and Google’s. There are also packages such as styler and lintr which help you conform to a style.\nA few very basic points to make your code readable to others:\n* When naming objects, use only lowercase letters, numbers, and underscores _, e.g. my_data\n* Use frequent spaces, including around operators, e.g. n = 1 and age_new &lt;- age_old + 3\n\n\n\nBelow is an example of a short R script. Remember, the better you succinctly explain your code in comments, the more your colleagues will like you!\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn R markdown script is a type of R script in which the script itself becomes an output document (PDF, Word, HTML, Powerpoint, etc.). Quarto is a new version of R markdown. These are incredibly useful and versatile tools often used to create dynamic and automated reports. Even this website is produced with Quarto!\n\n\n\n\n\nEverything in R is an object, and R is an “object-oriented” language. These sections will explain:\n\nHow to create objects (&lt;-)\nTypes of objects (e.g. data frames, vectors..)\n\nHow to access subparts of objects (e.g. variables in a dataset)\n\nClasses of objects (e.g. numeric, logical, integer, double, character, factor)\n\n\n\n\nEverything you store in R - datasets, variables, a list of village names, a total population number, even outputs such as graphs - are objects which are assigned a name and can be referenced in later commands.\nAn object exists when you have assigned it a value (see the assignment section below). When it is assigned a value, the object appears in the Environment (see the upper right pane of RStudio). It can then be operated upon, manipulated, changed, and re-defined.\n\n\n\n\nCreate objects by assigning them a value with the &lt;- operator.\nYou can think of the assignment operator &lt;- as the words “is defined as”. Assignment commands generally follow a standard order:\nobject_name &lt;- value (or process/calculation that produce a value)\nFor example, you may want to record the current epidemiological reporting week as an object for reference in later code. In this example, the object current_week is created when it is assigned the value \"2018-W10\" (the quote marks make this a character value). The object current_week will then appear in the RStudio Environment pane (upper-right) and can be referenced in later commands.\nSee the R commands and their output in the boxes below.\n\ncurrent_week &lt;- \"2018-W10\"   # this command creates the object current_week by assigning it a value\ncurrent_week                 # this command prints the current value of current_week object in the console\n\n[1] \"2018-W10\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote the [1] in the R console output is simply indicating that you are viewing the first item of the output\n\n\n\n\n\n\n\n\nCommon Mistake\n\n\n\nAn object’s value can be over-written at any time by running an assignment command to re-define its value. Thus, the order of the commands run is very important.\nFor instance, the following command will re-define the value of current_week:\n\ncurrent_week &lt;- \"2018-W51\"   # assigns a NEW value to the object current_week\ncurrent_week                 # prints the current value of current_week in the console\n\n[1] \"2018-W51\"\n\n\n\n\nEquals signs =\nYou will also see equals signs in R code:\n\nA double equals sign == between two objects or values asks a logical question: “is this equal to that?”.\n\nYou will also see equals signs within functions used to specify values of function arguments (read about these in sections below), for example max(age, na.rm = TRUE).\n\nYou can use a single equals sign = in place of &lt;- to create and define objects, but this is discouraged. You can read about why this is discouraged here.\n\nDatasets\nDatasets are also objects (typically “dataframes”) and must be assigned names when they are imported. In the code below, the object linelist is created and assigned the value of a CSV file imported with the rio package and its import() function.\n\n# linelist is created and assigned the value of the imported CSV file\nlinelist &lt;- import(\"my_linelist.csv\")\n\n\n\n\n\n\n\nNaming Objects\n\n\n\n\nObject names must not contain spaces, but you should use underscore (_) or a period (.) instead of a space.\n\nObject names are case-sensitive (meaning that Dataset_A is different from dataset_A).\nObject names must begin with a letter (cannot begin with a number like 1, 2 or 3).\n\n\n\nOutputs\nOutputs like tables and plots provide an example of how outputs can be saved as objects, or just be printed without being saved. A cross-tabulation of gender and outcome using the base R function table() can be printed directly to the R console (without being saved).\n\n# printed to R console only\ntable(linelist$gender, linelist$outcome)\n\n   \n    Death Recover\n  f  1227     953\n  m  1228     950\n\n\nBut the same table can be saved as a named object. Then, optionally, it can be printed.\n\n# save\ngen_out_table &lt;- table(linelist$gender, linelist$outcome)\n\n# print\ngen_out_table\n\n   \n    Death Recover\n  f  1227     953\n  m  1228     950\n\n\nColumns\nColumns in a dataset are also objects and can be defined, over-written, and created as described below in the section on Columns.\nYou can use the assignment operator from base R to create a new column. Below, the new column bmi (Body Mass Index) is created, and for each row the new value is result of a mathematical operation on the row’s value in the wt_kg and ht_cm columns.\n\n# create new \"bmi\" column using base R syntax\nlinelist$bmi &lt;- linelist$wt_kg / (linelist$ht_cm/100)^2\n\nHowever, in this handbook, we emphasize a different approach to defining columns, which uses the function mutate() from the dplyr package and piping with the pipe operator (%&gt;%). The syntax is easier to read and there are other advantages.\n\n# create new \"bmi\" column using dplyr syntax\nlinelist &lt;- linelist %&gt;% \n  mutate(bmi = wt_kg / (ht_cm/100)^2)\n\n\n\n\n\nObjects can be a single piece of data (e.g. my_number &lt;- 24), or they can consist of structured data.\nThe graphic below is borrowed from this online R tutorial. It shows some common data structures and their names.\n\n\n\n\n\n\n\n\n\nIn epidemiology (and particularly field epidemiology), you will most commonly encounter data frames and vectors:\n\n\n\n\n\n\n\n\nCommon structure\nExplanation\nExample\n\n\n\n\nVectors\nA container for a sequence of singular objects, all of the same class (e.g. numeric, character).\n“Variables” (columns) in data frames are vectors (e.g. the column age_years).\n\n\nData Frames\nVectors (e.g. columns) that are bound together that all have the same number of rows.\nlinelist is a data frame.\n\n\n\nNote that to create a vector that “stands alone” (is not part of a data frame) the function c() is used to combine the different elements. For example, if creating a vector of colors plot’s color scale: vector_of_colors &lt;- c(\"blue\", \"red2\", \"orange\", \"grey\")\n\n\n\n\nAll the objects stored in R have a class which tells R how to handle the object. There are many possible classes, but common ones include:\n\n\n\n\n\n\n\n\nClass\nExplanation\nExamples\n\n\n\n\nCharacter\nThese are text/words/sentences “within quotation marks”. Math cannot be done on these objects.\n“Character objects are in quotation marks”\n\n\nInteger\nNumbers that are whole only (no decimals)\n-5, 14, or 2000\n\n\nNumeric\nThese are numbers and can include decimals. If within quotation marks they will be considered character class.\n23.1 or 14\n\n\nFactor\nThese are vectors that have a specified order or hierarchy of values\nAn variable of economic status with ordered values\n\n\nDate\nOnce R is told that certain data are Dates, these data can be manipulated and displayed in special ways.\n2018-04-12 or 15/3/1954 or Wed 4 Jan 1980\n\n\nLogical\nValues must be one of the two special values TRUE or FALSE (note these are not “TRUE” and “FALSE” in quotation marks)\nTRUE or FALSE\n\n\ndata.frame\nA data frame is how R stores a typical dataset. It consists of vectors (columns) of data bound together, that all have the same number of observations (rows).\nThe example AJS dataset named linelist_raw contains 68 variables with 300 observations (rows) each.\n\n\ntibble\ntibbles are a variation on data frame, the main operational difference being that they print more nicely to the console (display first 10 rows and only columns that fit on the screen)\nAny data frame, list, or matrix can be converted to a tibble with as_tibble()\n\n\nlist\nA list is like vector, but holds other objects that can be other different classes\nA list could hold a single number, and a dataframe, and a vector, and even another list within it!\n\n\n\nYou can test the class of an object by providing its name to the function class(). You can reference a specific column within a dataset using the $ notation to separate the name of the dataset and the name of the column.\n\nclass(linelist)         # class should be a data frame or tibble\n\n[1] \"data.frame\"\n\nclass(linelist$age)     # class should be numeric\n\n[1] \"numeric\"\n\nclass(linelist$gender)  # class should be character\n\n[1] \"character\"\n\n\nSometimes, a column will be converted to a different class automatically by R. Watch out for this! For example, if you have a vector or column of numbers, but a character value is inserted… the entire column will change to class character.\n\nnum_vector &lt;- c(1,2,3,4,5) # define vector as all numbers\nclass(num_vector)          # vector is numeric class\n\n[1] \"numeric\"\n\nnum_vector[3] &lt;- \"three\"   # convert the third element to a character\nclass(num_vector)          # vector is now character class\n\n[1] \"character\"\n\n\nOne common example of this is when manipulating a data frame in order to print a table - if you make a total row and try to paste/glue together percents in the same cell as numbers (e.g. 23 (40%)), the entire numeric column above will convert to character and can no longer be used for mathematical calculations.Sometimes, you will need to convert objects or columns to another class.\n\n\n\nFunction\nAction\n\n\n\n\nas.character()\nConverts to character class\n\n\nas.numeric()\nConverts to numeric class\n\n\nas.integer()\nConverts to integer class\n\n\nas.Date()\nConverts to Date class\n\n\nfactor()\nConverts to factor\n\n\n\nLikewise, there are base R functions to check whether an object IS of a specific class, such as is.numeric(), is.character(), is.double(), is.factor(), is.integer()\nHere is more online material on classes and data structures in R.\n\n\n\n\nA column in a data frame is technically a “vector” (see table above) - a series of values that must all be the same class (either character, numeric, logical, etc).\nA vector can exist independent of a data frame, for example a vector of column names that you want to include as explanatory variables in a model. To create a “stand alone” vector, use the c() function as below:\n\n# define the stand-alone vector of character values\nexplanatory_vars &lt;- c(\"gender\", \"fever\", \"chills\", \"cough\", \"aches\", \"vomit\")\n\n# print the values in this named vector\nexplanatory_vars\n\n[1] \"gender\" \"fever\"  \"chills\" \"cough\"  \"aches\"  \"vomit\" \n\n\nColumns in a data frame are also vectors and can be called, referenced, extracted, or created using the $ symbol. The $ symbol connects the name of the column to the name of its data frame. In this handbook, we try to use the word “column” instead of “variable”.\n\n# Retrieve the length of the vector age_years\nlength(linelist$age) # (age is a column in the linelist data frame)\n\n\n\n\n\nYou may need to view parts of objects, also called “indexing”, which is often done using the square brackets [ ]. Using $ on a dataframe to access a column is also a type of indexing.\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")  # define the vector\nmy_vector[5]                                  # print the 5th element\n\n[1] \"e\"\n\n\nSquare brackets also work to return specific parts of an returned output, such as the output of a summary() function:\n\n# All of the summary\nsummary(linelist$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   0.00    6.00   13.00   16.07   23.00   84.00      86 \n\n# Just the second element of the summary, with name (using only single brackets)\nsummary(linelist$age)[2]\n\n1st Qu. \n      6 \n\n# Just the second element, without name (using double brackets)\nsummary(linelist$age)[[2]]\n\n[1] 6\n\n# Extract an element by name, without showing the name\nsummary(linelist$age)[[\"Median\"]]\n\n[1] 13\n\n\nBrackets also work on data frames to view specific rows and columns. You can do this using the syntax dataframe[rows, columns]:\n\n# View a specific row (2) from dataset, with all columns (don't forget the comma!)\nlinelist[2,]\n\n# View all rows, but just one column\nlinelist[, \"date_onset\"]\n\n# View values from row 2 and columns 5 through 10\nlinelist[2, 5:10] \n\n# View values from row 2 and columns 5 through 10 and 18\nlinelist[2, c(5:10, 18)] \n\n# View rows 2 through 20, and specific columns\nlinelist[2:20, c(\"date_onset\", \"outcome\", \"age\")]\n\n# View rows and columns based on criteria\n# *** Note the dataframe must still be named in the criteria!\nlinelist[linelist$age &gt; 25 , c(\"date_onset\", \"outcome\", \"age\")]\n\n# Use View() to see the outputs in the RStudio Viewer pane (easier to read) \n# *** Note the capital \"V\" in View() function\nView(linelist[2:20, \"date_onset\"])\n\n# Save as a new object\nnew_table &lt;- linelist[2:20, c(\"date_onset\")] \n\n\n\n\n\n\n\nUsing Tidyverse Instead\n\n\n\n\n\nIn a future session, we will learn how to perform many of these operations using dplyr syntax (functions filter() for rows, and select() for columns) as opposed to the base R syntax shown here.\nTo filter based on “row number”, you can use the dplyr function row_number() with open parentheses as part of a logical filtering statement. Often you will use the %in% operator and a range of numbers as part of that logical statement, as shown below. To see the first N rows, you can also use the special dplyr function head().\n\n# View first 100 rows\nlinelist %&gt;% head(100)\n\n# Show row 5 only\nlinelist %&gt;% filter(row_number() == 5)\n\n# View rows 2 through 20, and three specific columns (note no quotes necessary on column names)\nlinelist %&gt;% filter(row_number() %in% 2:20) %&gt;% select(date_onset, outcome, age)\n\n\n\n\nWhen indexing an object of class list, single brackets always return with class list, even if only a single object is returned. Double brackets, however, can be used to access a single element and return a different class than list.\nBrackets can also be written after one another, as demonstrated below.\nThis visual explanation of lists indexing, with pepper shakers is humorous and helpful.\n\n# define demo list\nmy_list &lt;- list(\n  # First element in the list is a character vector\n  hospitals = c(\"Central\", \"Empire\", \"Santa Anna\"),\n  \n  # second element in the list is a data frame of addresses\n  addresses   = data.frame(\n    street = c(\"145 Medical Way\", \"1048 Brown Ave\", \"999 El Camino\"),\n    city   = c(\"Andover\", \"Hamilton\", \"El Paso\")\n    )\n  )\n\nHere is how the list looks when printed to the console. See how there are two named elements:\n\nhospitals, a character vector\n\naddresses, a data frame of addresses\n\n\nmy_list\n\n$hospitals\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\n$addresses\n           street     city\n1 145 Medical Way  Andover\n2  1048 Brown Ave Hamilton\n3   999 El Camino  El Paso\n\n\nNow we extract, using various methods:\n\nmy_list[1] # this returns the element in class \"list\" - the element name is still displayed\n\n$hospitals\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\nmy_list[[1]] # this returns only the (unnamed) character vector\n\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\nmy_list[[\"hospitals\"]] # you can also index by name of the list element\n\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\nmy_list[[1]][3] # this returns the third element of the \"hospitals\" character vector\n\n[1] \"Santa Anna\"\n\nmy_list[[2]][1] # This returns the first column (\"street\") of the address data frame\n\n           street\n1 145 Medical Way\n2  1048 Brown Ave\n3   999 El Camino\n\n\n\n\n\n\nYou can remove individual objects from your R environment by putting the name in the rm() function (no quote marks):\n\nrm(object_name)\n\nYou can remove all objects (clear your workspace) by running:\n\nrm(list = ls(all = TRUE))\n\n\n\n\n\nSince factors are special vectors, the same rules for selecting values using indices apply.\n\nexpression &lt;- c(\"high\",\"low\",\"low\",\"medium\",\"high\",\"medium\",\"medium\",\"low\",\"low\",\"low\")\n\nThe elements of this expression factor created previously has following categories or levels: low, medium, and high.\nLet’s extract the values of the factor with high expression, and let’s using nesting here:\n\nexpression[expression == \"high\"]    ## This will only return those elements in the factor equal to \"high\"\n\n[1] \"high\" \"high\"\n\n\n\nNesting note:\nThe piece of code above was more efficient with nesting; we used a single step instead of two steps as shown below:\nStep1 (no nesting): idx &lt;- expression == \"high\"\nStep2 (no nesting): expression[idx]\n\n\n\nWe have briefly talked about factors, but this data type only becomes more intuitive once you’ve had a chance to work with it. Let’s take a slight detour and learn about how to relevel categories within a factor.\nTo view the integer assignments under the hood you can use str():\n\nexpression\n\n [1] \"high\"   \"low\"    \"low\"    \"medium\" \"high\"   \"medium\" \"medium\" \"low\"   \n [9] \"low\"    \"low\"   \n\n\nThe categories are referred to as “factor levels”. As we learned earlier, the levels in the expression factor were assigned integers alphabetically, with high=1, low=2, medium=3. However, it makes more sense for us if low=1, medium=2 and high=3, i.e. it makes sense for us to “relevel” the categories in this factor.\nTo relevel the categories, you can add the levels argument to the factor() function, and give it a vector with the categories listed in the required order:\n\nexpression &lt;- factor(expression, levels=c(\"low\", \"medium\", \"high\"))     # you can re-factor a factor \n\nNow we have a releveled factor with low as the lowest or first category, medium as the second and high as the third. This is reflected in the way they are listed in the output of str(), as well as in the numbering of which category is where in the factor.\n\nNote: Releveling becomes necessary when you need a specific category in a factor to be the “base” category, i.e. category that is equal to 1. One example would be if you need the “control” to be the “base” in a given RNA-seq experiment.\n\n\n\n\n\n\n\n\nTwo general approaches to working with objects are:\n\nPipes/tidyverse - pipes send an object from function to function - emphasis is on the action, not the object\n\nDefine intermediate objects - an object is re-defined again and again - emphasis is on the object\n\n\n\n\nSimply explained, the pipe operator (%&gt;%) passes an intermediate output from one function to the next.\nYou can think of it as saying “then”. Many functions can be linked together with %&gt;%.\n\nPiping emphasizes a sequence of actions, not the object the actions are being performed on\n\nPipes are best when a sequence of actions must be performed on one object\n\nPipes come from the package magrittr, which is automatically included in packages dplyr and tidyverse\nPipes can make code more clean and easier to read, more intuitive\n\nRead more on this approach in the tidyverse style guide\nHere is a fake example for comparison, using fictional functions to “bake a cake”. First, the pipe method:\n\n# A fake example of how to bake a cake using piping syntax\n\ncake &lt;- flour %&gt;%       # to define cake, start with flour, and then...\n  add(eggs) %&gt;%   # add eggs\n  add(oil) %&gt;%    # add oil\n  add(water) %&gt;%  # add water\n  mix_together(         # mix together\n    utensil = spoon,\n    minutes = 2) %&gt;%    \n  bake(degrees = 350,   # bake\n       system = \"fahrenheit\",\n       minutes = 35) %&gt;%  \n  let_cool()            # let it cool down\n\nHere is another link describing the utility of pipes.\nPiping is not a base function. To use piping, the magrittr package must be installed and loaded (this is typically done by loading tidyverse or dplyr package which include it). You can read more about piping in the magrittr documentation.\nNote that just like other R commands, pipes can be used to just display the result, or to save/re-save an object, depending on whether the assignment operator &lt;- is involved. See both below:\n\n# Create or overwrite object, defining as aggregate counts by age category (not printed)\nlinelist_summary &lt;- linelist %&gt;% \n  count(age_cat)\n\n\n# Print the table of counts in the console, but don't save it\nlinelist %&gt;% \n  count(age_cat)\n\n  age_cat    n\n1     0-4 1095\n2     5-9 1095\n3   10-14  941\n4   15-19  743\n5   20-29 1073\n6   30-49  754\n7   50-69   95\n8     70+    6\n9    &lt;NA&gt;   86\n\n\n%&lt;&gt;%\nThis is an “assignment pipe” from the magrittr package, which pipes an object forward and also re-defines the object. It must be the first pipe operator in the chain. It is shorthand. The below two commands are equivalent:\n\nlinelist &lt;- linelist %&gt;%\n  filter(age &gt; 50)\n\nlinelist %&lt;&gt;% filter(age &gt; 50)\n\n\n\n\n\nThis approach to changing objects/dataframes may be better if:\n\nYou need to manipulate multiple objects\n\nThere are intermediate steps that are meaningful and deserve separate object names\n\nRisks:\n\nCreating new objects for each step means creating lots of objects. If you use the wrong one you might not realize it!\n\nNaming all the objects can be confusing\n\nErrors may not be easily detectable\n\nEither name each intermediate object, or overwrite the original, or combine all the functions together. All come with their own risks.\nBelow is the same fake “cake” example as above, but using this style:\n\n# a fake example of how to bake a cake using this method (defining intermediate objects)\nbatter_1 &lt;- left_join(flour, eggs)\nbatter_2 &lt;- left_join(batter_1, oil)\nbatter_3 &lt;- left_join(batter_2, water)\n\nbatter_4 &lt;- mix_together(object = batter_3, utensil = spoon, minutes = 2)\n\ncake &lt;- bake(batter_4, degrees = 350, system = \"fahrenheit\", minutes = 35)\n\ncake &lt;- let_cool(cake)\n\nCombine all functions together - this is difficult to read:\n\n# an example of combining/nesting mutliple functions together - difficult to read\ncake &lt;- let_cool(bake(mix_together(batter_3, utensil = spoon, minutes = 2), degrees = 350, system = \"fahrenheit\", minutes = 35))\n\n\n\n\n\n\n\nWhen a command is run, the R Console may show you warning or error messages in red text.\n\nA warning means that R has completed your command, but had to take additional steps or produced unusual output that you should be aware of.\nAn error means that R was not able to complete your command.\n\nLook for clues:\n\nThe error/warning message will often include a line number for the problem.\nIf an object “is unknown” or “not found”, perhaps you spelled it incorrectly, forgot to call a package with library(), or forgot to re-run your script after making changes.\n\nIf all else fails, copy the error message into Google along with some key terms - chances are that someone else has worked through this already!\n\n\n\n\nA few things to remember when writing commands in R, to avoid errors and warnings:\n\nAlways close parentheses - tip: count the number of opening “(” and closing parentheses “)” for each code chunk\nAvoid spaces in column and object names. Use underscore ( _ ) or periods ( . ) instead\nKeep track of and remember to separate a function’s arguments with commas\n\n\n\n\n\nAny script (RMarkdown or otherwise) will give clues when you have made a mistake. For example, if you forgot to write a comma where it is needed, or to close a parentheses, RStudio will raise a flag on that line, on the right side of the script, to warn you."
  },
  {
    "objectID": "readings/basics.html#functions",
    "href": "readings/basics.html#functions",
    "title": "R Basics",
    "section": "",
    "text": "Functions are at the core of using R. Functions are how you perform tasks and operations. Many functions come installed with R, many more are available for download in packages (explained in the packages section), and you can even write your own custom functions!\nThis basics section on functions explains:\n\nWhat a function is and how they work\n\nWhat function arguments are\n\nHow to get help understanding a function\n\n\n\n\n\n\n\nA quick note on syntax\n\n\n\n\n\nIn this workbook, functions are written in code-text with open parentheses, like this: filter(). As explained in the packages section, functions are downloaded within packages. In this handbook, package names are written in bold, like dplyr. Sometimes in example code you may see the function name linked explicitly to the name of its package with two colons (::) like this: dplyr::filter(). The purpose of this linkage is explained in the packages section.\n\n\n\n\n\n\nA function is like a machine that receives inputs, does some action with those inputs, and produces an output. What the output is depends on the function.\nFunctions typically operate upon some object placed within the function’s parentheses. For example, the function sqrt() calculates the square root of a number:\n\nsqrt(49)\n\n[1] 7\n\n\nThe object provided to a function also can be a column in a dataset (see the Objects section for detail on all the kinds of objects). Because R can store multiple datasets, you will need to specify both the dataset and the column. One way to do this is using the $ notation to link the name of the dataset and the name of the column (dataset$column). In the example below, the function summary() is applied to the numeric column age in the dataset linelist, and the output is a summary of the column’s numeric and missing values.\n\n# Print summary statistics of column 'age' in the dataset 'linelist'\nsummary(linelist$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   0.00    6.00   13.00   16.07   23.00   84.00      86 \n\n\n\n\n\n\n\n\nNote\n\n\n\nBehind the scenes, a function represents complex additional code that has been wrapped up for the user into one easy command.\n\n\n\n\n\n\nFunctions often ask for several inputs, called arguments, located within the parentheses of the function, usually separated by commas.\n\nSome arguments are required for the function to work correctly, others are optional\n\nOptional arguments have default settings\n\nArguments can take character, numeric, logical (TRUE/FALSE), and other inputs\n\nHere is a fun fictional function, called oven_bake(), as an example of a typical function. It takes an input object (e.g. a dataset, or in this example “dough”) and performs operations on it as specified by additional arguments (minutes = and temperature =). The output can be printed to the console, or saved as an object using the assignment operator &lt;-.\n\n\n\n\n\n\n\n\n\nIn a more realistic example, the age_pyramid() command below produces an age pyramid plot based on defined age groups and a binary split column, such as gender. The function is given three arguments within the parentheses, separated by commas. The values supplied to the arguments establish linelist as the dataframe to use, age_cat5 as the column to count, and gender as the binary column to use for splitting the pyramid by color.\n\n# Create an age pyramid\nage_pyramid(data = linelist, age_group = \"age_cat5\", split_by = \"gender\")\n\n\n\n\nThe above command can be equivalently written as below, in a longer style with a new line for each argument. This style can be easier to read, and easier to write “comments” with # to explain each part (commenting extensively is good practice!). To run this longer command you can highlight the entire command and click “Run”, or just place your cursor in the first line and then press the Ctrl and Enter keys simultaneously.\n\n# Create an age pyramid\nage_pyramid(\n  data = linelist,        # use case linelist\n  age_group = \"age_cat5\", # provide age group column\n  split_by = \"gender\"     # use gender column for two sides of pyramid\n  )\n\n\n\n\nThe first half of an argument assignment (e.g. data =) does not need to be specified if the arguments are written in a specific order (specified in the function’s documentation). The below code produces the exact same pyramid as above, because the function expects the argument order: data frame, age_group variable, split_by variable.\n\n# This command will produce the exact same graphic as above\nage_pyramid(linelist, \"age_cat5\", \"gender\")\n\nA more complex age_pyramid() command might include the optional arguments to:\n\nShow proportions instead of counts (set proportional = TRUE when the default is FALSE)\n\nSpecify the two colors to use (pal = is short for “palette” and is supplied with a vector of two color names. See the objects page for how the function c() makes a vector)\n\n\n\n\n\n\n\nNote\n\n\n\nFor arguments that you specify with both parts of the argument (e.g. proportional = TRUE), their order among all the arguments does not matter.\n\n\n\nage_pyramid(\n  linelist,                    # use case linelist\n  \"age_cat5\",                  # age group column\n  \"gender\",                    # split by gender\n  proportional = TRUE,         # percents instead of counts\n  pal = c(\"orange\", \"purple\")  # colors\n  )"
  },
  {
    "objectID": "readings/basics.html#packages",
    "href": "readings/basics.html#packages",
    "title": "R Basics",
    "section": "",
    "text": "Packages contain functions.\nAn R package is a shareable bundle of code and documentation that contains pre-defined functions. Users in the R community develop packages all the time catered to specific problems, it is likely that one can help with your work! You will install and use hundreds of packages in your use of R.\nOn installation, R contains “base” packages and functions that perform common elementary tasks. But many R users create specialized functions, which are verified by the R community and which you can download as a package for your own use. In this handbook, package names are written in bold. One of the more challenging aspects of R is that there are often many functions or packages to choose from to complete a given task.\n\n\nFunctions are contained within packages which can be downloaded (“installed”) to your computer from the internet. Once a package is downloaded, it is stored in your “library”. You can then access the functions it contains during your current R session by “loading” the package.\nThink of R as your personal library: When you download a package, your library gains a new book of functions, but each time you want to use a function in that book, you must borrow (“load”) that book from your library.\nIn summary: to use the functions available in an R package, 2 steps must be implemented:\n\nThe package must be installed (once), and\n\nThe package must be loaded (each R session)\n\n\n\nYour “library” is actually a folder on your computer, containing a folder for each package that has been installed. Find out where R is installed in your computer, and look for a folder called “win-library”. For example: R\\win-library\\4.0 (the 4.0 is the R version - you’ll have a different library for each R version you’ve downloaded).\nYou can print the file path to your library by entering .libPaths() (empty parentheses).\n\n\n\nMost often, R users download packages from CRAN. CRAN (Comprehensive R Archive Network) is an online public warehouse of R packages that have been published by R community members.\n\n\n\nThe base R function for installing a package is install.packages(). The name of the package to install must be provided in the parentheses in quotes. If you want to install multiple packages in one command, they must be listed within a character vector c().\n\n\n\n\n\n\nCommon Mistake\n\n\n\nThis command installs a package, but does not load it for use in the current session.\n\n\n\n# install a single package with base R\ninstall.packages(\"tidyverse\")\n\n# install multiple packages with base R\ninstall.packages(c(\"tidyverse\", \"rio\", \"here\"))\n\nInstallation can also be accomplished point-and-click by going to the RStudio “Packages” pane and clicking “Install” and searching for the desired package name.\nThe base R function to load a package for use (after it has been installed) is library(). It can load only one package at a time (another reason to use p_load()). You can provide the package name with or without quotes.\n\n# load packages for use, with base R\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(here)\n\nTo check whether a package in installed and/or loaded, you can view the Packages pane in RStudio. If the package is installed, it is shown there with version number. If its box is checked, it is loaded for the current session.\n\n\n\n\nFor clarity in this handbook, functions are sometimes preceded by the name of their package using the :: symbol in the following way: package_name::function_name()\nOnce a package is loaded for a session, this explicit style is not necessary. One can just use function_name(). However writing the package name is useful when a function name is common and may exist in multiple packages (e.g. plot()). Writing the package name will also load the package if it is not already loaded.\n\n# This command uses the package \"rio\" and its function \"import()\" to import a dataset\nlinelist &lt;- rio::import(\"linelist.xlsx\", which = \"Sheet1\")\n\n\n\n\nTo read more about a function, you can search for it in the Help tab of the lower-right RStudio. You can also run a command like ?thefunctionname (put the name of the function after a question mark) and the Help page will appear in the Help pane. Finally, try searching online for resources.\n\n\n\nYou can update packages by re-installing them. You can also click the green “Update” button in your RStudio Packages pane to see which packages have new versions Wto install. Be aware that your old code may need to be updated if there is a major revision to how a function works!\n\n\n\nUse remove.packages(). Alternatively, go find the folder which contains your library and manually delete the folder.\n\n\n\nPackages often depend on other packages to work. These are called dependencies. If a dependency fails to install, then the package depending on it may also fail to install.\n\n\n\nIt is not uncommon that two or more packages contain the same function name. For example, the package dplyr has a filter() function, but so does the package stats. The default filter() function depends on the order these packages are first loaded in the R session - the later one will be the default for the command filter().\nYou can check the order in your Environment pane of R Studio - click the drop-down for “Global Environment” and see the order of the packages. Functions from packages lower on that drop-down list will mask functions of the same name in packages that appear higher in the drop-down list. When first loading a package, R will warn you in the console if masking is occurring, but this can be easy to miss.\n\n\n\n\n\n\n\n\n\nHere are ways you can fix masking:\n\nSpecify the package name in the command. For example, use dplyr::filter()\n\nRe-arrange the order in which the packages are loaded and start a new R session\n\n\n\n\nSee this guide to install an older version of a particular package."
  },
  {
    "objectID": "readings/basics.html#scripts",
    "href": "readings/basics.html#scripts",
    "title": "R Basics",
    "section": "",
    "text": "Scripts are a fundamental part of programming. They are documents that hold your commands (e.g. functions to create and modify datasets, print visualizations, etc). You can save a script and run it again later. There are many advantages to storing and running your commands from a script (vs. typing commands one-by-one into the R console “command line”):\n\nPortability - you can share your work with others by sending them your scripts\n\nReproducibility - so that you and others know exactly what you did\n\nVersion control - so you can track changes made by yourself or colleagues\n\nCommenting/annotation - to explain to your colleagues what you have done\n\n\n\nIn a script you can also annotate (“comment”) around your R code. Commenting is helpful to explain to yourself and other readers what you are doing. You can add a comment by typing the hash symbol (#) and writing your comment after it. The commented text will appear in a different color than the R code.\nAny code written after the # will not be run. Therefore, placing a # before code is also a useful way to temporarily block a line of code (“comment out”) if you do not want to delete it). You can comment out/in multiple lines at once by highlighting them and pressing Ctrl+Shift+c (Cmd+Shift+c in Mac).\n\n# A comment can be on a line by itself\n# import data\nlinelist &lt;- import(\"linelist_raw.xlsx\") %&gt;%   # a comment can also come after code\n# filter(age &gt; 50)                          # It can also be used to deactivate / remove a line of code\n  count()\n\n\nComment on what you are doing and on why you are doing it.\n\nBreak your code into logical sections\n\nAccompany your code with a text step-by-step description of what you are doing (e.g. numbered steps)\n\n\n\n\nIt is important to be conscious of your coding style - especially if working on a team. Some nice R styles guide are the tidyverse style guide, Hadley Wickham’s style guide, and Google’s. There are also packages such as styler and lintr which help you conform to a style.\nA few very basic points to make your code readable to others:\n* When naming objects, use only lowercase letters, numbers, and underscores _, e.g. my_data\n* Use frequent spaces, including around operators, e.g. n = 1 and age_new &lt;- age_old + 3\n\n\n\nBelow is an example of a short R script. Remember, the better you succinctly explain your code in comments, the more your colleagues will like you!\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn R markdown script is a type of R script in which the script itself becomes an output document (PDF, Word, HTML, Powerpoint, etc.). Quarto is a new version of R markdown. These are incredibly useful and versatile tools often used to create dynamic and automated reports. Even this website is produced with Quarto!"
  },
  {
    "objectID": "readings/basics.html#objects",
    "href": "readings/basics.html#objects",
    "title": "R Basics",
    "section": "",
    "text": "Everything in R is an object, and R is an “object-oriented” language. These sections will explain:\n\nHow to create objects (&lt;-)\nTypes of objects (e.g. data frames, vectors..)\n\nHow to access subparts of objects (e.g. variables in a dataset)\n\nClasses of objects (e.g. numeric, logical, integer, double, character, factor)\n\n\n\n\nEverything you store in R - datasets, variables, a list of village names, a total population number, even outputs such as graphs - are objects which are assigned a name and can be referenced in later commands.\nAn object exists when you have assigned it a value (see the assignment section below). When it is assigned a value, the object appears in the Environment (see the upper right pane of RStudio). It can then be operated upon, manipulated, changed, and re-defined.\n\n\n\n\nCreate objects by assigning them a value with the &lt;- operator.\nYou can think of the assignment operator &lt;- as the words “is defined as”. Assignment commands generally follow a standard order:\nobject_name &lt;- value (or process/calculation that produce a value)\nFor example, you may want to record the current epidemiological reporting week as an object for reference in later code. In this example, the object current_week is created when it is assigned the value \"2018-W10\" (the quote marks make this a character value). The object current_week will then appear in the RStudio Environment pane (upper-right) and can be referenced in later commands.\nSee the R commands and their output in the boxes below.\n\ncurrent_week &lt;- \"2018-W10\"   # this command creates the object current_week by assigning it a value\ncurrent_week                 # this command prints the current value of current_week object in the console\n\n[1] \"2018-W10\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote the [1] in the R console output is simply indicating that you are viewing the first item of the output\n\n\n\n\n\n\n\n\nCommon Mistake\n\n\n\nAn object’s value can be over-written at any time by running an assignment command to re-define its value. Thus, the order of the commands run is very important.\nFor instance, the following command will re-define the value of current_week:\n\ncurrent_week &lt;- \"2018-W51\"   # assigns a NEW value to the object current_week\ncurrent_week                 # prints the current value of current_week in the console\n\n[1] \"2018-W51\"\n\n\n\n\nEquals signs =\nYou will also see equals signs in R code:\n\nA double equals sign == between two objects or values asks a logical question: “is this equal to that?”.\n\nYou will also see equals signs within functions used to specify values of function arguments (read about these in sections below), for example max(age, na.rm = TRUE).\n\nYou can use a single equals sign = in place of &lt;- to create and define objects, but this is discouraged. You can read about why this is discouraged here.\n\nDatasets\nDatasets are also objects (typically “dataframes”) and must be assigned names when they are imported. In the code below, the object linelist is created and assigned the value of a CSV file imported with the rio package and its import() function.\n\n# linelist is created and assigned the value of the imported CSV file\nlinelist &lt;- import(\"my_linelist.csv\")\n\n\n\n\n\n\n\nNaming Objects\n\n\n\n\nObject names must not contain spaces, but you should use underscore (_) or a period (.) instead of a space.\n\nObject names are case-sensitive (meaning that Dataset_A is different from dataset_A).\nObject names must begin with a letter (cannot begin with a number like 1, 2 or 3).\n\n\n\nOutputs\nOutputs like tables and plots provide an example of how outputs can be saved as objects, or just be printed without being saved. A cross-tabulation of gender and outcome using the base R function table() can be printed directly to the R console (without being saved).\n\n# printed to R console only\ntable(linelist$gender, linelist$outcome)\n\n   \n    Death Recover\n  f  1227     953\n  m  1228     950\n\n\nBut the same table can be saved as a named object. Then, optionally, it can be printed.\n\n# save\ngen_out_table &lt;- table(linelist$gender, linelist$outcome)\n\n# print\ngen_out_table\n\n   \n    Death Recover\n  f  1227     953\n  m  1228     950\n\n\nColumns\nColumns in a dataset are also objects and can be defined, over-written, and created as described below in the section on Columns.\nYou can use the assignment operator from base R to create a new column. Below, the new column bmi (Body Mass Index) is created, and for each row the new value is result of a mathematical operation on the row’s value in the wt_kg and ht_cm columns.\n\n# create new \"bmi\" column using base R syntax\nlinelist$bmi &lt;- linelist$wt_kg / (linelist$ht_cm/100)^2\n\nHowever, in this handbook, we emphasize a different approach to defining columns, which uses the function mutate() from the dplyr package and piping with the pipe operator (%&gt;%). The syntax is easier to read and there are other advantages.\n\n# create new \"bmi\" column using dplyr syntax\nlinelist &lt;- linelist %&gt;% \n  mutate(bmi = wt_kg / (ht_cm/100)^2)\n\n\n\n\n\nObjects can be a single piece of data (e.g. my_number &lt;- 24), or they can consist of structured data.\nThe graphic below is borrowed from this online R tutorial. It shows some common data structures and their names.\n\n\n\n\n\n\n\n\n\nIn epidemiology (and particularly field epidemiology), you will most commonly encounter data frames and vectors:\n\n\n\n\n\n\n\n\nCommon structure\nExplanation\nExample\n\n\n\n\nVectors\nA container for a sequence of singular objects, all of the same class (e.g. numeric, character).\n“Variables” (columns) in data frames are vectors (e.g. the column age_years).\n\n\nData Frames\nVectors (e.g. columns) that are bound together that all have the same number of rows.\nlinelist is a data frame.\n\n\n\nNote that to create a vector that “stands alone” (is not part of a data frame) the function c() is used to combine the different elements. For example, if creating a vector of colors plot’s color scale: vector_of_colors &lt;- c(\"blue\", \"red2\", \"orange\", \"grey\")\n\n\n\n\nAll the objects stored in R have a class which tells R how to handle the object. There are many possible classes, but common ones include:\n\n\n\n\n\n\n\n\nClass\nExplanation\nExamples\n\n\n\n\nCharacter\nThese are text/words/sentences “within quotation marks”. Math cannot be done on these objects.\n“Character objects are in quotation marks”\n\n\nInteger\nNumbers that are whole only (no decimals)\n-5, 14, or 2000\n\n\nNumeric\nThese are numbers and can include decimals. If within quotation marks they will be considered character class.\n23.1 or 14\n\n\nFactor\nThese are vectors that have a specified order or hierarchy of values\nAn variable of economic status with ordered values\n\n\nDate\nOnce R is told that certain data are Dates, these data can be manipulated and displayed in special ways.\n2018-04-12 or 15/3/1954 or Wed 4 Jan 1980\n\n\nLogical\nValues must be one of the two special values TRUE or FALSE (note these are not “TRUE” and “FALSE” in quotation marks)\nTRUE or FALSE\n\n\ndata.frame\nA data frame is how R stores a typical dataset. It consists of vectors (columns) of data bound together, that all have the same number of observations (rows).\nThe example AJS dataset named linelist_raw contains 68 variables with 300 observations (rows) each.\n\n\ntibble\ntibbles are a variation on data frame, the main operational difference being that they print more nicely to the console (display first 10 rows and only columns that fit on the screen)\nAny data frame, list, or matrix can be converted to a tibble with as_tibble()\n\n\nlist\nA list is like vector, but holds other objects that can be other different classes\nA list could hold a single number, and a dataframe, and a vector, and even another list within it!\n\n\n\nYou can test the class of an object by providing its name to the function class(). You can reference a specific column within a dataset using the $ notation to separate the name of the dataset and the name of the column.\n\nclass(linelist)         # class should be a data frame or tibble\n\n[1] \"data.frame\"\n\nclass(linelist$age)     # class should be numeric\n\n[1] \"numeric\"\n\nclass(linelist$gender)  # class should be character\n\n[1] \"character\"\n\n\nSometimes, a column will be converted to a different class automatically by R. Watch out for this! For example, if you have a vector or column of numbers, but a character value is inserted… the entire column will change to class character.\n\nnum_vector &lt;- c(1,2,3,4,5) # define vector as all numbers\nclass(num_vector)          # vector is numeric class\n\n[1] \"numeric\"\n\nnum_vector[3] &lt;- \"three\"   # convert the third element to a character\nclass(num_vector)          # vector is now character class\n\n[1] \"character\"\n\n\nOne common example of this is when manipulating a data frame in order to print a table - if you make a total row and try to paste/glue together percents in the same cell as numbers (e.g. 23 (40%)), the entire numeric column above will convert to character and can no longer be used for mathematical calculations.Sometimes, you will need to convert objects or columns to another class.\n\n\n\nFunction\nAction\n\n\n\n\nas.character()\nConverts to character class\n\n\nas.numeric()\nConverts to numeric class\n\n\nas.integer()\nConverts to integer class\n\n\nas.Date()\nConverts to Date class\n\n\nfactor()\nConverts to factor\n\n\n\nLikewise, there are base R functions to check whether an object IS of a specific class, such as is.numeric(), is.character(), is.double(), is.factor(), is.integer()\nHere is more online material on classes and data structures in R.\n\n\n\n\nA column in a data frame is technically a “vector” (see table above) - a series of values that must all be the same class (either character, numeric, logical, etc).\nA vector can exist independent of a data frame, for example a vector of column names that you want to include as explanatory variables in a model. To create a “stand alone” vector, use the c() function as below:\n\n# define the stand-alone vector of character values\nexplanatory_vars &lt;- c(\"gender\", \"fever\", \"chills\", \"cough\", \"aches\", \"vomit\")\n\n# print the values in this named vector\nexplanatory_vars\n\n[1] \"gender\" \"fever\"  \"chills\" \"cough\"  \"aches\"  \"vomit\" \n\n\nColumns in a data frame are also vectors and can be called, referenced, extracted, or created using the $ symbol. The $ symbol connects the name of the column to the name of its data frame. In this handbook, we try to use the word “column” instead of “variable”.\n\n# Retrieve the length of the vector age_years\nlength(linelist$age) # (age is a column in the linelist data frame)\n\n\n\n\n\nYou may need to view parts of objects, also called “indexing”, which is often done using the square brackets [ ]. Using $ on a dataframe to access a column is also a type of indexing.\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")  # define the vector\nmy_vector[5]                                  # print the 5th element\n\n[1] \"e\"\n\n\nSquare brackets also work to return specific parts of an returned output, such as the output of a summary() function:\n\n# All of the summary\nsummary(linelist$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   0.00    6.00   13.00   16.07   23.00   84.00      86 \n\n# Just the second element of the summary, with name (using only single brackets)\nsummary(linelist$age)[2]\n\n1st Qu. \n      6 \n\n# Just the second element, without name (using double brackets)\nsummary(linelist$age)[[2]]\n\n[1] 6\n\n# Extract an element by name, without showing the name\nsummary(linelist$age)[[\"Median\"]]\n\n[1] 13\n\n\nBrackets also work on data frames to view specific rows and columns. You can do this using the syntax dataframe[rows, columns]:\n\n# View a specific row (2) from dataset, with all columns (don't forget the comma!)\nlinelist[2,]\n\n# View all rows, but just one column\nlinelist[, \"date_onset\"]\n\n# View values from row 2 and columns 5 through 10\nlinelist[2, 5:10] \n\n# View values from row 2 and columns 5 through 10 and 18\nlinelist[2, c(5:10, 18)] \n\n# View rows 2 through 20, and specific columns\nlinelist[2:20, c(\"date_onset\", \"outcome\", \"age\")]\n\n# View rows and columns based on criteria\n# *** Note the dataframe must still be named in the criteria!\nlinelist[linelist$age &gt; 25 , c(\"date_onset\", \"outcome\", \"age\")]\n\n# Use View() to see the outputs in the RStudio Viewer pane (easier to read) \n# *** Note the capital \"V\" in View() function\nView(linelist[2:20, \"date_onset\"])\n\n# Save as a new object\nnew_table &lt;- linelist[2:20, c(\"date_onset\")] \n\n\n\n\n\n\n\nUsing Tidyverse Instead\n\n\n\n\n\nIn a future session, we will learn how to perform many of these operations using dplyr syntax (functions filter() for rows, and select() for columns) as opposed to the base R syntax shown here.\nTo filter based on “row number”, you can use the dplyr function row_number() with open parentheses as part of a logical filtering statement. Often you will use the %in% operator and a range of numbers as part of that logical statement, as shown below. To see the first N rows, you can also use the special dplyr function head().\n\n# View first 100 rows\nlinelist %&gt;% head(100)\n\n# Show row 5 only\nlinelist %&gt;% filter(row_number() == 5)\n\n# View rows 2 through 20, and three specific columns (note no quotes necessary on column names)\nlinelist %&gt;% filter(row_number() %in% 2:20) %&gt;% select(date_onset, outcome, age)\n\n\n\n\nWhen indexing an object of class list, single brackets always return with class list, even if only a single object is returned. Double brackets, however, can be used to access a single element and return a different class than list.\nBrackets can also be written after one another, as demonstrated below.\nThis visual explanation of lists indexing, with pepper shakers is humorous and helpful.\n\n# define demo list\nmy_list &lt;- list(\n  # First element in the list is a character vector\n  hospitals = c(\"Central\", \"Empire\", \"Santa Anna\"),\n  \n  # second element in the list is a data frame of addresses\n  addresses   = data.frame(\n    street = c(\"145 Medical Way\", \"1048 Brown Ave\", \"999 El Camino\"),\n    city   = c(\"Andover\", \"Hamilton\", \"El Paso\")\n    )\n  )\n\nHere is how the list looks when printed to the console. See how there are two named elements:\n\nhospitals, a character vector\n\naddresses, a data frame of addresses\n\n\nmy_list\n\n$hospitals\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\n$addresses\n           street     city\n1 145 Medical Way  Andover\n2  1048 Brown Ave Hamilton\n3   999 El Camino  El Paso\n\n\nNow we extract, using various methods:\n\nmy_list[1] # this returns the element in class \"list\" - the element name is still displayed\n\n$hospitals\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\nmy_list[[1]] # this returns only the (unnamed) character vector\n\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\nmy_list[[\"hospitals\"]] # you can also index by name of the list element\n\n[1] \"Central\"    \"Empire\"     \"Santa Anna\"\n\nmy_list[[1]][3] # this returns the third element of the \"hospitals\" character vector\n\n[1] \"Santa Anna\"\n\nmy_list[[2]][1] # This returns the first column (\"street\") of the address data frame\n\n           street\n1 145 Medical Way\n2  1048 Brown Ave\n3   999 El Camino\n\n\n\n\n\n\nYou can remove individual objects from your R environment by putting the name in the rm() function (no quote marks):\n\nrm(object_name)\n\nYou can remove all objects (clear your workspace) by running:\n\nrm(list = ls(all = TRUE))\n\n\n\n\n\nSince factors are special vectors, the same rules for selecting values using indices apply.\n\nexpression &lt;- c(\"high\",\"low\",\"low\",\"medium\",\"high\",\"medium\",\"medium\",\"low\",\"low\",\"low\")\n\nThe elements of this expression factor created previously has following categories or levels: low, medium, and high.\nLet’s extract the values of the factor with high expression, and let’s using nesting here:\n\nexpression[expression == \"high\"]    ## This will only return those elements in the factor equal to \"high\"\n\n[1] \"high\" \"high\"\n\n\n\nNesting note:\nThe piece of code above was more efficient with nesting; we used a single step instead of two steps as shown below:\nStep1 (no nesting): idx &lt;- expression == \"high\"\nStep2 (no nesting): expression[idx]\n\n\n\nWe have briefly talked about factors, but this data type only becomes more intuitive once you’ve had a chance to work with it. Let’s take a slight detour and learn about how to relevel categories within a factor.\nTo view the integer assignments under the hood you can use str():\n\nexpression\n\n [1] \"high\"   \"low\"    \"low\"    \"medium\" \"high\"   \"medium\" \"medium\" \"low\"   \n [9] \"low\"    \"low\"   \n\n\nThe categories are referred to as “factor levels”. As we learned earlier, the levels in the expression factor were assigned integers alphabetically, with high=1, low=2, medium=3. However, it makes more sense for us if low=1, medium=2 and high=3, i.e. it makes sense for us to “relevel” the categories in this factor.\nTo relevel the categories, you can add the levels argument to the factor() function, and give it a vector with the categories listed in the required order:\n\nexpression &lt;- factor(expression, levels=c(\"low\", \"medium\", \"high\"))     # you can re-factor a factor \n\nNow we have a releveled factor with low as the lowest or first category, medium as the second and high as the third. This is reflected in the way they are listed in the output of str(), as well as in the numbering of which category is where in the factor.\n\nNote: Releveling becomes necessary when you need a specific category in a factor to be the “base” category, i.e. category that is equal to 1. One example would be if you need the “control” to be the “base” in a given RNA-seq experiment."
  },
  {
    "objectID": "readings/basics.html#piping",
    "href": "readings/basics.html#piping",
    "title": "R Basics",
    "section": "",
    "text": "Two general approaches to working with objects are:\n\nPipes/tidyverse - pipes send an object from function to function - emphasis is on the action, not the object\n\nDefine intermediate objects - an object is re-defined again and again - emphasis is on the object\n\n\n\n\nSimply explained, the pipe operator (%&gt;%) passes an intermediate output from one function to the next.\nYou can think of it as saying “then”. Many functions can be linked together with %&gt;%.\n\nPiping emphasizes a sequence of actions, not the object the actions are being performed on\n\nPipes are best when a sequence of actions must be performed on one object\n\nPipes come from the package magrittr, which is automatically included in packages dplyr and tidyverse\nPipes can make code more clean and easier to read, more intuitive\n\nRead more on this approach in the tidyverse style guide\nHere is a fake example for comparison, using fictional functions to “bake a cake”. First, the pipe method:\n\n# A fake example of how to bake a cake using piping syntax\n\ncake &lt;- flour %&gt;%       # to define cake, start with flour, and then...\n  add(eggs) %&gt;%   # add eggs\n  add(oil) %&gt;%    # add oil\n  add(water) %&gt;%  # add water\n  mix_together(         # mix together\n    utensil = spoon,\n    minutes = 2) %&gt;%    \n  bake(degrees = 350,   # bake\n       system = \"fahrenheit\",\n       minutes = 35) %&gt;%  \n  let_cool()            # let it cool down\n\nHere is another link describing the utility of pipes.\nPiping is not a base function. To use piping, the magrittr package must be installed and loaded (this is typically done by loading tidyverse or dplyr package which include it). You can read more about piping in the magrittr documentation.\nNote that just like other R commands, pipes can be used to just display the result, or to save/re-save an object, depending on whether the assignment operator &lt;- is involved. See both below:\n\n# Create or overwrite object, defining as aggregate counts by age category (not printed)\nlinelist_summary &lt;- linelist %&gt;% \n  count(age_cat)\n\n\n# Print the table of counts in the console, but don't save it\nlinelist %&gt;% \n  count(age_cat)\n\n  age_cat    n\n1     0-4 1095\n2     5-9 1095\n3   10-14  941\n4   15-19  743\n5   20-29 1073\n6   30-49  754\n7   50-69   95\n8     70+    6\n9    &lt;NA&gt;   86\n\n\n%&lt;&gt;%\nThis is an “assignment pipe” from the magrittr package, which pipes an object forward and also re-defines the object. It must be the first pipe operator in the chain. It is shorthand. The below two commands are equivalent:\n\nlinelist &lt;- linelist %&gt;%\n  filter(age &gt; 50)\n\nlinelist %&lt;&gt;% filter(age &gt; 50)\n\n\n\n\n\nThis approach to changing objects/dataframes may be better if:\n\nYou need to manipulate multiple objects\n\nThere are intermediate steps that are meaningful and deserve separate object names\n\nRisks:\n\nCreating new objects for each step means creating lots of objects. If you use the wrong one you might not realize it!\n\nNaming all the objects can be confusing\n\nErrors may not be easily detectable\n\nEither name each intermediate object, or overwrite the original, or combine all the functions together. All come with their own risks.\nBelow is the same fake “cake” example as above, but using this style:\n\n# a fake example of how to bake a cake using this method (defining intermediate objects)\nbatter_1 &lt;- left_join(flour, eggs)\nbatter_2 &lt;- left_join(batter_1, oil)\nbatter_3 &lt;- left_join(batter_2, water)\n\nbatter_4 &lt;- mix_together(object = batter_3, utensil = spoon, minutes = 2)\n\ncake &lt;- bake(batter_4, degrees = 350, system = \"fahrenheit\", minutes = 35)\n\ncake &lt;- let_cool(cake)\n\nCombine all functions together - this is difficult to read:\n\n# an example of combining/nesting mutliple functions together - difficult to read\ncake &lt;- let_cool(bake(mix_together(batter_3, utensil = spoon, minutes = 2), degrees = 350, system = \"fahrenheit\", minutes = 35))"
  },
  {
    "objectID": "readings/basics.html#errors-vs.-warnings-and-debugging-tips",
    "href": "readings/basics.html#errors-vs.-warnings-and-debugging-tips",
    "title": "R Basics",
    "section": "",
    "text": "When a command is run, the R Console may show you warning or error messages in red text.\n\nA warning means that R has completed your command, but had to take additional steps or produced unusual output that you should be aware of.\nAn error means that R was not able to complete your command.\n\nLook for clues:\n\nThe error/warning message will often include a line number for the problem.\nIf an object “is unknown” or “not found”, perhaps you spelled it incorrectly, forgot to call a package with library(), or forgot to re-run your script after making changes.\n\nIf all else fails, copy the error message into Google along with some key terms - chances are that someone else has worked through this already!\n\n\n\n\nA few things to remember when writing commands in R, to avoid errors and warnings:\n\nAlways close parentheses - tip: count the number of opening “(” and closing parentheses “)” for each code chunk\nAvoid spaces in column and object names. Use underscore ( _ ) or periods ( . ) instead\nKeep track of and remember to separate a function’s arguments with commas\n\n\n\n\n\nAny script (RMarkdown or otherwise) will give clues when you have made a mistake. For example, if you forgot to write a comma where it is needed, or to close a parentheses, RStudio will raise a flag on that line, on the right side of the script, to warn you."
  },
  {
    "objectID": "readings/data-basics.html",
    "href": "readings/data-basics.html",
    "title": "Core Data Functions",
    "section": "",
    "text": "Extended Materials\n\n\n\nYou can find the original, extended version of this chapter here.\n\n\n\n\n\n\n\n\n\n\n\nThis week we are going to learn how to use R to manipulate data. This will include learning about core functions for manipulating and summarizing data, as well as using conditional statements to create subsets.\n\n\nAn operators is a symbol or set of symbols representing some mathematical or logical operation. They are essentially equivalent to functions. R has a number of built-in operators, and libraries may add additional operators (such as the %&gt;% operator used in Tidyverse packages). Some examples of operators are:\n\nDefinitional operators\n\nRelational operators (less than, equal too..)\n\nLogical operators (and, or…)\n\nHandling missing values\n\nMathematical operators and functions (+/-, &gt;, sum(), median(), …)\n\nThe %in% operator\n\nR also has some built-in constants, which have the same meaning in programming as in mathematics and statistics. Examples of constants in R include:\n\npi which in base R equals 3.141593\nInf and -Inf for positive and negative infinity\nNaN for not a number (such as the result of 0/0)\nNA for missing data\n\n\n\n\n\n&lt;-\nThe basic assignment operator in R is &lt;-. Such that object_name &lt;- value.\nThis assignment operator can also be written as =. We advise use of &lt;- for general R use.\nWe also advise surrounding such operators with spaces, for readability.\n\n\n\n\nRelational operators compare values and are often used when defining new variables and subsets of datasets. Here are the common relational operators in R:\n\n\n\n\n\n\n\n\n\nMeaning\nOperator\nExample\nExample Result\n\n\n\n\nEqual to\n==\n\"A\" == \"a\"\nFALSE (because R is case sensitive) Note that == (double equals) is different from = (single equals), which acts like the assignment operator &lt;-\n\n\nNot equal to\n!=\n2 != 0\nTRUE\n\n\nGreater than\n&gt;\n4 &gt; 2\nTRUE\n\n\nLess than\n&lt;\n4 &lt; 2\nFALSE\n\n\nGreater than or equal to\n&gt;=\n6 &gt;= 4\nTRUE\n\n\nLess than or equal to\n&lt;=\n6 &lt;= 4\nFALSE\n\n\nValue is missing\nis.na()\nis.na(7)\nFALSE\n\n\nValue is not missing\n!is.na()\n!is.na(7)\nTRUE\n\n\n\nLogical operators, such as AND and OR, are often used to connect relational operators and create more complicated criteria. Complex statements might require parentheses ( ) for grouping and order of application.\n\n\n\n\n\n\n\nMeaning\nOperator\n\n\n\n\nAND\n&\n\n\nOR\n| (vertical bar)\n\n\nParentheses\n( ) Used to group criteria together and clarify order of operations\n\n\n\nFor example, below, we have a linelist with two variables we want to use to create our case definition, hep_e_rdt, a test result and other_cases_in_hh, which will tell us if there are other cases in the household. The command below uses the function case_when() to create the new variable case_def such that:\n\nlinelist_cleaned &lt;- linelist %&gt;%\n  mutate(case_def = case_when(\n    is.na(rdt_result) & is.na(other_case_in_home)            ~ NA_character_,\n    rdt_result == \"Positive\"                                 ~ \"Confirmed\",\n    rdt_result != \"Positive\" & other_cases_in_home == \"Yes\"  ~ \"Probable\",\n    TRUE                                                     ~ \"Suspected\"\n  ))\n\n\n\n\n\n\n\n\nCriteria in example above\nResulting value in new variable “case_def”\n\n\n\n\nIf the value for variables rdt_result and other_cases_in_home are missing\nNA (missing)\n\n\nIf the value in rdt_result is “Positive”\n“Confirmed”\n\n\nIf the value in rdt_result is NOT “Positive” AND the value in other_cases_in_home is “Yes”\n“Probable”\n\n\nIf one of the above criteria are not met\n“Suspected”\n\n\n\nNote that R is case-sensitive, so “Positive” is different than “positive”…\n\n\n\n\nIn R, missing values are represented by the special value NA (a “reserved” value) (capital letters N and A - not in quotation marks). To test whether a value is NA, use the special function is.na(), which returns TRUE or FALSE.\n\nrdt_result &lt;- c(\"Positive\", \"Suspected\", \"Positive\", NA)   # two positive cases, one suspected, and one unknown\nis.na(rdt_result)  # Tests whether the value of rdt_result is NA\n\n[1] FALSE FALSE FALSE  TRUE\n\n\nWe will be learning more about how to deal with missing data in future weeks.\n\n\n\n\nAll the operators and functions in this page are automatically available using base R.\n\n\nThese are often used to perform addition, division, to create new columns, etc. Below are common mathematical operators in R. Whether you put spaces around the operators is not important.\n\n\n\nPurpose\nExample in R\n\n\n\n\naddition\n2 + 3\n\n\nsubtraction\n2 - 3\n\n\nmultiplication\n2 * 3\n\n\ndivision\n30 / 5\n\n\nexponent\n2^3\n\n\norder of operations\n( )\n\n\n\n\n\n\n\n\n\nPurpose\nFunction\n\n\n\n\nrounding\nround(x, digits = n)\n\n\nrounding\njanitor::round_half_up(x, digits = n)\n\n\nceiling (round up)\nceiling(x)\n\n\nfloor (round down)\nfloor(x)\n\n\nabsolute value\nabs(x)\n\n\nsquare root\nsqrt(x)\n\n\nexponent\nexponent(x)\n\n\nnatural logarithm\nlog(x)\n\n\nlog base 10\nlog10(x)\n\n\nlog base 2\nlog2(x)\n\n\n\nNote: for round() the digits = specifies the number of decimal placed. Use signif() to round to a number of significant figures.\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe functions below will by default include missing values in calculations. Missing values will result in an output of NA, unless the argument na.rm = TRUE is specified. This can be written shorthand as na.rm = T.\n\n\n\n\n\nObjective\nFunction\n\n\n\n\nmean (average)\nmean(x, na.rm=T)\n\n\nmedian\nmedian(x, na.rm=T)\n\n\nstandard deviation\nsd(x, na.rm=T)\n\n\nquantiles*\nquantile(x, probs)\n\n\nsum\nsum(x, na.rm=T)\n\n\nminimum value\nmin(x, na.rm=T)\n\n\nmaximum value\nmax(x, na.rm=T)\n\n\nrange of numeric values\nrange(x, na.rm=T)\n\n\nsummary**\nsummary(x)\n\n\n\nNotes:\n\n*quantile(): x is the numeric vector to examine, and probs = is a numeric vector with probabilities within 0 and 1.0, e.g c(0.5, 0.8, 0.85)\n**summary(): gives a summary on a numeric vector including mean, median, and common percentiles\n\n\n\n\n\n\n\nWarning\n\n\n\nIf providing a vector of numbers to one of the above functions, be sure to wrap the numbers within c() .}\n\n# If supplying raw numbers to a function, wrap them in c()\nmean(1, 6, 12, 10, 5, 0)    # !!! INCORRECT !!!  \n\n[1] 1\n\nmean(c(1, 6, 12, 10, 5, 0)) # CORRECT\n\n[1] 5.666667\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjective\nFunction\nExample\n\n\n\n\ncreate a sequence\nseq(from, to, by)\nseq(1, 10, 2)\n\n\nrepeat x, n times\nrep(x, ntimes)\nrep(1:3, 2) or rep(c(\"a\", \"b\", \"c\"), 3)\n\n\nsubdivide a numeric vector\ncut(x, n)\ncut(linelist$age, 5)\n\n\ntake a random sample\nsample(x, size)\nsample(linelist$id, size = 5, replace = TRUE)\n\n\n\n\n\n\n\nA very useful operator for matching values, and for quickly assessing if a value is within a vector or dataframe.\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\", \"d\")\n\n\n\"a\" %in% my_vector\n\n[1] TRUE\n\n\"h\" %in% my_vector\n\n[1] FALSE\n\n\nTo ask if a value is not %in% a vector, put an exclamation mark (!) in front of the logic statement:\n\n# to negate, put an exclamation in front\n!\"a\" %in% my_vector\n\n[1] FALSE\n\n!\"h\" %in% my_vector\n\n[1] TRUE\n\n\n%in% is very useful when using the dplyr function case_when(). You can define a vector previously, and then reference it later. For example:\n\naffirmative &lt;- c(\"1\", \"Yes\", \"YES\", \"yes\", \"y\", \"Y\", \"oui\", \"Oui\", \"Si\")\n\nlinelist &lt;- linelist %&gt;% \n  mutate(child_hospitaled = case_when(\n    hospitalized %in% affirmative & age &lt; 18 ~ \"Hospitalized Child\",\n    TRUE                                      ~ \"Not\"))\n\n\n\n\nWe will be emphasizing use of the functions from the tidyverse family of R packages. The functions we will be learning about are listed below.\nMany of these functions belong to the dplyr R package, which provides “verb” functions to solve data manipulation challenges (the name is a reference to a “data frame-plier. dplyr is part of the tidyverse family of R packages (which also includes ggplot2, tidyr, stringr, tibble, purrr, magrittr, and forcats among others).\n\n\n\n\n\n\n\n\nFunction\nUtility\nPackage\n\n\n\n\n%&gt;%\n“pipe” (pass) data from one function to the next\nmagrittr\n\n\nmutate()\ncreate, transform, and re-define columns\ndplyr\n\n\nselect()\nkeep, remove, select, or re-name columns\ndplyr\n\n\nrename()\nrename columns\ndplyr\n\n\nclean_names()\nstandardize the syntax of column names\njanitor\n\n\nas.character(), as.numeric(), as.Date(), etc.\nconvert the class of a column\nbase R\n\n\nacross()\ntransform multiple columns at one time\ndplyr\n\n\ntidyselect functions\nuse logic to select columns\ntidyselect\n\n\nfilter()\nkeep certain rows\ndplyr\n\n\ndistinct()\nde-duplicate rows\ndplyr\n\n\nrowwise()\noperations by/within each row\ndplyr\n\n\nadd_row()\nadd rows manually\ntibble\n\n\narrange()\nsort rows\ndplyr\n\n\nrecode()\nre-code values in a column\ndplyr\n\n\ncase_when()\nre-code values in a column using more complex logical criteria\ndplyr\n\n\nreplace_na(), na_if(), coalesce()\nspecial functions for re-coding\ntidyr\n\n\nage_categories() and cut()\ncreate categorical groups from a numeric column\nepikit and base R\n\n\nmatch_df()\nre-code/clean values using a data dictionary\nmatchmaker\n\n\nwhich()\napply logical criteria; return indices\nbase R"
  },
  {
    "objectID": "readings/data-basics.html#operators",
    "href": "readings/data-basics.html#operators",
    "title": "Core Data Functions",
    "section": "",
    "text": "An operators is a symbol or set of symbols representing some mathematical or logical operation. They are essentially equivalent to functions. R has a number of built-in operators, and libraries may add additional operators (such as the %&gt;% operator used in Tidyverse packages). Some examples of operators are:\n\nDefinitional operators\n\nRelational operators (less than, equal too..)\n\nLogical operators (and, or…)\n\nHandling missing values\n\nMathematical operators and functions (+/-, &gt;, sum(), median(), …)\n\nThe %in% operator\n\nR also has some built-in constants, which have the same meaning in programming as in mathematics and statistics. Examples of constants in R include:\n\npi which in base R equals 3.141593\nInf and -Inf for positive and negative infinity\nNaN for not a number (such as the result of 0/0)\nNA for missing data"
  },
  {
    "objectID": "readings/data-basics.html#data",
    "href": "readings/data-basics.html#data",
    "title": "Getting Started with Data",
    "section": "",
    "text": "We will continue to use the same data we looked at last week. This is a fictional Ebola outbreak, expanded from the ebola_sim practice dataset in the outbreaks package.\n\nlinelist &lt;- import(\"linelist_cleaned.rds\")\n\nThe first 50 rows of linelist:\n\n\n   case_id generation date_infection date_onset date_hospitalisation\n1   5fe599          4     2014-05-08 2014-05-13           2014-05-15\n2   8689b7          4           &lt;NA&gt; 2014-05-13           2014-05-14\n3   11f8ea          2           &lt;NA&gt; 2014-05-16           2014-05-18\n4   b8812a          3     2014-05-04 2014-05-18           2014-05-20\n5   893f25          3     2014-05-18 2014-05-21           2014-05-22\n6   be99c8          3     2014-05-03 2014-05-22           2014-05-23\n7   07e3e8          4     2014-05-22 2014-05-27           2014-05-29\n8   369449          4     2014-05-28 2014-06-02           2014-06-03\n9   f393b4          4           &lt;NA&gt; 2014-06-05           2014-06-06\n10  1389ca          4           &lt;NA&gt; 2014-06-05           2014-06-07\n11  2978ac          4     2014-05-30 2014-06-06           2014-06-08\n12  57a565          4     2014-05-28 2014-06-13           2014-06-15\n13  fc15ef          6     2014-06-14 2014-06-16           2014-06-17\n14  2eaa9a          5     2014-06-07 2014-06-17           2014-06-17\n15  bbfa93          6     2014-06-09 2014-06-18           2014-06-20\n16  c97dd9          9           &lt;NA&gt; 2014-06-19           2014-06-19\n17  f50e8a         10           &lt;NA&gt; 2014-06-22           2014-06-23\n18  3a7673          8           &lt;NA&gt; 2014-06-23           2014-06-24\n19  7f5a01          7     2014-06-23 2014-06-25           2014-06-27\n20  ddddee          6     2014-06-18 2014-06-26           2014-06-28\n21  99e8fa          7     2014-06-24 2014-06-28           2014-06-29\n22  567136          6           &lt;NA&gt; 2014-07-02           2014-07-03\n23  9371a9          8           &lt;NA&gt; 2014-07-08           2014-07-09\n24  bc2adf          6     2014-07-03 2014-07-09           2014-07-09\n25  403057         10           &lt;NA&gt; 2014-07-09           2014-07-11\n26  8bd1e8          8     2014-07-10 2014-07-10           2014-07-11\n27  f327be          6     2014-06-14 2014-07-12           2014-07-13\n28  42e1a9         12           &lt;NA&gt; 2014-07-12           2014-07-14\n29  90e5fe          5     2014-06-18 2014-07-13           2014-07-14\n30  959170          8     2014-06-29 2014-07-13           2014-07-13\n31  8ebf6e          7     2014-07-02 2014-07-14           2014-07-14\n32  e56412          9     2014-07-12 2014-07-15           2014-07-17\n33  6d788e         11     2014-07-12 2014-07-16           2014-07-17\n34  a47529          5     2014-06-13 2014-07-17           2014-07-18\n35  67be4e          8     2014-07-15 2014-07-17           2014-07-19\n36  da8ecb          5     2014-06-20 2014-07-18           2014-07-20\n37  148f18          6           &lt;NA&gt; 2014-07-19           2014-07-20\n38  2cb9a5         11           &lt;NA&gt; 2014-07-22           2014-07-22\n39  f5c142          7     2014-07-20 2014-07-22           2014-07-24\n40  70a9fe          9           &lt;NA&gt; 2014-07-24           2014-07-26\n41  3ad520          7     2014-07-12 2014-07-24           2014-07-24\n42  062638          8     2014-07-19 2014-07-25           2014-07-27\n43  c76676          9     2014-07-18 2014-07-25           2014-07-25\n44  baacc1         12     2014-07-18 2014-07-27           2014-07-27\n45  497372         13     2014-07-27 2014-07-29           2014-07-31\n46  23e499          9           &lt;NA&gt; 2014-07-30           2014-08-01\n47  38cc4a          8     2014-07-19       &lt;NA&gt;           2014-08-03\n48  3789ee         10     2014-07-26 2014-08-01           2014-08-02\n49  c71dcd          8     2014-07-24 2014-08-02           2014-08-02\n50  6b70f0          7           &lt;NA&gt; 2014-08-03           2014-08-04\n   date_outcome outcome gender age age_unit age_years age_cat age_cat5\n1          &lt;NA&gt;    &lt;NA&gt;      m   2    years         2     0-4      0-4\n2    2014-05-18 Recover      f   3    years         3     0-4      0-4\n3    2014-05-30 Recover      m  56    years        56   50-69    55-59\n4          &lt;NA&gt;    &lt;NA&gt;      f  18    years        18   15-19    15-19\n5    2014-05-29 Recover      m   3    years         3     0-4      0-4\n6    2014-05-24 Recover      f  16    years        16   15-19    15-19\n7    2014-06-01 Recover      f  16    years        16   15-19    15-19\n8    2014-06-07   Death      f   0    years         0     0-4      0-4\n9    2014-06-18 Recover      m  61    years        61   50-69    60-64\n10   2014-06-09   Death      f  27    years        27   20-29    25-29\n11   2014-06-15   Death      m  12    years        12   10-14    10-14\n12         &lt;NA&gt;   Death      m  42    years        42   30-49    40-44\n13   2014-07-09 Recover      m  19    years        19   15-19    15-19\n14         &lt;NA&gt; Recover      f   7    years         7     5-9      5-9\n15   2014-06-30    &lt;NA&gt;      f   7    years         7     5-9      5-9\n16   2014-07-11 Recover      m  13    years        13   10-14    10-14\n17   2014-07-01    &lt;NA&gt;      f  35    years        35   30-49    35-39\n18   2014-06-25    &lt;NA&gt;      f  17    years        17   15-19    15-19\n19   2014-07-06   Death      f  11    years        11   10-14    10-14\n20   2014-07-02   Death      f  11    years        11   10-14    10-14\n21   2014-07-09 Recover      m  19    years        19   15-19    15-19\n22   2014-07-07    &lt;NA&gt;      m  54    years        54   50-69    50-54\n23   2014-07-20    &lt;NA&gt;      f  14    years        14   10-14    10-14\n24         &lt;NA&gt;    &lt;NA&gt;      m  28    years        28   20-29    25-29\n25   2014-07-22   Death      f   6    years         6     5-9      5-9\n26   2014-07-16    &lt;NA&gt;      m   3    years         3     0-4      0-4\n27   2014-07-14   Death      m  31    years        31   30-49    30-34\n28   2014-07-20   Death      f   6    years         6     5-9      5-9\n29   2014-07-16    &lt;NA&gt;      m  67    years        67   50-69    65-69\n30   2014-07-19   Death      f  14    years        14   10-14    10-14\n31   2014-07-27 Recover      f  10    years        10   10-14    10-14\n32   2014-07-19   Death      f  21    years        21   20-29    20-24\n33         &lt;NA&gt; Recover      m  20    years        20   20-29    20-24\n34   2014-07-26   Death      m  45    years        45   30-49    45-49\n35   2014-08-14 Recover      f   1    years         1     0-4      0-4\n36   2014-08-01    &lt;NA&gt;      m  12    years        12   10-14    10-14\n37   2014-07-23   Death      f   3    years         3     0-4      0-4\n38   2014-08-28 Recover      f  15    years        15   15-19    15-19\n39   2014-07-28 Recover      f  20    years        20   20-29    20-24\n40   2014-07-19   Death      m  36    years        36   30-49    35-39\n41         &lt;NA&gt;    &lt;NA&gt;      f   7    years         7     5-9      5-9\n42   2014-08-03    &lt;NA&gt;      m  13    years        13   10-14    10-14\n43         &lt;NA&gt;   Death      f  14    years        14   10-14    10-14\n44         &lt;NA&gt;   Death      m   3    years         3     0-4      0-4\n45         &lt;NA&gt;   Death      m  10    years        10   10-14    10-14\n46   2014-08-06   Death      f   1    years         1     0-4      0-4\n47   2014-08-21 Recover      m   0    years         0     0-4      0-4\n48   2014-09-13    &lt;NA&gt;      f  20    years        20   20-29    20-24\n49   2014-08-04   Death      m  26    years        26   20-29    25-29\n50         &lt;NA&gt;   Death      m  14    years        14   10-14    10-14\n                               hospital       lon      lat infector  source\n1                                 Other -13.21574 8.468973   f547d6   other\n2                               Missing -13.21523 8.451719     &lt;NA&gt;    &lt;NA&gt;\n3  St. Mark's Maternity Hospital (SMMH) -13.21291 8.464817     &lt;NA&gt;    &lt;NA&gt;\n4                         Port Hospital -13.23637 8.475476   f90f5f   other\n5                     Military Hospital -13.22286 8.460824   11f8ea   other\n6                         Port Hospital -13.22263 8.461831   aec8ec   other\n7                               Missing -13.23315 8.462729   893f25   other\n8                               Missing -13.23210 8.461444   133ee7   other\n9                               Missing -13.22255 8.461913     &lt;NA&gt;    &lt;NA&gt;\n10                              Missing -13.25722 8.472923     &lt;NA&gt;    &lt;NA&gt;\n11                        Port Hospital -13.22063 8.484016   996f3a   other\n12                    Military Hospital -13.25399 8.458371   133ee7   other\n13                              Missing -13.23851 8.477617   37a6f6   other\n14                              Missing -13.20939 8.475702   9f6884   other\n15                                Other -13.21573 8.477799   4802b1   other\n16                        Port Hospital -13.22434 8.471451     &lt;NA&gt;    &lt;NA&gt;\n17                        Port Hospital -13.23361 8.478048     &lt;NA&gt;    &lt;NA&gt;\n18                        Port Hospital -13.21422 8.485280     &lt;NA&gt;    &lt;NA&gt;\n19                              Missing -13.23397 8.469575   a75c7f   other\n20                                Other -13.25356 8.459574   8e104d   other\n21                        Port Hospital -13.22501 8.474049   ab634e   other\n22                        Port Hospital -13.21607 8.488029     &lt;NA&gt;    &lt;NA&gt;\n23 St. Mark's Maternity Hospital (SMMH) -13.26807 8.473437     &lt;NA&gt;    &lt;NA&gt;\n24                              Missing -13.22667 8.484083   b799eb   other\n25                                Other -13.21602 8.462422     &lt;NA&gt;    &lt;NA&gt;\n26                              Missing -13.24826 8.470268   5d9e4d   other\n27 St. Mark's Maternity Hospital (SMMH) -13.21563 8.463984   a15e13   other\n28                    Military Hospital -13.21424 8.464135     &lt;NA&gt;    &lt;NA&gt;\n29                        Port Hospital -13.26149 8.456231   ea3740   other\n30                     Central Hospital -13.24530 8.483346   beb26e funeral\n31                    Military Hospital -13.26306 8.474940   567136   other\n32                     Central Hospital -13.23433 8.478321   894024 funeral\n33                              Missing -13.21991 8.469393   36e2e7   other\n34                    Military Hospital -13.22273 8.484806   a2086d   other\n35                                Other -13.23431 8.471212   7baf73   other\n36                              Missing -13.21878 8.484384   eb2277 funeral\n37                              Missing -13.24837 8.484662     &lt;NA&gt;    &lt;NA&gt;\n38                        Port Hospital -13.20975 8.477142     &lt;NA&gt;    &lt;NA&gt;\n39                        Port Hospital -13.26809 8.462381   d6584f   other\n40                        Port Hospital -13.25875 8.455686     &lt;NA&gt;    &lt;NA&gt;\n41                              Missing -13.26264 8.463288   312ecf   other\n42                     Central Hospital -13.26972 8.479407   52ea64   other\n43                    Military Hospital -13.22090 8.463539   cfd79c   other\n44                                Other -13.23307 8.461790   d145b7   other\n45                                Other -13.26809 8.475087   174288   other\n46                                Other -13.25472 8.458258     &lt;NA&gt;    &lt;NA&gt;\n47                              Missing -13.25737 8.453257   53608c funeral\n48 St. Mark's Maternity Hospital (SMMH) -13.21374 8.473257   3b096b   other\n49 St. Mark's Maternity Hospital (SMMH) -13.21760 8.479116   f5c142   other\n50                              Missing -13.24864 8.484803     &lt;NA&gt;    &lt;NA&gt;\n   wt_kg ht_cm ct_blood fever chills cough aches vomit temp time_admission\n1     27    48       22    no     no   yes    no   yes 36.8           &lt;NA&gt;\n2     25    59       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          09:36\n3     91   238       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:48\n4     41   135       23    no     no    no    no    no 36.8          11:22\n5     36    71       23    no     no   yes    no   yes 36.9          12:60\n6     56   116       21    no     no   yes    no   yes 37.6          14:13\n7     47    87       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.3          14:33\n8      0    11       22    no     no   yes    no   yes 37.0          09:25\n9     86   226       22    no     no   yes    no   yes 36.4          11:16\n10    69   174       22    no     no   yes    no    no 35.9          10:55\n11    67   112       22    no     no   yes    no   yes 36.5          16:03\n12    84   186       22    no     no   yes    no    no 36.9          11:14\n13    68   174       22    no     no   yes    no    no 36.5          12:42\n14    44    90       21    no     no   yes    no    no 37.1          11:06\n15    34    91       23    no     no   yes    no   yes 36.5          09:10\n16    66   152       22    no     no   yes   yes    no 37.3          08:45\n17    78   214       23    no    yes   yes    no    no 37.0           &lt;NA&gt;\n18    47   137       21    no     no   yes    no    no 38.0          15:41\n19    53   117       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 38.0          13:34\n20    47   131       23    no     no   yes    no    no 36.0          18:58\n21    71   150       21    no     no   yes    no   yes 37.0          12:43\n22    86   241       23    no     no   yes    no    no 36.7          16:33\n23    53   131       21    no    yes   yes    no    no 36.9          14:29\n24    69   161       24    no     no   yes    no    no 36.5          07:18\n25    38    80       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.0          08:11\n26    46    69       22    no     no   yes    no    no 36.5          16:32\n27    68   188       24    no     no   yes    no    no 37.6          16:17\n28    37    66       23    no    yes   yes    no    no 36.6          07:32\n29   100   233       20  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.6          17:45\n30    56   142       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.2           &lt;NA&gt;\n31    50   110       24    no     no   yes    no    no 36.4          13:24\n32    57   182       20    no     no   yes    no   yes 37.1          14:43\n33    65   164       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.5          02:33\n34    72   214       21    no     no   yes    no   yes 37.5          11:36\n35    29    26       22    no     no   yes    no   yes 37.4          17:28\n36    69   157       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:27\n37    37    39       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.4           &lt;NA&gt;\n38    48   154       22    no     no   yes   yes   yes 37.3          20:49\n39    54   133       23    no     no   yes   yes   yes 37.0           &lt;NA&gt;\n40    71   168       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.8          11:38\n41    47   100       23    no     no   yes    no   yes 36.5          14:25\n42    61   125       22    no     no   yes    no   yes 37.5          13:42\n43    47   123       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.7          21:22\n44    35    67       22    no     no   yes    no   yes 37.0          13:33\n45    53   134       22    no    yes   yes    no   yes 37.3          19:06\n46    16    31       22    no     no   yes    no    no 36.6          17:14\n47    13    36       23    no     no   yes    no   yes 36.5          20:09\n48    59   125       22    no     no   yes    no   yes 36.6           &lt;NA&gt;\n49    69   183       22    no     no    no    no   yes 37.6          10:23\n50    67   169       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.8          09:09\n         bmi days_onset_hosp\n1  117.18750               2\n2   71.81844               1\n3   16.06525               2\n4   22.49657               2\n5   71.41440               1\n6   41.61712               1\n7   62.09539               2\n8    0.00000               1\n9   16.83765               1\n10  22.79033               2\n11  53.41199               2\n12  24.28026               2\n13  22.46003               1\n14  54.32099               0\n15  41.05784               2\n16  28.56648               0\n17  17.03206               1\n18  25.04129               1\n19  38.71722               2\n20  27.38768               2\n21  31.55556               1\n22  14.80691               1\n23  30.88398               1\n24  26.61934               0\n25  59.37500               2\n26  96.61836               1\n27  19.23947               1\n28  84.94031               2\n29  18.41994               1\n30  27.77227               0\n31  41.32231               0\n32  17.20807               2\n33  24.16716               1\n34  15.72190               1\n35 428.99408               2\n36  27.99302               2\n37 243.26101               1\n38  20.23950               0\n39  30.52745               2\n40  25.15590               2\n41  47.00000               0\n42  39.04000               2\n43  31.06616               0\n44  77.96837               0\n45  29.51660               2\n46 166.49324               2\n47 100.30864              NA\n48  37.76000               1\n49  20.60378               0\n50  23.45856               1"
  },
  {
    "objectID": "readings/data-basics.html#select-or-re-order-columns",
    "href": "readings/data-basics.html#select-or-re-order-columns",
    "title": "Getting Started with Data",
    "section": "",
    "text": "Use select() from dplyr to select the columns you want to retain, and to specify their order in the data frame.\nHere are ALL the column names in the linelist at this point in the cleaning pipe chain:\n\nnames(linelist)\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_onset\"           \"date_hospitalisation\" \"date_outcome\"        \n [7] \"outcome\"              \"gender\"               \"age\"                 \n[10] \"age_unit\"             \"age_years\"            \"age_cat\"             \n[13] \"age_cat5\"             \"hospital\"             \"lon\"                 \n[16] \"lat\"                  \"infector\"             \"source\"              \n[19] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"            \n[22] \"fever\"                \"chills\"               \"cough\"               \n[25] \"aches\"                \"vomit\"                \"temp\"                \n[28] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\n\n\nSelect only the columns you want to remain\nPut their names in the select() command, with no quotation marks. They will appear in the data frame in the order you provide. Note that if you include a column that does not exist, R will return an error (see use of any_of() below if you want no error in this situation).\n\n# linelist dataset is piped through select() command, and names() prints just the column names\nlinelist %&gt;% \n  select(case_id, date_onset, date_hospitalisation, fever) %&gt;% \n  names()  # display the column names\n\n[1] \"case_id\"              \"date_onset\"           \"date_hospitalisation\"\n[4] \"fever\"               \n\n\n\n\n\nIndicate which columns to remove by placing a minus symbol “-” in front of the column name (e.g. select(-outcome)), or a vector of column names (as below). All other columns will be retained.\n\nlinelist %&gt;% \n  select(-c(date_onset, fever:vomit)) %&gt;% # remove date_onset and all columns from fever to vomit\n  names()\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_hospitalisation\" \"date_outcome\"         \"outcome\"             \n [7] \"gender\"               \"age\"                  \"age_unit\"            \n[10] \"age_years\"            \"age_cat\"              \"age_cat5\"            \n[13] \"hospital\"             \"lon\"                  \"lat\"                 \n[16] \"infector\"             \"source\"               \"wt_kg\"               \n[19] \"ht_cm\"                \"ct_blood\"             \"temp\"                \n[22] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\nYou can also remove a column using base R syntax, by defining it as NULL. For example:\n\nlinelist$date_onset &lt;- NULL   # deletes column with base R syntax \n\n\n\n\nselect() can also be used as an independent command (not in a pipe chain). In this case, the first argument is the original dataframe to be operated upon.\n\n# Create a new linelist with id and age-related columns\nlinelist_age &lt;- select(linelist, case_id, contains(\"age\"))\n\n# display the column names\nnames(linelist_age)\n\n[1] \"case_id\"   \"age\"       \"age_unit\"  \"age_years\" \"age_cat\"   \"age_cat5\""
  },
  {
    "objectID": "readings/data-basics.html#column-creation-and-transformation",
    "href": "readings/data-basics.html#column-creation-and-transformation",
    "title": "Getting Started with Data",
    "section": "",
    "text": "In addition to selecting columns, we can create new columns with mutate(). The syntax is: mutate(new_column_name = value or transformation). mutate() can also be used to modify an existing column.\n\n\nThe most basic mutate() command to create a new column might look like this. It creates a new column new_col where the value in every row is 10.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(new_col = 10)\n\nYou can also reference values in other columns, to perform calculations. Below, a new column bmi is created to hold the Body Mass Index (BMI) for each case - as calculated using the formula BMI = kg/m^2, using column ht_cm and column wt_kg.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(bmi = wt_kg / (ht_cm/100)^2)\n\nIf creating multiple new columns, separate each with a comma and new line. Below are examples of new columns, including ones that consist of values from other columns combined using str_glue() from the stringr package.\n\nnew_col_demo &lt;- linelist %&gt;%                       \n  mutate(\n    new_var_dup    = case_id,             # new column = duplicate/copy another existing column\n    new_var_static = 7,                   # new column = all values the same\n    new_var_static = new_var_static + 5,  # you can overwrite a column, and it can be a calculation using other variables\n    new_var_paste  = stringr::str_glue(\"{hospital} on ({date_hospitalisation})\") # new column = pasting together values from other columns\n    ) %&gt;% \n  select(case_id, hospital, date_hospitalisation, contains(\"new\"))        # show only new columns, for demonstration purposes\n\nReview the new columns. For demonstration purposes, only the new columns and the columns used to create them are shown:\n\n\n   case_id                             hospital date_hospitalisation\n1   5fe599                                Other           2014-05-15\n2   8689b7                              Missing           2014-05-14\n3   11f8ea St. Mark's Maternity Hospital (SMMH)           2014-05-18\n4   b8812a                        Port Hospital           2014-05-20\n5   893f25                    Military Hospital           2014-05-22\n6   be99c8                        Port Hospital           2014-05-23\n7   07e3e8                              Missing           2014-05-29\n8   369449                              Missing           2014-06-03\n9   f393b4                              Missing           2014-06-06\n10  1389ca                              Missing           2014-06-07\n11  2978ac                        Port Hospital           2014-06-08\n12  57a565                    Military Hospital           2014-06-15\n13  fc15ef                              Missing           2014-06-17\n14  2eaa9a                              Missing           2014-06-17\n15  bbfa93                                Other           2014-06-20\n16  c97dd9                        Port Hospital           2014-06-19\n17  f50e8a                        Port Hospital           2014-06-23\n18  3a7673                        Port Hospital           2014-06-24\n19  7f5a01                              Missing           2014-06-27\n20  ddddee                                Other           2014-06-28\n21  99e8fa                        Port Hospital           2014-06-29\n22  567136                        Port Hospital           2014-07-03\n23  9371a9 St. Mark's Maternity Hospital (SMMH)           2014-07-09\n24  bc2adf                              Missing           2014-07-09\n25  403057                                Other           2014-07-11\n26  8bd1e8                              Missing           2014-07-11\n27  f327be St. Mark's Maternity Hospital (SMMH)           2014-07-13\n28  42e1a9                    Military Hospital           2014-07-14\n29  90e5fe                        Port Hospital           2014-07-14\n30  959170                     Central Hospital           2014-07-13\n31  8ebf6e                    Military Hospital           2014-07-14\n32  e56412                     Central Hospital           2014-07-17\n33  6d788e                              Missing           2014-07-17\n34  a47529                    Military Hospital           2014-07-18\n35  67be4e                                Other           2014-07-19\n36  da8ecb                              Missing           2014-07-20\n37  148f18                              Missing           2014-07-20\n38  2cb9a5                        Port Hospital           2014-07-22\n39  f5c142                        Port Hospital           2014-07-24\n40  70a9fe                        Port Hospital           2014-07-26\n41  3ad520                              Missing           2014-07-24\n42  062638                     Central Hospital           2014-07-27\n43  c76676                    Military Hospital           2014-07-25\n44  baacc1                                Other           2014-07-27\n45  497372                                Other           2014-07-31\n46  23e499                                Other           2014-08-01\n47  38cc4a                              Missing           2014-08-03\n48  3789ee St. Mark's Maternity Hospital (SMMH)           2014-08-02\n49  c71dcd St. Mark's Maternity Hospital (SMMH)           2014-08-02\n50  6b70f0                              Missing           2014-08-04\n   new_var_dup new_var_static\n1       5fe599             12\n2       8689b7             12\n3       11f8ea             12\n4       b8812a             12\n5       893f25             12\n6       be99c8             12\n7       07e3e8             12\n8       369449             12\n9       f393b4             12\n10      1389ca             12\n11      2978ac             12\n12      57a565             12\n13      fc15ef             12\n14      2eaa9a             12\n15      bbfa93             12\n16      c97dd9             12\n17      f50e8a             12\n18      3a7673             12\n19      7f5a01             12\n20      ddddee             12\n21      99e8fa             12\n22      567136             12\n23      9371a9             12\n24      bc2adf             12\n25      403057             12\n26      8bd1e8             12\n27      f327be             12\n28      42e1a9             12\n29      90e5fe             12\n30      959170             12\n31      8ebf6e             12\n32      e56412             12\n33      6d788e             12\n34      a47529             12\n35      67be4e             12\n36      da8ecb             12\n37      148f18             12\n38      2cb9a5             12\n39      f5c142             12\n40      70a9fe             12\n41      3ad520             12\n42      062638             12\n43      c76676             12\n44      baacc1             12\n45      497372             12\n46      23e499             12\n47      38cc4a             12\n48      3789ee             12\n49      c71dcd             12\n50      6b70f0             12\n                                          new_var_paste\n1                                 Other on (2014-05-15)\n2                               Missing on (2014-05-14)\n3  St. Mark's Maternity Hospital (SMMH) on (2014-05-18)\n4                         Port Hospital on (2014-05-20)\n5                     Military Hospital on (2014-05-22)\n6                         Port Hospital on (2014-05-23)\n7                               Missing on (2014-05-29)\n8                               Missing on (2014-06-03)\n9                               Missing on (2014-06-06)\n10                              Missing on (2014-06-07)\n11                        Port Hospital on (2014-06-08)\n12                    Military Hospital on (2014-06-15)\n13                              Missing on (2014-06-17)\n14                              Missing on (2014-06-17)\n15                                Other on (2014-06-20)\n16                        Port Hospital on (2014-06-19)\n17                        Port Hospital on (2014-06-23)\n18                        Port Hospital on (2014-06-24)\n19                              Missing on (2014-06-27)\n20                                Other on (2014-06-28)\n21                        Port Hospital on (2014-06-29)\n22                        Port Hospital on (2014-07-03)\n23 St. Mark's Maternity Hospital (SMMH) on (2014-07-09)\n24                              Missing on (2014-07-09)\n25                                Other on (2014-07-11)\n26                              Missing on (2014-07-11)\n27 St. Mark's Maternity Hospital (SMMH) on (2014-07-13)\n28                    Military Hospital on (2014-07-14)\n29                        Port Hospital on (2014-07-14)\n30                     Central Hospital on (2014-07-13)\n31                    Military Hospital on (2014-07-14)\n32                     Central Hospital on (2014-07-17)\n33                              Missing on (2014-07-17)\n34                    Military Hospital on (2014-07-18)\n35                                Other on (2014-07-19)\n36                              Missing on (2014-07-20)\n37                              Missing on (2014-07-20)\n38                        Port Hospital on (2014-07-22)\n39                        Port Hospital on (2014-07-24)\n40                        Port Hospital on (2014-07-26)\n41                              Missing on (2014-07-24)\n42                     Central Hospital on (2014-07-27)\n43                    Military Hospital on (2014-07-25)\n44                                Other on (2014-07-27)\n45                                Other on (2014-07-31)\n46                                Other on (2014-08-01)\n47                              Missing on (2014-08-03)\n48 St. Mark's Maternity Hospital (SMMH) on (2014-08-02)\n49 St. Mark's Maternity Hospital (SMMH) on (2014-08-02)\n50                              Missing on (2014-08-04)\n\n\n\n\n\n\n\n\nTransmute\n\n\n\nA variation on mutate() is the function transmute(). This function adds a new column just like mutate(), but also drops/removes all other columns that you do not mention within its parentheses.\n\n\n\n\n\nColumns containing values that are dates, numbers, or logical values (TRUE/FALSE) will only behave as expected if they are correctly classified. There is a difference between “2” of class character and 2 of class numeric! There are ways to set column class during the import commands, but this is often cumbersome.\nFirst, let’s run some checks on important columns to see if they are the correct class. Currently, the class of the age column is character. To perform quantitative analyses, we need these numbers to be recognized as numeric!\n\nclass(linelist$age)\n\n[1] \"numeric\"\n\n\nTo resolve this, use the ability of mutate() to re-define a column with a transformation. We define the column as itself, but converted to a different class. Here is a basic example, converting or ensuring that the column age is class Numeric:\n\nlinelist &lt;- linelist %&gt;% \n  mutate(age = as.numeric(age))\n\nIn a similar way, you can use as.character() and as.logical(). To convert to class Factor, you can use factor()."
  },
  {
    "objectID": "readings/data-basics.html#re-code-values",
    "href": "readings/data-basics.html#re-code-values",
    "title": "Getting Started with Data",
    "section": "",
    "text": "Here are a few scenarios where you need to re-code (change) values:\n\nto edit one specific value (e.g. one date with an incorrect year or format)\n\nto reconcile values not spelled the same\nto create a new column of categorical values\n\nto create a new column of numeric categories (e.g. age categories)\n\n\n\nTo change values manually you can use the recode() function within the mutate() function.\nImagine there is a nonsensical date in the data (e.g. “2014-14-15”): you could fix the date manually in the raw source data, or, you could write the change into the cleaning pipeline via mutate() and recode(). The latter is more transparent and reproducible to anyone else seeking to understand or repeat your analysis.\n\n# fix incorrect values                   # old value       # new value\nlinelist &lt;- linelist %&gt;% \n  mutate(date_onset = recode(date_onset, \"2014-14-15\" = \"2014-04-15\"))\n\nThe mutate() line above can be read as: “mutate the column date_onset to equal the column date_onset re-coded so that OLD VALUE is changed to NEW VALUE”. Note that this pattern (OLD = NEW) for recode() is the opposite of most R patterns (new = old). The R development community is working on revising this.\n\n\n\nBelow we demonstrate how to re-code values in a column using logic and conditions:\n\nUsing replace(), ifelse() and if_else() for simple logic\nUsing case_when() for more complex logic\n\n\n\n\n\n\nTo re-code with simple logical criteria, you can use replace() within mutate(). replace() is a function from base R. Use a logic condition to specify the rows to change . The general syntax is:\nmutate(col_to_change = replace(col_to_change, criteria for rows, new value)).\nOne common situation to use replace() is changing just one value in one row, using an unique row identifier. Below, the gender is changed to “Female” in the row where the column case_id is “2195”.\n\n# Example: change gender of one specific observation to \"Female\" \nlinelist &lt;- linelist %&gt;% \n  mutate(gender = replace(gender, case_id == \"2195\", \"Female\"))\n\nThe equivalent command using base R syntax and indexing brackets [ ] is below. It reads as “Change the value of the dataframe linelist‘s column gender (for the rows where linelist’s column case_id has the value ’2195’) to ‘Female’”.\n\nlinelist$gender[linelist$case_id == \"2195\"] &lt;- \"Female\"\n\n\n\n\nAnother tool for simple logic is ifelse() and its partner if_else(). However, in most cases for re-coding it is more clear to use case_when() (detailed below). These “if else” commands are simplified versions of an if and else programming statement. The general syntax is:\nifelse(condition, value to return if condition evaluates to TRUE, value to return if condition evaluates to FALSE)\nBelow, the column source_known is defined. Its value in a given row is set to “known” if the row’s value in column source is not missing. If the value in source is missing, then the value in source_known is set to “unknown”.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(source_known = ifelse(!is.na(source), \"known\", \"unknown\"))\n\nif_else() is a special version from dplyr that handles dates. Note that if the ‘true’ value is a date, the ‘false’ value must also qualify a date, hence using the special value NA_real_ instead of just NA.\n\n# Create a date of death column, which is NA if patient has not died.\nlinelist &lt;- linelist %&gt;% \n  mutate(date_death = if_else(outcome == \"Death\", date_outcome, NA_real_))\n\nAvoid stringing together many ifelse commands… use case_when() instead! case_when() is much easier to read and you’ll make fewer errors.\n\n\n\n\n\n\n\n\n\nOutside of the context of a data frame, if you want to have an object used in your code switch its value, consider using switch() from base R.\n\n\n\n\nUse dplyr’s case_when() if you are re-coding into many new groups, or if you need to use complex logic statements to re-code values. This function evaluates every row in the data frame, assess whether the rows meets specified criteria, and assigns the correct new value.\ncase_when() commands consist of statements that have a Right-Hand Side (RHS) and a Left-Hand Side (LHS) separated by a “tilde” ~. The logic criteria are in the left side and the pursuant values are in the right side of each statement. Statements are separated by commas.\nFor example, here we utilize the columns age and age_unit to create a column age_years:\n\nlinelist &lt;- linelist %&gt;% \n  mutate(age_years = case_when(\n       age_unit == \"years\"  ~ age,       # if age unit is years\n       age_unit == \"months\" ~ age/12,    # if age unit is months, divide age by 12\n       is.na(age_unit)      ~ age))      # if age unit is missing, assume years\n                                         # any other circumstance, assign NA (missing)\n\nAs each row in the data is evaluated, the criteria are applied/evaluated in the order the case_when() statements are written - from top-to-bottom. If the top criteria evaluates to TRUE for a given row, the RHS value is assigned, and the remaining criteria are not even tested for that row in the data. Thus, it is best to write the most specific criteria first, and the most general last. A data row that does not meet any of the RHS criteria will be assigned NA.\nSometimes, you may with to write a final statement that assigns a value for all other scenarios not described by one of the previous lines. To do this, place TRUE on the left-side, which will capture any row that did not meet any of the previous criteria. The right-side of this statement could be assigned a value like “check me!” or missing.\nBelow is another example of case_when() used to create a new column with the patient classification, according to a case definition for confirmed and suspect cases:\n\nlinelist &lt;- linelist %&gt;% \n     mutate(case_status = case_when(\n          \n          # if patient had lab test and it is positive,\n          # then they are marked as a confirmed case \n          ct_blood &lt; 20                   ~ \"Confirmed\",\n          \n          # given that a patient does not have a positive lab result,\n          # if patient has a \"source\" (epidemiological link) AND has fever, \n          # then they are marked as a suspect case\n          !is.na(source) & fever == \"yes\" ~ \"Suspect\",\n          \n          # any other patient not addressed above \n          # is marked for follow up\n          TRUE                            ~ \"To investigate\"))"
  },
  {
    "objectID": "readings/data-basics.html#num_cats",
    "href": "readings/data-basics.html#num_cats",
    "title": "Getting Started with Data",
    "section": "",
    "text": "Here we describe some special approaches for creating categories from numerical columns. Common examples include age categories, groups of lab values, etc. Here we will discuss:\n\nage_categories(), from the epikit package\n\ncut(), from base R\n\ncase_when()\n\nquantile breaks with quantile() and ntile()\n\n\n\nFor this example we will create an age_cat column using the age_years column.\n\n#check the class of the linelist variable age\nclass(linelist$age_years)\n\n[1] \"numeric\"\n\n\n\n\n\nThe basic syntax within cut() is to first provide the numeric column to be cut (age_years), and then the breaks argument, which is a numeric vector c() of break points. Using cut(), the resulting column is an ordered factor.\nBy default, the categorization occurs so that the right/upper side is “open” and inclusive (and the left/lower side is “closed” or exclusive). This is the opposite behavior from the age_categories() function. The default labels use the notation “(A, B]”, which means A is not included but B is. Reverse this behavior by providing the right = TRUE argument.\nThus, by default, “0” values are excluded from the lowest group, and categorized as NA! “0” values could be infants coded as age 0 so be careful! To change this, add the argument include.lowest = TRUE so that any “0” values will be included in the lowest group. The automatically-generated label for the lowest category will then be “[A],B]”. Note that if you include the include.lowest = TRUE argument and right = TRUE, the extreme inclusion will now apply to the highest break point value and category, not the lowest.\nYou can provide a vector of customized labels using the labels = argument. As these are manually written, be very careful to ensure they are accurate! Check your work using cross-tabulation, as described below.\nAn example of cut() applied to age_years to make the new variable age_cat is below:\n\n# Create new variable, by cutting the numeric age variable\n# lower break is excluded but upper break is included in each category\nlinelist &lt;- linelist %&gt;% \n  mutate(\n    age_cat = cut(\n      age_years,\n      breaks = c(0, 5, 10, 15, 20,\n                 30, 50, 70, 100),\n      include.lowest = TRUE         # include 0 in lowest group\n      ))\n\n# tabulate the number of observations per group\ntable(linelist$age_cat, useNA = \"always\")\n\n\n   [0,5]   (5,10]  (10,15]  (15,20]  (20,30]  (30,50]  (50,70] (70,100] \n    1315     1065      930      696     1013      694       84        5 \n    &lt;NA&gt; \n      86 \n\n\nCheck your work!!! Verify that each age value was assigned to the correct category by cross-tabulating the numeric and category columns. Examine assignment of boundary values (e.g. 15, if neighboring categories are 10-15 and 16-20).\n\n\n\nIn common understanding, “quantiles” or “percentiles” typically refer to a value below which a proportion of values fall. For example, the 95th percentile of ages in linelist would be the age below which 95% of the age fall.\nHowever in common speech, “quartiles” and “deciles” can also refer to the groups of data as equally divided into 4, or 10 groups (note there will be one more break point than group).\nTo get quantile break points, you can use quantile() from the stats package from base R. You provide a numeric vector (e.g. a column in a dataset) and vector of numeric probability values ranging from 0 to 1.0. The break points are returned as a numeric vector. Explore the details of the statistical methodologies by entering ?quantile.\n\nIf your input numeric vector has any missing values it is best to set na.rm = TRUE\n\nSet names = FALSE to get an un-named numeric vector\n\n\nquantile(linelist$age_years,               # specify numeric vector to work on\n  probs = c(0, .25, .50, .75, .90, .95),   # specify the percentiles you want\n  na.rm = TRUE)                            # ignore missing values \n\n  0%  25%  50%  75%  90%  95% \n 0.0  6.0 13.0 23.0 33.9 41.0 \n\n\nYou can use the results of quantile() as break points in age_categories() or cut(). Below we create a new column deciles using cut() where the breaks are defined using quantiles() on age_years. Below, we display the results using tabyl() from janitor so you can see the percentages. Note how they are not exactly 10% in each group.\n\nlinelist %&gt;%                                # begin with linelist\n  mutate(deciles = cut(age_years,           # create new column decile as cut() on column age_years\n    breaks = quantile(                      # define cut breaks using quantile()\n      age_years,                               # operate on age_years\n      probs = seq(0, 1, by = 0.1),             # 0.0 to 1.0 by 0.1\n      na.rm = TRUE),                           # ignore missing values\n    include.lowest = TRUE)) %&gt;%             # for cut() include age 0\n  janitor::tabyl(deciles)                   # pipe to table to display\n\n   deciles   n    percent valid_percent\n     [0,2] 658 0.11175272    0.11340917\n     (2,5] 657 0.11158288    0.11323681\n     (5,7] 447 0.07591712    0.07704240\n    (7,10] 618 0.10495924    0.10651499\n   (10,13] 572 0.09714674    0.09858669\n   (13,17] 674 0.11447011    0.11616684\n   (17,21] 520 0.08831522    0.08962427\n   (21,26] 547 0.09290082    0.09427784\n (26,33.9] 528 0.08967391    0.09100310\n (33.9,84] 581 0.09867527    0.10013788\n      &lt;NA&gt;  86 0.01460598            NA"
  },
  {
    "objectID": "readings/data-basics.html#filter-rows",
    "href": "readings/data-basics.html#filter-rows",
    "title": "Getting Started with Data",
    "section": "",
    "text": "A typical cleaning step after you have cleaned the columns and re-coded values is to filter the data frame for specific rows using the dplyr verb filter().\nWithin filter(), specify the logic that must be TRUE for a row in the dataset to be kept. Below we show how to filter rows based on simple and complex logical conditions.\n\n\n\nThis simple example re-defines the dataframe linelist as itself, having filtered the rows to meet a logical condition. Only the rows where the logical statement within the parentheses evaluates to TRUE are kept.\nIn this example, the logical statement is gender == \"f\", which is asking whether the value in the column gender is equal to “f” (case sensitive).\nBefore the filter is applied, the number of rows in linelist is nrow(linelist).\n\nlinelist &lt;- linelist %&gt;% \n  filter(gender == \"f\")   # keep only rows where gender is equal to \"f\"\n\nAfter the filter is applied, the number of rows in linelist is linelist %&gt;% filter(gender == \"f\") %&gt;% nrow().\n\n\n\nMore complex logical statements can be constructed using parentheses ( ), OR |, negate !, %in%, and AND & operators. An example is below:\nNote: You can use the ! operator in front of a logical criteria to negate it. For example, !is.na(column) evaluates to true if the column value is not missing. Likewise !column %in% c(\"a\", \"b\", \"c\") evaluates to true if the column value is not in the vector.\n\n\nBelow is a simple one-line command to create a histogram of onset dates. See that a second smaller outbreak from 2012-2013 is also included in this raw dataset. For our analyses, we want to remove entries from this earlier outbreak.\n\nhist(linelist$date_onset, breaks = 50)\n\n\n\n\n\n\n\nCan we just filter by date_onset to rows after June 2013? Caution! Applying the code filter(date_onset &gt; as.Date(\"2013-06-01\"))) would remove any rows in the later epidemic with a missing date of onset!\n\n\n\n\n\n\nConditions with NA\n\n\n\nFiltering to greater than (&gt;) or less than (&lt;) a date or number can remove any rows with missing values (NA)! This is because NA is treated as infinitely large and small.\n\n\n\n\n\n\nFiltering can also be done as a stand-alone command (not part of a pipe chain). Like other dplyr verbs, in this case the first argument must be the dataset itself.\n\n# dataframe &lt;- filter(dataframe, condition(s) for rows to keep)\n\nlinelist &lt;- filter(linelist, !is.na(case_id))\n\nYou can also use base R to subset using square brackets which reflect the [rows, columns] that you want to retain.\n\n# dataframe &lt;- dataframe[row conditions, column conditions] (blank means keep all)\n\nlinelist &lt;- linelist[!is.na(case_id), ]"
  },
  {
    "objectID": "readings/data-basics.html#arrange-and-sort",
    "href": "readings/data-basics.html#arrange-and-sort",
    "title": "Getting Started with Data",
    "section": "",
    "text": "Use the dplyr function arrange() to sort or order the rows by column values.\nSimple list the columns in the order they should be sorted on. Specify .by_group = TRUE if you want the sorting to to first occur by any groupings applied to the data.\nBy default, column will be sorted in “ascending” order (which applies to numeric and also to character columns). You can sort a variable in “descending” order by wrapping it with desc().\nSorting data with arrange() is particularly useful when making tables for publication, using slice() to take the “top” rows per group, or setting factor level order by order of appearance.\nFor example, to sort the our linelist rows by hospital, then by date_onset in descending order, we would use:\n\nlinelist %&gt;% \n   arrange(hospital, desc(date_onset))"
  },
  {
    "objectID": "readings/ggplot-basics.html",
    "href": "readings/ggplot-basics.html",
    "title": "Data visualization",
    "section": "",
    "text": "Extended Materials\n\n\n\nYou can find the original, extended version of these materials from chapters 30 and 31.\n\n\n\n\n\n\n\n\n\n\n\nggplot2 is the most popular data visualisation R package. Its ggplot() function is at the core of this package, and this whole approach is colloquially known as “ggplot” with the resulting figures sometimes affectionately called “ggplots”. The “gg” in these names reflects the “grammar of graphics” used to construct the figures. ggplot2 benefits from a wide variety of supplementary R packages that further enhance its functionality.\nThe data visualization with ggplot cheatsheet from the RStudio website is a great reference to have on-hand when creating pltos. If you want inspiration for ways to creatively visualise your data, we suggest reviewing websites like the R graph gallery and Data-to-viz.\n\n\n\n\n\n\n\nData Preparation\n\n\n\n\n\n\n\nWe import the dataset of cases from a simulated Ebola epidemic. If you want to follow along, click to download the “clean” linelist (as .rds file).\nThe first 50 rows of the linelist are displayed below. We will focus on the continuous variables age, wt_kg (weight in kilos), ct_blood (CT values), and days_onset_hosp (difference between onset date and hospitalisation).\n\n\n   case_id generation date_infection date_onset date_hospitalisation\n1   5fe599          4     2014-05-08 2014-05-13           2014-05-15\n2   8689b7          4           &lt;NA&gt; 2014-05-13           2014-05-14\n3   11f8ea          2           &lt;NA&gt; 2014-05-16           2014-05-18\n4   b8812a          3     2014-05-04 2014-05-18           2014-05-20\n5   893f25          3     2014-05-18 2014-05-21           2014-05-22\n6   be99c8          3     2014-05-03 2014-05-22           2014-05-23\n7   07e3e8          4     2014-05-22 2014-05-27           2014-05-29\n8   369449          4     2014-05-28 2014-06-02           2014-06-03\n9   f393b4          4           &lt;NA&gt; 2014-06-05           2014-06-06\n10  1389ca          4           &lt;NA&gt; 2014-06-05           2014-06-07\n11  2978ac          4     2014-05-30 2014-06-06           2014-06-08\n12  57a565          4     2014-05-28 2014-06-13           2014-06-15\n13  fc15ef          6     2014-06-14 2014-06-16           2014-06-17\n14  2eaa9a          5     2014-06-07 2014-06-17           2014-06-17\n15  bbfa93          6     2014-06-09 2014-06-18           2014-06-20\n16  c97dd9          9           &lt;NA&gt; 2014-06-19           2014-06-19\n17  f50e8a         10           &lt;NA&gt; 2014-06-22           2014-06-23\n18  3a7673          8           &lt;NA&gt; 2014-06-23           2014-06-24\n19  7f5a01          7     2014-06-23 2014-06-25           2014-06-27\n20  ddddee          6     2014-06-18 2014-06-26           2014-06-28\n21  99e8fa          7     2014-06-24 2014-06-28           2014-06-29\n22  567136          6           &lt;NA&gt; 2014-07-02           2014-07-03\n23  9371a9          8           &lt;NA&gt; 2014-07-08           2014-07-09\n24  bc2adf          6     2014-07-03 2014-07-09           2014-07-09\n25  403057         10           &lt;NA&gt; 2014-07-09           2014-07-11\n26  8bd1e8          8     2014-07-10 2014-07-10           2014-07-11\n27  f327be          6     2014-06-14 2014-07-12           2014-07-13\n28  42e1a9         12           &lt;NA&gt; 2014-07-12           2014-07-14\n29  90e5fe          5     2014-06-18 2014-07-13           2014-07-14\n30  959170          8     2014-06-29 2014-07-13           2014-07-13\n31  8ebf6e          7     2014-07-02 2014-07-14           2014-07-14\n32  e56412          9     2014-07-12 2014-07-15           2014-07-17\n33  6d788e         11     2014-07-12 2014-07-16           2014-07-17\n34  a47529          5     2014-06-13 2014-07-17           2014-07-18\n35  67be4e          8     2014-07-15 2014-07-17           2014-07-19\n36  da8ecb          5     2014-06-20 2014-07-18           2014-07-20\n37  148f18          6           &lt;NA&gt; 2014-07-19           2014-07-20\n38  2cb9a5         11           &lt;NA&gt; 2014-07-22           2014-07-22\n39  f5c142          7     2014-07-20 2014-07-22           2014-07-24\n40  70a9fe          9           &lt;NA&gt; 2014-07-24           2014-07-26\n41  3ad520          7     2014-07-12 2014-07-24           2014-07-24\n42  062638          8     2014-07-19 2014-07-25           2014-07-27\n43  c76676          9     2014-07-18 2014-07-25           2014-07-25\n44  baacc1         12     2014-07-18 2014-07-27           2014-07-27\n45  497372         13     2014-07-27 2014-07-29           2014-07-31\n46  23e499          9           &lt;NA&gt; 2014-07-30           2014-08-01\n47  38cc4a          8     2014-07-19       &lt;NA&gt;           2014-08-03\n48  3789ee         10     2014-07-26 2014-08-01           2014-08-02\n49  c71dcd          8     2014-07-24 2014-08-02           2014-08-02\n50  6b70f0          7           &lt;NA&gt; 2014-08-03           2014-08-04\n   date_outcome outcome gender age age_unit age_years age_cat age_cat5\n1          &lt;NA&gt;    &lt;NA&gt;      m   2    years         2     0-4      0-4\n2    2014-05-18 Recover      f   3    years         3     0-4      0-4\n3    2014-05-30 Recover      m  56    years        56   50-69    55-59\n4          &lt;NA&gt;    &lt;NA&gt;      f  18    years        18   15-19    15-19\n5    2014-05-29 Recover      m   3    years         3     0-4      0-4\n6    2014-05-24 Recover      f  16    years        16   15-19    15-19\n7    2014-06-01 Recover      f  16    years        16   15-19    15-19\n8    2014-06-07   Death      f   0    years         0     0-4      0-4\n9    2014-06-18 Recover      m  61    years        61   50-69    60-64\n10   2014-06-09   Death      f  27    years        27   20-29    25-29\n11   2014-06-15   Death      m  12    years        12   10-14    10-14\n12         &lt;NA&gt;   Death      m  42    years        42   30-49    40-44\n13   2014-07-09 Recover      m  19    years        19   15-19    15-19\n14         &lt;NA&gt; Recover      f   7    years         7     5-9      5-9\n15   2014-06-30    &lt;NA&gt;      f   7    years         7     5-9      5-9\n16   2014-07-11 Recover      m  13    years        13   10-14    10-14\n17   2014-07-01    &lt;NA&gt;      f  35    years        35   30-49    35-39\n18   2014-06-25    &lt;NA&gt;      f  17    years        17   15-19    15-19\n19   2014-07-06   Death      f  11    years        11   10-14    10-14\n20   2014-07-02   Death      f  11    years        11   10-14    10-14\n21   2014-07-09 Recover      m  19    years        19   15-19    15-19\n22   2014-07-07    &lt;NA&gt;      m  54    years        54   50-69    50-54\n23   2014-07-20    &lt;NA&gt;      f  14    years        14   10-14    10-14\n24         &lt;NA&gt;    &lt;NA&gt;      m  28    years        28   20-29    25-29\n25   2014-07-22   Death      f   6    years         6     5-9      5-9\n26   2014-07-16    &lt;NA&gt;      m   3    years         3     0-4      0-4\n27   2014-07-14   Death      m  31    years        31   30-49    30-34\n28   2014-07-20   Death      f   6    years         6     5-9      5-9\n29   2014-07-16    &lt;NA&gt;      m  67    years        67   50-69    65-69\n30   2014-07-19   Death      f  14    years        14   10-14    10-14\n31   2014-07-27 Recover      f  10    years        10   10-14    10-14\n32   2014-07-19   Death      f  21    years        21   20-29    20-24\n33         &lt;NA&gt; Recover      m  20    years        20   20-29    20-24\n34   2014-07-26   Death      m  45    years        45   30-49    45-49\n35   2014-08-14 Recover      f   1    years         1     0-4      0-4\n36   2014-08-01    &lt;NA&gt;      m  12    years        12   10-14    10-14\n37   2014-07-23   Death      f   3    years         3     0-4      0-4\n38   2014-08-28 Recover      f  15    years        15   15-19    15-19\n39   2014-07-28 Recover      f  20    years        20   20-29    20-24\n40   2014-07-19   Death      m  36    years        36   30-49    35-39\n41         &lt;NA&gt;    &lt;NA&gt;      f   7    years         7     5-9      5-9\n42   2014-08-03    &lt;NA&gt;      m  13    years        13   10-14    10-14\n43         &lt;NA&gt;   Death      f  14    years        14   10-14    10-14\n44         &lt;NA&gt;   Death      m   3    years         3     0-4      0-4\n45         &lt;NA&gt;   Death      m  10    years        10   10-14    10-14\n46   2014-08-06   Death      f   1    years         1     0-4      0-4\n47   2014-08-21 Recover      m   0    years         0     0-4      0-4\n48   2014-09-13    &lt;NA&gt;      f  20    years        20   20-29    20-24\n49   2014-08-04   Death      m  26    years        26   20-29    25-29\n50         &lt;NA&gt;   Death      m  14    years        14   10-14    10-14\n                               hospital       lon      lat infector  source\n1                                 Other -13.21574 8.468973   f547d6   other\n2                               Missing -13.21523 8.451719     &lt;NA&gt;    &lt;NA&gt;\n3  St. Mark's Maternity Hospital (SMMH) -13.21291 8.464817     &lt;NA&gt;    &lt;NA&gt;\n4                         Port Hospital -13.23637 8.475476   f90f5f   other\n5                     Military Hospital -13.22286 8.460824   11f8ea   other\n6                         Port Hospital -13.22263 8.461831   aec8ec   other\n7                               Missing -13.23315 8.462729   893f25   other\n8                               Missing -13.23210 8.461444   133ee7   other\n9                               Missing -13.22255 8.461913     &lt;NA&gt;    &lt;NA&gt;\n10                              Missing -13.25722 8.472923     &lt;NA&gt;    &lt;NA&gt;\n11                        Port Hospital -13.22063 8.484016   996f3a   other\n12                    Military Hospital -13.25399 8.458371   133ee7   other\n13                              Missing -13.23851 8.477617   37a6f6   other\n14                              Missing -13.20939 8.475702   9f6884   other\n15                                Other -13.21573 8.477799   4802b1   other\n16                        Port Hospital -13.22434 8.471451     &lt;NA&gt;    &lt;NA&gt;\n17                        Port Hospital -13.23361 8.478048     &lt;NA&gt;    &lt;NA&gt;\n18                        Port Hospital -13.21422 8.485280     &lt;NA&gt;    &lt;NA&gt;\n19                              Missing -13.23397 8.469575   a75c7f   other\n20                                Other -13.25356 8.459574   8e104d   other\n21                        Port Hospital -13.22501 8.474049   ab634e   other\n22                        Port Hospital -13.21607 8.488029     &lt;NA&gt;    &lt;NA&gt;\n23 St. Mark's Maternity Hospital (SMMH) -13.26807 8.473437     &lt;NA&gt;    &lt;NA&gt;\n24                              Missing -13.22667 8.484083   b799eb   other\n25                                Other -13.21602 8.462422     &lt;NA&gt;    &lt;NA&gt;\n26                              Missing -13.24826 8.470268   5d9e4d   other\n27 St. Mark's Maternity Hospital (SMMH) -13.21563 8.463984   a15e13   other\n28                    Military Hospital -13.21424 8.464135     &lt;NA&gt;    &lt;NA&gt;\n29                        Port Hospital -13.26149 8.456231   ea3740   other\n30                     Central Hospital -13.24530 8.483346   beb26e funeral\n31                    Military Hospital -13.26306 8.474940   567136   other\n32                     Central Hospital -13.23433 8.478321   894024 funeral\n33                              Missing -13.21991 8.469393   36e2e7   other\n34                    Military Hospital -13.22273 8.484806   a2086d   other\n35                                Other -13.23431 8.471212   7baf73   other\n36                              Missing -13.21878 8.484384   eb2277 funeral\n37                              Missing -13.24837 8.484662     &lt;NA&gt;    &lt;NA&gt;\n38                        Port Hospital -13.20975 8.477142     &lt;NA&gt;    &lt;NA&gt;\n39                        Port Hospital -13.26809 8.462381   d6584f   other\n40                        Port Hospital -13.25875 8.455686     &lt;NA&gt;    &lt;NA&gt;\n41                              Missing -13.26264 8.463288   312ecf   other\n42                     Central Hospital -13.26972 8.479407   52ea64   other\n43                    Military Hospital -13.22090 8.463539   cfd79c   other\n44                                Other -13.23307 8.461790   d145b7   other\n45                                Other -13.26809 8.475087   174288   other\n46                                Other -13.25472 8.458258     &lt;NA&gt;    &lt;NA&gt;\n47                              Missing -13.25737 8.453257   53608c funeral\n48 St. Mark's Maternity Hospital (SMMH) -13.21374 8.473257   3b096b   other\n49 St. Mark's Maternity Hospital (SMMH) -13.21760 8.479116   f5c142   other\n50                              Missing -13.24864 8.484803     &lt;NA&gt;    &lt;NA&gt;\n   wt_kg ht_cm ct_blood fever chills cough aches vomit temp time_admission\n1     27    48       22    no     no   yes    no   yes 36.8           &lt;NA&gt;\n2     25    59       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          09:36\n3     91   238       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:48\n4     41   135       23    no     no    no    no    no 36.8          11:22\n5     36    71       23    no     no   yes    no   yes 36.9          12:60\n6     56   116       21    no     no   yes    no   yes 37.6          14:13\n7     47    87       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.3          14:33\n8      0    11       22    no     no   yes    no   yes 37.0          09:25\n9     86   226       22    no     no   yes    no   yes 36.4          11:16\n10    69   174       22    no     no   yes    no    no 35.9          10:55\n11    67   112       22    no     no   yes    no   yes 36.5          16:03\n12    84   186       22    no     no   yes    no    no 36.9          11:14\n13    68   174       22    no     no   yes    no    no 36.5          12:42\n14    44    90       21    no     no   yes    no    no 37.1          11:06\n15    34    91       23    no     no   yes    no   yes 36.5          09:10\n16    66   152       22    no     no   yes   yes    no 37.3          08:45\n17    78   214       23    no    yes   yes    no    no 37.0           &lt;NA&gt;\n18    47   137       21    no     no   yes    no    no 38.0          15:41\n19    53   117       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 38.0          13:34\n20    47   131       23    no     no   yes    no    no 36.0          18:58\n21    71   150       21    no     no   yes    no   yes 37.0          12:43\n22    86   241       23    no     no   yes    no    no 36.7          16:33\n23    53   131       21    no    yes   yes    no    no 36.9          14:29\n24    69   161       24    no     no   yes    no    no 36.5          07:18\n25    38    80       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.0          08:11\n26    46    69       22    no     no   yes    no    no 36.5          16:32\n27    68   188       24    no     no   yes    no    no 37.6          16:17\n28    37    66       23    no    yes   yes    no    no 36.6          07:32\n29   100   233       20  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.6          17:45\n30    56   142       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.2           &lt;NA&gt;\n31    50   110       24    no     no   yes    no    no 36.4          13:24\n32    57   182       20    no     no   yes    no   yes 37.1          14:43\n33    65   164       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.5          02:33\n34    72   214       21    no     no   yes    no   yes 37.5          11:36\n35    29    26       22    no     no   yes    no   yes 37.4          17:28\n36    69   157       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:27\n37    37    39       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.4           &lt;NA&gt;\n38    48   154       22    no     no   yes   yes   yes 37.3          20:49\n39    54   133       23    no     no   yes   yes   yes 37.0           &lt;NA&gt;\n40    71   168       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.8          11:38\n41    47   100       23    no     no   yes    no   yes 36.5          14:25\n42    61   125       22    no     no   yes    no   yes 37.5          13:42\n43    47   123       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.7          21:22\n44    35    67       22    no     no   yes    no   yes 37.0          13:33\n45    53   134       22    no    yes   yes    no   yes 37.3          19:06\n46    16    31       22    no     no   yes    no    no 36.6          17:14\n47    13    36       23    no     no   yes    no   yes 36.5          20:09\n48    59   125       22    no     no   yes    no   yes 36.6           &lt;NA&gt;\n49    69   183       22    no     no    no    no   yes 37.6          10:23\n50    67   169       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.8          09:09\n         bmi days_onset_hosp\n1  117.18750               2\n2   71.81844               1\n3   16.06525               2\n4   22.49657               2\n5   71.41440               1\n6   41.61712               1\n7   62.09539               2\n8    0.00000               1\n9   16.83765               1\n10  22.79033               2\n11  53.41199               2\n12  24.28026               2\n13  22.46003               1\n14  54.32099               0\n15  41.05784               2\n16  28.56648               0\n17  17.03206               1\n18  25.04129               1\n19  38.71722               2\n20  27.38768               2\n21  31.55556               1\n22  14.80691               1\n23  30.88398               1\n24  26.61934               0\n25  59.37500               2\n26  96.61836               1\n27  19.23947               1\n28  84.94031               2\n29  18.41994               1\n30  27.77227               0\n31  41.32231               0\n32  17.20807               2\n33  24.16716               1\n34  15.72190               1\n35 428.99408               2\n36  27.99302               2\n37 243.26101               1\n38  20.23950               0\n39  30.52745               2\n40  25.15590               2\n41  47.00000               0\n42  39.04000               2\n43  31.06616               0\n44  77.96837               0\n45  29.51660               2\n46 166.49324               2\n47 100.30864              NA\n48  37.76000               1\n49  20.60378               0\n50  23.45856               1\n\n\n\n\n\nSome simple ways we can prepare our data to make it better for plotting can include making the contents of the data better for display - which does not necessarily equate to better for data manipulation. For example:\n\nReplace NA values in a character column with the character string “Unknown”\n\nConsider converting column to class factor so their values have prescribed ordinal levels\n\nClean some columns so that their “data friendly” values with underscores etc are changed to normal text or title case.\n\nHere are some examples of this in action:\n\n# make display version of columns with more friendly names\nlinelist &lt;- linelist %&gt;%\n  mutate(\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",        # m to Male \n                            gender == \"f\" ~ \"Female\",      # f to Female,\n                            is.na(gender) ~ \"Unknown\"),    # NA to Unknown\n    \n    outcome_disp = replace_na(outcome, \"Unknown\")          # replace NA outcome with \"unknown\"\n  )\n\n\n\n\nAs a matter of data structure, for ggplot2 we often also want to pivot our data into longer formats. We will learn more about pivoting later; for now it’s enough to be aware that these two data formats exist.\n\n\n\n\n\n\n\n\n\nFor example, say that we want to plot data that are in a “wide” format, such as for each case in the linelist and their symptoms. Below we create a mini-linelist called symptoms_data that contains only the case_id and symptoms columns.\n\nsymptoms_data &lt;- linelist %&gt;% \n  select(c(case_id, fever, chills, cough, aches, vomit))\n\nHere is how the first 50 rows of this mini-linelist look - see how they are formatted “wide” with each symptom as a column:\n\n\n   case_id fever chills cough aches vomit\n1   5fe599    no     no   yes    no   yes\n2   8689b7  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n3   11f8ea  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n4   b8812a    no     no    no    no    no\n5   893f25    no     no   yes    no   yes\n6   be99c8    no     no   yes    no   yes\n7   07e3e8  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n8   369449    no     no   yes    no   yes\n9   f393b4    no     no   yes    no   yes\n10  1389ca    no     no   yes    no    no\n11  2978ac    no     no   yes    no   yes\n12  57a565    no     no   yes    no    no\n13  fc15ef    no     no   yes    no    no\n14  2eaa9a    no     no   yes    no    no\n15  bbfa93    no     no   yes    no   yes\n16  c97dd9    no     no   yes   yes    no\n17  f50e8a    no    yes   yes    no    no\n18  3a7673    no     no   yes    no    no\n19  7f5a01  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n20  ddddee    no     no   yes    no    no\n21  99e8fa    no     no   yes    no   yes\n22  567136    no     no   yes    no    no\n23  9371a9    no    yes   yes    no    no\n24  bc2adf    no     no   yes    no    no\n25  403057  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n26  8bd1e8    no     no   yes    no    no\n27  f327be    no     no   yes    no    no\n28  42e1a9    no    yes   yes    no    no\n29  90e5fe  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n30  959170  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n31  8ebf6e    no     no   yes    no    no\n32  e56412    no     no   yes    no   yes\n33  6d788e  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n34  a47529    no     no   yes    no   yes\n35  67be4e    no     no   yes    no   yes\n36  da8ecb  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n37  148f18  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n38  2cb9a5    no     no   yes   yes   yes\n39  f5c142    no     no   yes   yes   yes\n40  70a9fe  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n41  3ad520    no     no   yes    no   yes\n42  062638    no     no   yes    no   yes\n43  c76676  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n44  baacc1    no     no   yes    no   yes\n45  497372    no    yes   yes    no   yes\n46  23e499    no     no   yes    no    no\n47  38cc4a    no     no   yes    no   yes\n48  3789ee    no     no   yes    no   yes\n49  c71dcd    no     no    no    no   yes\n50  6b70f0  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;\n\n\nIf we wanted to plot the number of cases with specific symptoms, we are limited by the fact that each symptom is a specific column. However, we can pivot the symptoms columns to a longer format like this:\n\nsymptoms_data_long &lt;- symptoms_data %&gt;%    # begin with \"mini\" linelist called symptoms_data\n  \n  pivot_longer(\n    cols = -case_id,                       # pivot all columns except case_id (all the symptoms columns)\n    names_to = \"symptom_name\",             # assign name for new column that holds the symptoms\n    values_to = \"symptom_is_present\") %&gt;%  # assign name for new column that holds the values (yes/no)\n  \n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\")) # convert NA to \"unknown\"\n\nHere are the first 50 rows. Note that case has 5 rows - one for each possible symptom. The new columns symptom_name and symptom_is_present are the result of the pivot. Note that this format may not be very useful for other operations, but is useful for plotting.\n\n\n# A tibble: 50 × 3\n   case_id symptom_name symptom_is_present\n   &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;             \n 1 5fe599  fever        no                \n 2 5fe599  chills       no                \n 3 5fe599  cough        yes               \n 4 5fe599  aches        no                \n 5 5fe599  vomit        yes               \n 6 8689b7  fever        unknown           \n 7 8689b7  chills       unknown           \n 8 8689b7  cough        unknown           \n 9 8689b7  aches        unknown           \n10 8689b7  vomit        unknown           \n# ℹ 40 more rows\n\n\n\n\n\n\n\n\n\n“Grammar of graphics” - ggplot2\nPlotting with ggplot2 is based on “adding” plot layers and design elements on top of one another, with each command added to the previous ones with a plus symbol (+). The result is a multi-layer plot object that can be saved, modified, printed, exported, etc.\n\nThe idea behind the Grammar of Graphics it is that you can build every graph from the same 3 components: (1) a data set, (2) a coordinate system, and (3) geoms — i.e. visual marks that represent data points [source]\n\nggplot objects can be highly complex, but the basic order of layers will usually look like this:\n\nBegin with the baseline ggplot() command - this “opens” the ggplot and allow subsequent functions to be added with +. Typically the dataset is also specified in this command\n\nAdd “geom” layers - these functions visualize the data as geometries (shapes), e.g. as a bar graph, line plot, scatter plot, histogram (or a combination!). These functions all start with geom_ as a prefix.\n\nAdd design elements to the plot such as axis labels, title, fonts, sizes, color schemes, legends, or axes rotation\n\nIn code this amounts to the basic template:\n\nggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) +  &lt;GEOM_FUNCTION&gt;()\n\nWe can further expand this template to include aspects of the visualization such as theme and labels:\n\n# plot data from my_data columns as red points\nggplot(data = my_data)+                   # use the dataset \"my_data\"\n  geom_point(                             # add a layer of points (dots)\n    mapping = aes(x = col1, y = col2),    # \"map\" data column to axes\n    color = \"red\")+                       # other specification for the geom\n  labs()+                                 # here you add titles, axes labels, etc.\n  theme()                                 # here you adjust color, font, size etc of non-data plot elements (axes, title, etc.) \n\nWe will explain each component in the sections below.\n\n\n\nThe opening command of any ggplot2 plot is ggplot(). This command simply creates a blank canvas upon which to add layers. It “opens” the way for further layers to be added with a + symbol.\nTypically, the command ggplot() includes the data = argument for the plot. This sets the default dataset to be used for subsequent layers of the plot.\nThis command will end with a + after its closing parentheses. This leaves the command “open”. The ggplot will only execute/appear when the full command includes a final layer without a + at the end.\n\n# This will create plot that is a blank canvas\nggplot(data = linelist)\n\n\n\n\nA blank canvas is certainly not sufficient - we need to create geometries (shapes) from our data (e.g. bar plots, histograms, scatter plots, box plots).\nThis is done by adding layers “geoms” to the initial ggplot() command. There are many ggplot2 functions that create “geoms”. Each of these functions begins with “geom_”, so we will refer to them generically as geom_XXXX(). There are over 40 geoms in ggplot2 and many others created by fans. View them at the ggplot2 gallery. Some common geoms are listed below:\n\nHistograms - geom_histogram()\n\nBar charts - geom_bar() or geom_col() (see “Bar plot” section)\n\nBox plots - geom_boxplot()\n\nPoints (e.g. scatter plots) - geom_point()\n\nLine graphs - geom_line() or geom_path()\n\nTrend lines - geom_smooth()\n\nIn one plot you can display one or multiple geoms. Each is added to previous ggplot2 commands with a +, and they are plotted sequentially such that later geoms are plotted on top of previous ones.\n\n\n\nMost geom functions must be told what to use to create their shapes - so you must tell them how they should map (assign) columns in your data to components of the plot like the axes, shape colors, shape sizes, etc. For most geoms, the essential components that must be mapped to columns in the data are the x-axis, and (if necessary) the y-axis.\nThis “mapping” occurs with the mapping = argument. The mappings you provide to mapping must be wrapped in the aes() function, so you would write something like mapping = aes(x = col1, y = col2), as shown below.\nBelow, in the ggplot() command the data are set as the case linelist. In the mapping = aes() argument the column age is mapped to the x-axis, and the column wt_kg is mapped to the y-axis.\nAfter a +, the plotting commands continue. A shape is created with the “geom” function geom_point(). This geom inherits the mappings from the ggplot() command above - it knows the axis-column assignments and proceeds to visualize those relationships as points on the canvas.\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\n\n\n\n\nAs another example, the following commands utilize the same data, a slightly different mapping, and a different geom. The geom_histogram() function only requires a column mapped to the x-axis, as the counts y-axis is generated automatically.\n\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\n\n\n\n\n\nIn ggplot terminology a plot “aesthetic” has a specific meaning. It refers to a visual property of plotted data. Note that “aesthetic” here refers to the data being plotted in geoms/shapes - not the surrounding display such as titles, axis labels, background color, that you might associate with the word “aesthetics” in common English. In ggplot those details are called “themes” and are adjusted within a theme() command (see this section).\nTherefore, plot object aesthetics can be colors, sizes, transparencies, placement, etc. of the plotted data. Not all geoms will have the same aesthetic options, but many can be used by most geoms. Here are some examples:\n\nshape = Display a point with geom_point() as a dot, star, triangle, or square…\n\nfill = The interior color (e.g. of a bar or boxplot)\n\ncolor = The exterior line of a bar, boxplot, etc., or the point color if using geom_point()\n\nsize = Size (e.g. line thickness, point size)\n\nalpha = Transparency (1 = opaque, 0 = invisible)\n\nbinwidth = Width of histogram bins\n\nwidth = Width of “bar plot” columns\n\nlinetype = Line type (e.g. solid, dashed, dotted)\n\nThese plot object aesthetics can be assigned values in two ways:\n\nAssigned a static value (e.g. color = \"blue\") to apply across all plotted observations\n\nAssigned to a column of the data (e.g. color = hospital) such that display of each observation depends on its value in that column\n\n\n\n\nIf you want the plot object aesthetic to be static, that is - to be the same for every observation in the data, you write its assignment within the geom but outside of any mapping = aes() statement. These assignments could look like size = 1 or color = \"blue\". Here are two examples:\n\nIn the first example, the mapping = aes() is in the ggplot() command and the axes are mapped to age and weight columns in the data. The plot aesthetics color =, size =, and alpha = (transparency) are assigned to static values. For clarity, this is done in the geom_point() function, as you may add other geoms afterward that would take different values for their plot aesthetics.\n\nIn the second example, the histogram requires only the x-axis mapped to a column. The histogram binwidth =, color =, fill = (internal color), and alpha = are again set within the geom to static values.\n\n\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # set data and axes mapping\n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)         # set static point aesthetics\n\n# histogram\nggplot(data = linelist, mapping = aes(x = age))+       # set data and axes\n  geom_histogram(              # display histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"blue\",               # bin interior color\n    alpha = 0.1)                 # bin transparency\n\n\n\n\n\n\n\n\n\n\nThe alternative is to scale the plot object aesthetic by the values in a column. In this approach, the display of this aesthetic will depend on that observation’s value in that column of the data. If the column values are continuous, the display scale (legend) for that aesthetic will be continuous. If the column values are discrete, the legend will display each value and the plotted data will appear as distinctly “grouped” (read more in the grouping section of this page).\nTo achieve this, you map that plot aesthetic to a column name (not in quotes). This must be done within a mapping = aes() function (note: there are several places in the code you can make these mapping assignments, as discussed below).\nTwo examples are below.\n\nIn the first example, the color = aesthetic (of each point) is mapped to the column age - and a scale has appeared in a legend! For now just note that the scale exists - we will show how to modify it in later sections.\n\nIn the second example two new plot aesthetics are also mapped to columns (color = and size =), while the plot aesthetics shape = and alpha = are mapped to static values outside of any mapping = aes() function.\n\n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age)\n       )+     # map color to age\n  geom_point()         # display data as points \n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age,       # map color to age\n         size = age))+      # map size to age\n  geom_point(             # display data as points\n    shape = \"diamond\",      # points display as diamonds\n    alpha = 0.3)            # point transparency at 30%\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAxes assignments are always assigned to columns in the data (not to static values), and this is always done within mapping = aes().\n\n\nIt becomes important to keep track of your plot layers and aesthetics when making more complex plots - for example plots with multiple geoms. In the example below, the size = aesthetic is assigned twice - once for geom_point() and once for geom_smooth() - both times as a static value.\n\nggplot(data = linelist,\n       mapping = aes(           # map aesthetics to columns\n         x = age,\n         y = wt_kg,\n         color = age_years)\n       ) + \n  geom_point(                   # add points for each row of data\n    size = 1,\n    alpha = 0.5) +  \n  geom_smooth(                  # add a trend line \n    method = \"lm\",              # with linear method\n    size = 2)                   # size (width of line) of 2\n\n\n\n\n\n\n\nAesthetic mapping within mapping = aes() can be written in several places in your plotting commands and can even be written more than once. This can be written in the top ggplot() command, and/or for each individual geom beneath. The nuances include:\n\nMapping assignments made in the top ggplot() command will be inherited as defaults across any geom below, like how x = and y = are inherited\nMapping assignments made within one geom apply only to that geom\n\nLikewise, data = specified in the top ggplot() will apply by default to any geom below, but you could also specify data for each geom (but this is more difficult).\nThus, each of the following commands will create the same plot:\n\n# These commands will produce the exact same plot\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))\n\nggplot()+\n  geom_histogram(data = linelist, mapping = aes(x = age))\n\n\n\n\nYou can easily group the data and “plot by group”. In fact, you have already done this!\nAssign the “grouping” column to the appropriate plot aesthetic, within a mapping = aes(). Above, we demonstrated this using continuous values when we assigned point size = to the column age. However this works the same way for discrete/categorical columns.\nFor example, if you want points to be displayed by gender, you would set mapping = aes(color = gender). A legend automatically appears. This assignment can be made within the mapping = aes() in the top ggplot() command (and be inherited by the geom), or it could be set in a separate mapping = aes() within the geom. Both approaches are shown below:\n\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)\n\n\n\n\n\n# This alternative code produces the same plot\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg))+\n  geom_point(\n    mapping = aes(color = gender),\n    alpha = 0.5)\n\nNote that depending on the geom, you will need to use different arguments to group the data. For geom_point() you will most likely use color =, shape = or size =. Whereas for geom_bar() you are more likely to use fill =. This just depends on the geom and what plot aesthetic you want to reflect the groupings.\nFor your information - the most basic way of grouping the data is by using only the group = argument within mapping = aes(). However, this by itself will not change the colors, fill, or shapes. Nor will it create a legend. Yet the data are grouped, so statistical displays may be affected.\n\n\n\n\nFacets, or “small-multiples”, are used to split one plot into a multi-panel figure, with one panel (“facet”) per group of data. The same type of plot is created multiple times, each one using a sub-group of the same dataset.\nFaceting is a functionality that comes with ggplot2, so the legends and axes of the facet “panels” are automatically aligned. We would need to use other packages to combine completely different plots (cowplot and patchwork) into one figure.\nFaceting is done with one of the following ggplot2 functions:\n\nfacet_wrap() To show a different panel for each level of a single variable. One example of this could be showing a different epidemic curve for each hospital in a region. Facets are ordered alphabetically, unless the variable is a factor with other ordering defined.\n\n\n\nYou can invoke certain options to determine the layout of the facets, e.g. nrow = 1 or ncol = 1 to control the number of rows or columns that the faceted plots are arranged within.\n\n\nfacet_grid() This is used when you want to bring a second variable into the faceting arrangement. Here each panel of a grid shows the intersection between values in two columns. For example, epidemic curves for each hospital-age group combination with hospitals along the top (columns) and age groups along the sides (rows).\n\n\n\nnrow and ncol are not relevant, as the subgroups are presented in a grid\n\nEach of these functions accept a formula syntax to specify the column(s) for faceting. Both accept up to two columns, one on each side of a tilde ~.\n\nFor facet_wrap() most often you will write only one column preceded by a tilde ~ like facet_wrap(~hospital). However you can write two columns facet_wrap(outcome ~ hospital) - each unique combination will display in a separate panel, but they will not be arranged in a grid. The headings will show combined terms and these won’t be specific logic to the columns vs. rows. If you are providing only one faceting variable, a period . is used as a placeholder on the other side of the formula - see the code examples.\nFor facet_grid() you can also specify one or two columns to the formula (grid rows ~ columns). If you only want to specify one, you can place a period . on the other side of the tilde like facet_grid(. ~ hospital) or facet_grid(hospital ~ .).\n\nFacets can quickly contain an overwhelming amount of information - its good to ensure you don’t have too many levels of each variable that you choose to facet by. Here are some quick examples with the malaria dataset which consists of daily case counts of malaria for facilities, by age group.\nBelow we import and do some quick modifications for simplicity:\n\n# These data are daily counts of malaria cases, by facility-day\nmalaria_data &lt;- import(\"data/malaria_facility_count_data.rds\") %&gt;%  # import\n  select(-submitted_date, -Province, -newid)                                 # remove unneeded columns\n\nThe first 50 rows of the malaria data are below. Note there is a column malaria_tot, but also columns for counts by age group (these will be used in the second, facet_grid() example).\n\n\n# A tibble: 50 × 7\n   location_name data_date  District `malaria_rdt_0-4` `malaria_rdt_5-14`\n   &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;                &lt;int&gt;              &lt;int&gt;\n 1 Facility 1    2020-08-11 Spring                  11                 12\n 2 Facility 2    2020-08-11 Bolo                    11                 10\n 3 Facility 3    2020-08-11 Dingo                    8                  5\n 4 Facility 4    2020-08-11 Bolo                    16                 16\n 5 Facility 5    2020-08-11 Bolo                     9                  2\n 6 Facility 6    2020-08-11 Dingo                    3                  1\n 7 Facility 6    2020-08-10 Dingo                    4                  0\n 8 Facility 5    2020-08-10 Bolo                    15                 14\n 9 Facility 5    2020-08-09 Bolo                    11                 11\n10 Facility 5    2020-08-08 Bolo                    19                 15\n# ℹ 40 more rows\n# ℹ 2 more variables: malaria_rdt_15 &lt;int&gt;, malaria_tot &lt;int&gt;\n\n\n\n\nFor the moment, let’s focus on the columns malaria_tot and District. Ignore the age-specific count columns for now. We will plot epidemic curves with geom_col(), which produces a column for each day at the specified y-axis height given in column malaria_tot (the data are already daily counts, so we use geom_col() - see the “Bar plot” section below).\nWhen we add the command facet_wrap(), we specify a tilde and then the column to facet on (District in this case). You can place another column on the left side of the tilde, - this will create one facet for each combination - but we recommend you do this with facet_grid() instead. In this use case, one facet is created for each unique value of District.\n\n# A plot with facets by district\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district\") +\n  facet_wrap(~District)                       # the facets are created\n\n\n\n\n\n\n\nWe can use a facet_grid() approach to cross two variables. Let’s say we want to cross District and age. Well, we need to do some data transformations on the age columns to get these data into ggplot-preferred “long” format. The age groups all have their own columns - we want them in a single column called age_group and another called num_cases.\n\nmalaria_age &lt;- malaria_data %&gt;%\n  select(-malaria_tot) %&gt;% \n  pivot_longer(\n    cols = c(starts_with(\"malaria_rdt_\")),  # choose columns to pivot longer\n    names_to = \"age_group\",      # column names become age group\n    values_to = \"num_cases\"      # values to a single column (num_cases)\n  ) %&gt;%\n  mutate(\n    age_group = str_replace(age_group, \"malaria_rdt_\", \"\"),\n    age_group = forcats::fct_relevel(age_group, \"5-14\", after = 1))\n\nNow the first 50 rows of data look like this:\n\n\n# A tibble: 50 × 5\n   location_name data_date  District age_group num_cases\n   &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;    &lt;fct&gt;         &lt;int&gt;\n 1 Facility 1    2020-08-11 Spring   0-4              11\n 2 Facility 1    2020-08-11 Spring   5-14             12\n 3 Facility 1    2020-08-11 Spring   15               23\n 4 Facility 2    2020-08-11 Bolo     0-4              11\n 5 Facility 2    2020-08-11 Bolo     5-14             10\n 6 Facility 2    2020-08-11 Bolo     15                5\n 7 Facility 3    2020-08-11 Dingo    0-4               8\n 8 Facility 3    2020-08-11 Dingo    5-14              5\n 9 Facility 3    2020-08-11 Dingo    15                5\n10 Facility 4    2020-08-11 Bolo     0-4              16\n# ℹ 40 more rows\n\n\nWhen you pass the two variables to facet_grid(), easiest is to use formula notation (e.g. x ~ y) where x is rows and y is columns. Here is the plot, using facet_grid() to show the plots for each combination of the columns age_group and District.\n\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group)\n\n\n\n\n\n\n\nThe axes scales displayed when faceting are by default the same (fixed) across all the facets. This is helpful for cross-comparison, but not always appropriate.\nWhen using facet_wrap() or facet_grid(), we can add scales = \"free_y\" to “free” or release the y-axes of the panels to scale appropriately to their data subset. This is particularly useful if the actual counts are small for one of the subcategories and trends are otherwise hard to see. Instead of “free_y” we can also write “free_x” to do the same for the x-axis (e.g. for dates) or “free” for both axes. Note that in facet_grid, the y scales will be the same for facets in the same row, and the x scales will be the same for facets in the same column.\nWhen using facet_grid only, we can add space = \"free_y\" or space = \"free_x\" so that the actual height or width of the facet is weighted to the values of the figure within. This only works if scales = \"free\" (y or x) is already applied.\n\n# Free y-axis\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district - 'free' x and y axes\") +\n  facet_wrap(~District, scales = \"free\")        # the facets are created\n\n\n\n\n\n\n\n\nExporting ggplots is made easy with the ggsave() function from ggplot2. It can work in two ways, either:\n\nSpecify the name of the plot object, then the file path and name with extension\n\nFor example: ggsave(my_plot, \"plots/my_plot.png\"))\n\n\nRun the command with only a file path, to save the last plot that was printed\n\nFor example: ggsave(\"plots/my_plot.png\"))\n\n\nYou can export as png, pdf, jpeg, tiff, bmp, svg, or several other file types, by specifying the file extension in the file path.\nYou can also specify the arguments width =, height =, and units = (either “in”, “cm”, or “mm”). You can also specify dpi = with a number for plot resolution (e.g. 300). See the function details by entering ?ggsave or reading the documentation online.\n\n\n\nSurely you will want to add or adjust the plot’s labels. These are most easily done within the labs() function which is added to the plot with + just as the geoms were.\nWithin labs() you can provide character strings to these arguements:\n\nx = and y = The x-axis and y-axis title (labels)\n\ntitle = The main plot title\n\nsubtitle = The subtitle of the plot, in smaller text below the title\n\ncaption = The caption of the plot, in bottom-right by default\n\nHere is a plot we made earlier, but with nicer labels:\n\nage_by_wt &lt;- ggplot(\n  data = linelist,   # set data\n  mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()+           # display data as points\n  labs(\n    title = \"Age and weight distribution\",\n    subtitle = \"Fictional Ebola outbreak, 2014\",\n    x = \"Age in years\",\n    y = \"Weight in kilos\",\n    color = \"Age\",\n    caption = stringr::str_glue(\"Data as of {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt\n\n\n\n\nNote how in the caption assignment we used str_glue() from the stringr package to implant dynamic R code within the string text. The caption will show the “Data as of:” date that reflects the maximum hospitalization date in the linelist.\n\n\n\nThroughout this page, you have already seen many examples of plotting continuous data. Here we briefly consolidate these and present a few variations.\nVisualisations covered here include:\n\nPlots for one continuous variable:\n\nHistogram, a classic graph to present the distribution of a continuous variable.\nBox plot (also called box and whisker), to show the 25th, 50th, and 75th percentiles, tail ends of the distribution, and outliers (important limitations).\n\nJitter plot, to show all values as points that are ‘jittered’ so they can (mostly) all be seen, even where two have the same value.\n\nViolin plot, show the distribution of a continuous variable based on the symmetrical width of the ‘violin’.\nSina plot, are a combination of jitter and violin plots, where individual points are shown but in the symmetrical shape of the distribution (via ggforce package).\n\n\nScatter plot for two continuous variables.\n\nHeat plots for three continuous variables\n\n\n\nHistograms may look like bar charts, but are distinct because they measure the distribution of a continuous variable. There are no spaces between the “bars”, and only one column is provided to geom_histogram().\nBelow is code for generating histograms, which group continuous data into ranges and display in adjacent bars of varying height. This is done using geom_histogram(). See the “Bar plot” section of the ggplot basics page to understand difference between geom_histogram(), geom_bar(), and geom_col().\nWe will show the distribution of ages of cases. Within mapping = aes() specify which column you want to see the distribution of. You can assign this column to either the x or the y axis.\nThe rows will be assigned to “bins” based on their numeric age, and these bins will be graphically represented by bars. If you specify a number of bins with the bins = plot aesthetic, the break points are evenly spaced between the minimum and maximum values of the histogram. If bins = is unspecified, an appropriate number of bins will be guessed and this message displayed after the plot:\n## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\nIf you do not want to specify a number of bins to bins =, you could alternatively specify binwidth = in the units of the axis. We give a few examples showing different bins and bin widths:\n\n# A) Regular histogram\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram()+\n  labs(title = \"A) Default histogram (30 bins)\")\n\n# B) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 50)+\n  labs(title = \"B) Set to 50 bins\")\n\n# C) Fewer bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 5)+\n  labs(title = \"C) Set to 5 bins\")\n\n\n# D) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(binwidth = 1)+\n  labs(title = \"D) binwidth of 1\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo get smoothed proportions, you can use geom_density():\n\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Proportional density\")\n\n# Stacked frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_density(size = 2, alpha = 0.2, position = \"stack\")+\n  labs(title = \"'Stacked' proportional densities\")\n\n\n\n\n\n\n\nTo get a “stacked” histogram (of a continuous column of data), you can do one of the following:\n\nUse geom_histogram() with the fill = argument within aes() and assigned to the grouping column, or\n\nUse geom_freqpoly(), which is likely easier to read (you can still set binwidth =)\n\nTo see proportions of all values, set the y = after_stat(density) (use this syntax exactly - not changed for your data). Note: these proportions will show per group.\n\nEach is shown below (*note use of color = vs. fill = in each):\n\n# \"Stacked\" histogram\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_histogram(binwidth = 2)+\n  labs(title = \"'Stacked' histogram\")\n\n# Frequency \nggplot(data = linelist, mapping = aes(x = age, color = gender)) +\n  geom_freqpoly(binwidth = 2, size = 2)+\n  labs(title = \"Freqpoly\")\n\n# Frequency with proportion axis\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), color = gender)) +\n  geom_freqpoly(binwidth = 5, size = 2)+\n  labs(title = \"Proportional freqpoly\")\n\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), fill = gender)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Proportional, smoothed with geom_density()\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to have some fun, try geom_density_ridges from the ggridges package (vignette here.\nRead more in detail about histograms at the tidyverse page on geom_histogram().\n\n\n\nBox plots are common, but have important limitations. They can obscure the actual distribution - e.g. a bi-modal distribution. See this R graph gallery and this data-to-viz article for more details. However, they do nicely display the inter-quartile range and outliers - so they can be overlaid on top of other types of plots that show the distribution in more detail.\nBelow we remind you of the various components of a boxplot:\n\n\n\n\n\n\n\n\n\nWhen using geom_boxplot() to create a box plot, you generally map only one axis (x or y) within aes(). The axis specified determines if the plots are horizontal or vertical.\nIn most geoms, you create a plot per group by mapping an aesthetic like color = or fill = to a column within aes(). However, for box plots achieve this by assigning the grouping column to the un-assigned axis (x or y). Below is code for a boxplot of all age values in the dataset, and second is code to display one box plot for each (non-missing) gender in the dataset. Note that NA (missing) values will appear as a separate box plot unless removed. In this example we also set the fill to the column outcome so each plot is a different color - but this is not necessary.\n\n# A) Overall boxplot\nggplot(data = linelist)+  \n  geom_boxplot(mapping = aes(y = age))+   # only y axis mapped (not x)\n  labs(title = \"A) Overall boxplot\")\n\n# B) Box plot by group\nggplot(data = linelist, mapping = aes(y = age, x = gender, fill = gender)) + \n  geom_boxplot()+                     \n  theme(legend.position = \"none\")+   # remove legend (redundant)\n  labs(title = \"B) Boxplot by gender\")      \n\n\n\n\n\n\n\n\n\n\nBelow is code for creating violin plots (geom_violin) and jitter plots (geom_jitter) to show distributions. You can specify that the fill or color is also determined by the data, by inserting these options within aes().\n\n# A) Jitter plot by group\nggplot(data = linelist %&gt;% drop_na(outcome),      # remove missing values\n       mapping = aes(y = age,                     # Continuous variable\n           x = outcome,                           # Grouping variable\n           color = outcome))+                     # Color variable\n  geom_jitter()+                                  # Create the violin plot\n  labs(title = \"A) jitter plot by gender\")     \n\n\n\n# B) Violin plot by group\nggplot(data = linelist %&gt;% drop_na(outcome),       # remove missing values\n       mapping = aes(y = age,                      # Continuous variable\n           x = outcome,                            # Grouping variable\n           fill = outcome))+                       # fill variable (color)\n  geom_violin()+                                   # create the violin plot\n  labs(title = \"B) violin plot by gender\")    \n\n\n\n\n\n\n\nYou can combine the two using the geom_sina() function from the ggforce package. The sina plots the jitter points in the shape of the violin plot. When overlaid on the violin plot (adjusting the transparencies) this can be easier to visually interpret.\n\n# A) Sina plot by group\nggplot(\n  data = linelist %&gt;% drop_na(outcome), \n  aes(y = age,           # numeric variable\n      x = outcome)) +    # group variable\n  geom_violin(\n    aes(fill = outcome), # fill (color of violin background)\n    color = \"white\",     # white outline\n    alpha = 0.2)+        # transparency\n  geom_sina(\n    size=1,                # Change the size of the jitter\n    aes(color = outcome))+ # color (color of dots)\n  scale_fill_manual(       # Define fill for violin background by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  scale_color_manual(      # Define colours for points by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  theme_minimal() +                                # Remove the gray background\n  theme(legend.position = \"none\") +                # Remove unnecessary legend\n  labs(title = \"B) violin and sina plot by gender, with extra formatting\")      \n\n\n\n\n\n\n\nFollowing similar syntax, geom_point() will allow you to plot two continuous variables against each other in a scatter plot. This is useful for showing actual values rather than their distributions. A basic scatter plot of age vs weight is shown in (A). In (B) we again use facet_grid() to show the relationship between two continuous variables in the linelist.\n\n# Basic scatter plot of weight and age\nggplot(data = linelist, \n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Scatter plot of weight and age\")\n\n# Scatter plot of weight and age by gender and Ebola outcome\nggplot(data = linelist %&gt;% drop_na(gender, outcome), # filter retains non-missing gender/outcome\n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Scatter plot of weight and age faceted by gender and outcome\")+\n  facet_grid(gender ~ outcome) \n\n\n\n\n\n\n\n\n\n\nYou can display three continuous variables by utilizing the fill = argument to create a heat plot. The color of each “cell” will reflect the value of the third continuous column of data. There are ways to make 3D plots in R, but for applied epidemiology these are often difficult to interpret and therefore less useful for decision-making.\n\n\n\n\nCategorical data can be character values, could be logical (TRUE/FALSE), or factors.\n\n\n\n\nThe first thing to understand about your categorical data is whether it exists as raw observations like a linelist of cases, or as a summary or aggregate data frame that holds counts or proportions. The state of your data will impact which plotting function you use:\n\nIf your data are raw observations with one row per observation, you will likely use geom_bar()\n\nIf your data are already aggregated into counts or proportions, you will likely use geom_col()\n\n\n\n\nNext, examine the class of the columns you want to plot. We look at hospital, first with class() from base R, and with tabyl() from janitor.\n\n# View class of hospital column - we can see it is a character\nclass(linelist$hospital)\n\n[1] \"character\"\n\n# Look at values and proportions within hospital column\nlinelist %&gt;% \n  tabyl(hospital)\n\n                             hospital    n    percent\n                     Central Hospital  454 0.07710598\n                    Military Hospital  896 0.15217391\n                              Missing 1469 0.24949049\n                                Other  885 0.15030571\n                        Port Hospital 1762 0.29925272\n St. Mark's Maternity Hospital (SMMH)  422 0.07167120\n\n\nWe can see the values within are characters, as they are hospital names, and by default they are ordered alphabetically. There are ‘other’ and ‘missing’ values, which we would prefer to be the last subcategories when presenting breakdowns. So we change this column into a factor and re-order it.\n\n# Convert to factor and define level order so \"Other\" and \"Missing\" are last\nlinelist &lt;- linelist %&gt;% \n  mutate(\n    hospital = fct_relevel(hospital, \n      \"St. Mark's Maternity Hospital (SMMH)\",\n      \"Port Hospital\", \n      \"Central Hospital\",\n      \"Military Hospital\",\n      \"Other\",\n      \"Missing\"))\n\n\nlevels(linelist$hospital)\n\n[1] \"St. Mark's Maternity Hospital (SMMH)\"\n[2] \"Port Hospital\"                       \n[3] \"Central Hospital\"                    \n[4] \"Military Hospital\"                   \n[5] \"Other\"                               \n[6] \"Missing\"                             \n\n\n\n\n\n\nUse geom_bar() if you want bar height (or the height of stacked bar components) to reflect the number of relevant rows in the data. These bars will have gaps between them, unless the width = plot aesthetic is adjusted.\n\nProvide only one axis column assignment (typically x-axis). If you provide x and y, you will get Error: stat_count() can only have an x or y aesthetic.\n\nYou can create stacked bars by adding a fill = column assignment within mapping = aes()\n\nThe opposite axis will be titled “count” by default, because it represents the number of rows\n\nBelow, we have assigned outcome to the y-axis, but it could just as easily be on the x-axis. If you have longer character values, it can sometimes look better to flip the bars sideways and put the legend on the bottom. This may impact how your factor levels are ordered - in this case we reverse them with fct_rev() to put missing and other at the bottom.\n\n# A) Outcomes in all cases\nggplot(linelist %&gt;% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital)), width = 0.7) +\n  theme_minimal()+\n  labs(title = \"A) Number of cases by hospital\",\n       y = \"Hospital\")\n\n\n# B) Outcomes in all cases by hosptial\nggplot(linelist %&gt;% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital), fill = outcome), width = 0.7) +\n  theme_minimal()+\n  theme(legend.position = \"bottom\") +\n  labs(title = \"B) Number of recovered and dead Ebola cases, by hospital\",\n       y = \"Hospital\")\n\n\n\n\n\n\n\n\n\n\nUse geom_col() if you want bar height (or height of stacked bar components) to reflect pre-calculated values that exists in the data. Often, these are summary or “aggregated” counts, or proportions.\nProvide column assignments for both axes to geom_col(). Typically your x-axis column is discrete and your y-axis column is numeric.\nLet’s say we have this dataset outcomes:\n\n\n# A tibble: 2 × 3\n  outcome     n proportion\n  &lt;chr&gt;   &lt;int&gt;      &lt;dbl&gt;\n1 Death    1022       56.2\n2 Recover   796       43.8\n\n\nBelow is code using geom_col for creating simple bar charts to show the distribution of Ebola patient outcomes. With geom_col, both x and y need to be specified. Here x is the categorical variable along the x axis, and y is the generated proportions column proportion.\n\n# Outcomes in all cases\nggplot(outcomes) + \n  geom_col(aes(x=outcome, y = proportion)) +\n  labs(subtitle = \"Number of recovered and dead Ebola cases\")\n\n\n\n\nTo show breakdowns by hospital, we would need our table to contain more information, and to be in “long” format. We create this table with the frequencies of the combined categories outcome and hospital.\n\noutcomes2 &lt;- linelist %&gt;% \n  drop_na(outcome) %&gt;% \n  count(hospital, outcome) %&gt;%  # get counts by hospital and outcome\n  group_by(hospital) %&gt;%        # Group so proportions are out of hospital total\n  mutate(proportion = n/sum(n)*100) # calculate proportions of hospital total\n\nhead(outcomes2) # Preview data\n\n# A tibble: 6 × 4\n# Groups:   hospital [3]\n  hospital                             outcome     n proportion\n  &lt;fct&gt;                                &lt;chr&gt;   &lt;int&gt;      &lt;dbl&gt;\n1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\n2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\n3 Port Hospital                        Death     785       57.6\n4 Port Hospital                        Recover   579       42.4\n5 Central Hospital                     Death     193       53.9\n6 Central Hospital                     Recover   165       46.1\n\n\nWe then create the ggplot with some added formatting:\n\nAxis flip: Swapped the axis around with coord_flip() so that we can read the hospital names.\nColumns side-by-side: Added a position = \"dodge\" argument so that the bars for death and recover are presented side by side rather than stacked. Note stacked bars are the default.\nColumn width: Specified ‘width’, so the columns are half as thin as the full possible width.\nColumn order: Reversed the order of the categories on the y axis so that ‘Other’ and ‘Missing’ are at the bottom, with scale_x_discrete(limits=rev). Note that we used that rather than scale_y_discrete because hospital is stated in the x argument of aes(), even if visually it is on the y axis. We do this because Ggplot seems to present categories backwards unless we tell it not to.\n\nOther details: Labels/titles and colours added within labs and scale_fill_color respectively.\n\n\n# Outcomes in all cases by hospital\nggplot(outcomes2) +  \n  geom_col(\n    mapping = aes(\n      x = proportion,                 # show pre-calculated proportion values\n      y = fct_rev(hospital),          # reverse level order so missing/other at bottom\n      fill = outcome),                # stacked by outcome\n    width = 0.5)+                    # thinner bars (out of 1)\n  theme_minimal() +                  # Minimal theme \n  theme(legend.position = \"bottom\")+\n  labs(subtitle = \"Number of recovered and dead Ebola cases, by hospital\",\n       fill = \"Outcome\",             # legend title\n       y = \"Count\",                  # y axis title\n       x = \"Hospital of admission\")+ # x axis title\n  scale_fill_manual(                 # adding colors manually\n    values = c(\"Death\"= \"#3B1c8C\",\n               \"Recover\" = \"#21908D\" )) \n\n\n\n\nNote that the proportions are binary, so we may prefer to drop ‘recover’ and just show the proportion who died. This is just for illustration purposes.\nIf using geom_col() with dates data (e.g. an epicurve from aggregated data) - you will want to adjust the width = argument to remove the “gap” lines between the bars. If using daily data set width = 1. If weekly, width = 7. Months are not possible because each month has a different number of days.\n\n\n\n\nOne of the best parts of ggplot2 is the amount of control you have over the plot - you can define anything! As mentioned above, the design of the plot that is not related to the data shapes/geometries are adjusted within the theme() function. For example, the plot background color, presence/absence of gridlines, and the font/size/color/alignment of text (titles, subtitles, captions, axis text…). These adjustments can be done in one of two ways:\n\nAdd a complete theme theme_() function to make sweeping adjustments - these include theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() among others\n\nAdjust each tiny aspect of the plot individually within theme()\n\n\n\nAs they are quite straight-forward, we will demonstrate the complete theme functions below and will not describe them further here. Note that any micro-adjustments with theme() should be made after use of a complete theme.\nWrite them with empty parentheses.\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme classic\")+\n  theme_classic()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme bw\")+\n  theme_bw()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme minimal\")+\n  theme_minimal()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme gray\")+\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe theme() function can take a large number of arguments, each of which edits a very specific aspect of the plot. There is no way we could cover all of the arguments, but we will describe the general pattern for them and show you how to find the argument name that you need. The basic syntax is this:\n\nWithin theme() write the argument name for the plot element you want to edit, like plot.title =\n\nProvide an element_() function to the argument\n\n\n\nMost often, use element_text(), but others include element_rect() for canvas background colors, or element_blank() to remove plot elements\n\n\n\nWithin the element_() function, write argument assignments to make the fine adjustments you desire\n\nSo, that description was quite abstract, so here are some examples.\nThe below plot looks quite silly, but it serves to show you a variety of the ways you can adjust your plot.\n\nWe begin with the plot age_by_wt defined just above and add theme_classic()\n\nFor finer adjustments we add theme() and include one argument for each plot element to adjust\n\nIt can be nice to organize the arguments in logical sections. To describe just some of those used below:\n\nlegend.position = is unique in that it accepts simple values like “bottom”, “top”, “left”, and “right”. But generally, text-related arguments require that you place the details within element_text().\n\nTitle size with element_text(size = 30)\n\nThe caption horizontal alignment with element_text(hjust = 0) (from right to left)\n\nThe subtitle is italicized with element_text(face = \"italic\")\n\n\nage_by_wt + \n  theme_classic()+                                 # pre-defined theme adjustments\n  theme(\n    legend.position = \"bottom\",                    # move legend to bottom\n    \n    plot.title = element_text(size = 30),          # size of title to 30\n    plot.caption = element_text(hjust = 0),        # left-align caption\n    plot.subtitle = element_text(face = \"italic\"), # italicize subtitle\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # adjusts only x-axis text\n    axis.text.y = element_text(size = 15),         # adjusts only y-axis text\n    \n    axis.title = element_text(size = 20)           # adjusts both axes titles\n    )     \n\n\n\n\nHere are some especially common theme() arguments. You will recognize some patterns, such as appending .x or .y to apply the change only to one axis.\n\n\n\n\n\n\n\ntheme() argument\nWhat it adjusts\n\n\n\n\nplot.title = element_text()\nThe title\n\n\nplot.subtitle = element_text()\nThe subtitle\n\n\nplot.caption = element_text()\nThe caption (family, face, color, size, angle, vjust, hjust…)\n\n\naxis.title = element_text()\nAxis titles (both x and y) (size, face, angle, color…)\n\n\naxis.title.x = element_text()\nAxis title x-axis only (use .y for y-axis only)\n\n\naxis.text = element_text()\nAxis text (both x and y)\n\n\naxis.text.x = element_text()\nAxis text x-axis only (use .y for y-axis only)\n\n\naxis.ticks = element_blank()\nRemove axis ticks\n\n\naxis.line = element_line()\nAxis lines (colour, size, linetype: solid dashed dotted etc)\n\n\nstrip.text = element_text()\nFacet strip text (colour, face, size, angle…)\n\n\nstrip.background = element_rect()\nfacet strip (fill, colour, size…)\n\n\n\nBut there are so many theme arguments! How could I remember them all? Do not worry - it is impossible to remember them all. Luckily there are a few tools to help you:\nThe tidyverse documentation on modifying theme, which has a complete list.\n\n\n\n\n\n\nTip\n\n\n\nRun theme_get() from ggplot2 to print a list of all 90+ theme() arguments to the console.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you ever want to remove an element of a plot, you can also do it through theme(). Just pass element_blank() to an argument to have it disappear completely. For legends, set legend.position = \"none\".\n\n\n\n\n\n\nIn ggplot2, when aesthetics of plotted data (e.g. size, color, shape, fill, plot axis) are mapped to columns in the data, the exact display can be adjusted with the corresponding “scale” command. In this section we explain some common scale adjustments.\n\n\nOne thing that can initially be difficult to understand with ggplot2 is control of color schemes. Note that this section discusses the color of plot objects (geoms/shapes) such as points, bars, lines, tiles, etc.\nTo control “color” of plot objects you will be adjusting either the color = aesthetic (the exterior color) or the fill = aesthetic (the interior color). One exception to this pattern is geom_point(), where you really only get to control color =, which controls the color of the point (interior and exterior).\nWhen setting colour or fill you can use colour names recognized by R like \"red\" (see complete list or enter ?colors), or a specific hex colour such as \"#ff0505\".\n\n# histogram - \nggplot(data = linelist, mapping = aes(x = age))+       # set data and axes\n  geom_histogram(              # display histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"lightblue\")          # bin interior color (fill) \n\n\n\n\nAesthetics such as fill = and color = can be defined either outside of a mapping = aes() statement or inside of one. If outside the aes(), the assigned value should be static (e.g. color = \"blue\") and will apply for all data plotted by the geom. If inside, the aesthetic should be mapped to a column, like color = hospital, and the expression will vary by the value for that row in the data. A few examples:\n\n# Static color for points and for line\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(color = \"purple\")+\n  geom_vline(xintercept = 50, color = \"orange\")+\n  labs(title = \"Static color for points and line\")\n\n# Color mapped to continuous column\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(mapping = aes(color = temp))+         \n  labs(title = \"Color mapped to continuous column\")\n\n# Color mapped to discrete column\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(mapping = aes(color = gender))+         \n  labs(title = \"Color mapped to discrete column\")\n\n# bar plot, fill to discrete column, color to static value\nggplot(data = linelist, mapping = aes(x = hospital))+     \n  geom_bar(mapping = aes(fill = gender), color = \"yellow\")+         \n  labs(title = \"Fill mapped to discrete column, static color\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce you map a column to a plot aesthetic (e.g. x =, y =, fill =, color =…), your plot will gain a scale/legend. See above how the scale can be continuous, discrete, date, etc. values depending on the class of the assigned column. If you have multiple aesthetics mapped to columns, your plot will have multiple scales.\nYou can control the scales with the appropriate scales_() function. The scale functions of ggplot() have 3 parts that are written like this: scale_AESTHETIC_METHOD().\n\nThe first part, scale_(), is fixed.\n\nThe second part, the AESTHETIC, should be the aesthetic that you want to adjust the scale for (_fill_, _shape_, _color_, _size_, _alpha_…) - the options here also include _x_ and _y_.\n\nThe third part, the METHOD, will be either _discrete(), continuous(), _date(), _gradient(), or _manual() depending on the class of the column and how you want to control it. There are others, but these are the most-often used.\n\nBe sure that you use the correct function for the scale! Otherwise your scale command will not appear to change anything. If you have multiple scales, you may use multiple scale functions to adjust them! For example:\n\n\n\nEach kind of scale has its own arguments, though there is some overlap. Query the function like ?scale_color_discrete in the R console to see the function argument documentation.\nFor continuous scales, use breaks = to provide a sequence of values with seq() (take to =, from =, and by = as shown in the example below. Set expand = c(0,0) to eliminate padding space around the axes (this can be used on any _x_ or _y_ scale.\nFor discrete scales, you can adjust the order of level appearance with breaks =, and how the values display with the labels = argument. Provide a character vector to each of those (see example below). You can also drop NA easily by setting na.translate = FALSE.\n\n\n\nOne of the most useful tricks is using “manual” scaling functions to explicitly assign colors as you desire. These are functions with the syntax scale_xxx_manual() (e.g. scale_colour_manual() or scale_fill_manual()). Each of the below arguments are demonstrated in the code example below.\n\nAssign colors to data values with the values = argument\n\nSpecify a color for NA with na.value =\n\nChange how the values are written in the legend with the labels = argument\n\nChange the legend title with name =\n\nBelow, we create a bar plot and show how it appears by default, and then with three scales adjusted - the continuous y-axis scale, the discrete x-axis scale, and manual adjustment of the fill (interior bar color).\n\n# BASELINE - no scale adjustment\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = outcome, fill = gender))+\n  labs(title = \"Baseline - no scale adjustments\")\n\n\n\n# SCALES ADJUSTED\nggplot(data = linelist)+\n  \n  geom_bar(mapping = aes(x = outcome, fill = gender), color = \"black\")+\n  \n  theme_minimal()+                   # simplify background\n  \n  scale_y_continuous(                # continuous scale for y-axis (counts)\n    expand = c(0,0),                 # no padding\n    breaks = seq(from = 0,\n                 to = 3000,\n                 by = 500))+\n  \n  scale_x_discrete(                   # discrete scale for x-axis (gender)\n    expand = c(0,0),                  # no padding\n    drop = FALSE,                     # show all factor levels (even if not in data)\n    na.translate = FALSE,             # remove NA outcomes from plot\n    labels = c(\"Died\", \"Recovered\"))+ # Change display of values\n    \n  \n  scale_fill_manual(                  # Manually specify fill (bar interior color)\n    values = c(\"m\" = \"violetred\",     # reference values in data to assign colors\n               \"f\" = \"aquamarine\"),\n    labels = c(\"m\" = \"Male\",          # re-label the legend (use \"=\" assignment to avoid mistakes)\n              \"f\" = \"Female\",\n              \"Missing\"),\n    name = \"Gender\",                  # title of legend\n    na.value = \"grey\"                 # assign a color for missing values\n  )+\n  labs(title = \"Adjustment of scales\") # Adjust the title of the fill legend\n\n\n\n\n\n\n\nWhen data are mapping to the plot axes, these too can be adjusted with scales commands. A common example is adjusting the display of an axis (e.g. y-axis) that is mapped to a column with continuous data.\nWe may want to adjust the breaks or display of the values in the ggplot using scale_y_continuous(). As noted above, use the argument breaks = to provide a sequence of values that will serve as “breaks” along the scale. These are the values at which numbers will display. To this argument, you can provide a c() vector containing the desired break values, or you can provide a regular sequence of numbers using the base R function seq(). This seq() function accepts to =, from =, and by =.\n\n# BASELINE - no scale adjustment\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = outcome, fill = gender))+\n  labs(title = \"Baseline - no scale adjustments\")\n\n# \nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = outcome, fill = gender))+\n  scale_y_continuous(\n    breaks = seq(\n      from = 0,\n      to = 3000,\n      by = 100)\n  )+\n  labs(title = \"Adjusted y-axis breaks\")\n\n\n\n\n\n\n\n\n\nIf your original data values are proportions, you can easily display them as percents with “%” by providing labels = scales::percent in your scales command, as shown below.\nWhile an alternative would be to convert the values to character and add a “%” character to the end, this approach will cause complications because your data will no longer be continuous numeric values.\n\n# Original y-axis proportions\n#############################\nlinelist %&gt;%                                   # start with linelist\n  group_by(hospital) %&gt;%                       # group data by hospital\n  summarise(                                   # create summary columns\n    n = n(),                                     # total number of rows in group\n    deaths = sum(outcome == \"Death\", na.rm=T),   # number of deaths in group\n    prop_death = deaths/n) %&gt;%                   # proportion deaths in group\n  ggplot(                                      # begin plotting\n    mapping = aes(\n      x = hospital,\n      y = prop_death))+ \n  geom_col()+\n  theme_minimal()+\n  labs(title = \"Display y-axis original proportions\")\n\n\n\n# Display y-axis proportions as percents\n########################################\nlinelist %&gt;%         \n  group_by(hospital) %&gt;% \n  summarise(\n    n = n(),\n    deaths = sum(outcome == \"Death\", na.rm=T),\n    prop_death = deaths/n) %&gt;% \n  ggplot(\n    mapping = aes(\n      x = hospital,\n      y = prop_death))+\n  geom_col()+\n  theme_minimal()+\n  labs(title = \"Display y-axis as percents (%)\")+\n  scale_y_continuous(\n    labels = scales::percent                    # display proportions as percents\n  )\n\n\n\n\n\n\n\n\n\n\nTo transform a continuous axis to log scale, add trans = \"log2\" to the scale command. For purposes of example, we create a data frame of regions with their respective preparedness_index and cumulative cases values.\n\nplot_data &lt;- data.frame(\n  region = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"),\n  preparedness_index = c(8.8, 7.5, 3.4, 3.6, 2.1, 7.9, 7.0, 5.6, 1.0),\n  cases_cumulative = c(15, 45, 80, 20, 21, 7, 51, 30, 1442)\n)\n\nplot_data\n\n  region preparedness_index cases_cumulative\n1      A                8.8               15\n2      B                7.5               45\n3      C                3.4               80\n4      D                3.6               20\n5      E                2.1               21\n6      F                7.9                7\n7      G                7.0               51\n8      H                5.6               30\n9      I                1.0             1442\n\n\nThe cumulative cases for region “I” are dramatically greater than all the other regions. In circumstances like this, you may elect to display the y-axis using a log scale so the reader can see differences between the regions with fewer cumulative cases.\n\n# Original y-axis\npreparedness_plot &lt;- ggplot(data = plot_data,  \n       mapping = aes(\n         x = preparedness_index,\n         y = cases_cumulative))+\n  geom_point(size = 2)+            # points for each region \n  geom_text(\n    mapping = aes(label = region),\n    vjust = 1.5)+                  # add text labels\n  theme_minimal()\n\npreparedness_plot                  # print original plot\n\n\n# print with y-axis transformed\npreparedness_plot+                   # begin with plot saved above\n  scale_y_continuous(trans = \"log2\") # add transformation for y-axis\n\n\n\n\n\n\n\n\n\n\n\nFill gradient scales can involve additional nuance. The defaults are usually quite pleasing, but you may want to adjust the values, cutoffs, etc.\nTo demonstrate how to adjust a continuous color scale, we’ll use a data set that contains the ages of cases and of sources in a contact tracing case.\n\ncase_source_relationships &lt;- rio::import(\"data/godata/relationships_clean.rds\") %&gt;% \n  select(source_age, target_age) \n\nBelow, we produce a “raster” heat tile density plot. Note how the fill scale is continuous.\n\ntrans_matrix &lt;- ggplot(\n    data = case_source_relationships,\n    mapping = aes(x = source_age, y = target_age))+\n  stat_density2d(\n    geom = \"raster\",\n    mapping = aes(fill = after_stat(density)),\n    contour = FALSE)+\n  theme_minimal()\n\nNow we show some variations on the fill scale:\n\ntrans_matrix\ntrans_matrix + scale_fill_viridis_c(option = \"plasma\")\n\n\n\n\n\n\n\nNow we show some examples of actually adjusting the break points of the scale:\n\nscale_fill_gradient() accepts two colors (high/low)\n\nscale_fill_gradientn() accepts a vector of any length of colors to values = (intermediate values will be interpolated)\n\nUse scales::rescale() to adjust how colors are positioned along the gradient; it rescales your vector of positions to be between 0 and 1.\n\n\ntrans_matrix + \n  scale_fill_gradient(     # 2-sided gradient scale\n    low = \"aquamarine\",    # low value\n    high = \"purple\",       # high value\n    na.value = \"grey\",     # value for NA\n    name = \"Density\")+     # Legend title\n  labs(title = \"Manually specify high/low colors\")\n\n# 3+ colors to scale\ntrans_matrix + \n  scale_fill_gradientn(    # 3-color scale (low/mid/high)\n    colors = c(\"blue\", \"yellow\",\"red\") # provide colors in vector\n  )+\n  labs(title = \"3-color scale\")\n\n# Use of rescale() to adjust placement of colors along scale\ntrans_matrix + \n  scale_fill_gradientn(    # provide any number of colors\n    colors = c(\"blue\", \"yellow\",\"red\", \"black\"),\n    values = scales::rescale(c(0, 0.05, 0.07, 0.10, 0.15, 0.20, 0.3, 0.5)) # positions for colors are rescaled between 0 and 1\n    )+\n  labs(title = \"Colors not evenly positioned\")\n\n# use of limits to cut-off values that get fill color\ntrans_matrix + \n  scale_fill_gradientn(    \n    colors = c(\"blue\", \"yellow\",\"red\"),\n    limits = c(0, 0.0002))+\n  labs(title = \"Restrict value limits, resulting in grey space\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore generally, if you want predefined palettes, you can use the scale_xxx_brewer or scale_xxx_viridis_y functions.\nThe ‘brewer’ functions can draw from colorbrewer.org palettes.\nThe ‘viridis’ functions draw from viridis (colourblind friendly!) palettes, which “provide colour maps that are perceptually uniform in both colour and black-and-white. They are also designed to be perceived by viewers with common forms of colour blindness.” (read more here and here). Define if the palette is discrete, continuous, or binned by specifying this at the end of the function (e.g. discrete is scale_xxx_viridis_d).\nIt is advised that you test your plot in this color blindness simulator. If you have a red/green color scheme, try a “hot-cold” (red-blue) scheme instead as described here\nHere is an example of using various color schemes.\n\nsymp_plot &lt;- linelist %&gt;%                                         # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %&gt;%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %&gt;%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %&gt;% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  theme(legend.position = \"bottom\")+\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n\nsymp_plot  # print with default colors\n\n#################################\n# print with manually-specified colors\nsymp_plot +\n  scale_fill_manual(\n    values = c(\"yes\" = \"black\",         # explicitly define colours\n               \"no\" = \"white\",\n               \"unknown\" = \"grey\"),\n    breaks = c(\"yes\", \"no\", \"unknown\"), # order the factors correctly\n    name = \"\"                           # set legend to no title\n\n  ) \n\n#################################\n# print with viridis discrete colors\nsymp_plot +\n  scale_fill_viridis_d(\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    name = \"\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanging the order that discrete variables appear in is often difficult to understand for people who are new to ggplot2 graphs. It’s easy to understand how to do this however once you understand how ggplot2 handles discrete variables under the hood. Generally speaking, if a discrete varaible is used, it is automatically converted to a factor type - which orders factors by alphabetical order by default. To handle this, you simply have to reorder the factor levels to reflect the order you would like them to appear in the chart. For more detailed information on how to reorder factor objects, see the factor section of the guide.\nWe can look at a common example using age groups - by default the 5-9 age group will be placed in the middle of the age groups (given alphanumeric order), but we can move it behind the 0-4 age group of the chart by releveling the factors.\n\nggplot(\n  data = linelist %&gt;% drop_na(age_cat5),                         # remove rows where age_cat5 is missing\n  mapping = aes(x = fct_relevel(age_cat5, \"5-9\", after = 1))) +  # relevel factor\n\n  geom_bar() +\n  \n  labs(x = \"Age group\", y = \"Number of hospitalisations\",\n       title = \"Total hospitalisations by age group\") +\n  \n  theme_minimal()\n\n\n\n\n\n\n\nThese are a collection of less common plot types, ggplot2 extensions, and advanced examples of some of the things you can do visualizing data in R.\n\n\nContour plots are helpful when you have many points that might cover each other (“overplotting”). The case-source data used above are again plotted, but more simply using stat_density2d() and stat_density2d_filled() to produce discrete contour levels - like a topographical map. Read more about the statistics here.\n\ncase_source_relationships %&gt;% \n  ggplot(aes(x = source_age, y = target_age))+\n  stat_density2d()+\n  geom_point()+\n  theme_minimal()+\n  labs(title = \"stat_density2d() + geom_point()\")\n\n\ncase_source_relationships %&gt;% \n  ggplot(aes(x = source_age, y = target_age))+\n  stat_density2d_filled()+\n  theme_minimal()+\n  labs(title = \"stat_density2d_filled()\")\n\n\n\n\n\n\n\n\n\n\nTo show the distributions on the edges of a geom_point() scatterplot, you can use the ggExtra package and its function ggMarginal(). Save your original ggplot as an object, then pass it to ggMarginal() as shown below. Here are the key arguments:\n\nYou must specify the type = as either “histogram”, “density” “boxplot”, “violin”, or “densigram”.\n\nBy default, marginal plots will appear for both axes. You can set margins = to “x” or “y” if you only want one.\n\nOther optional arguments include fill = (bar color), color = (line color), size = (plot size relative to margin size, so larger number makes the marginal plot smaller).\n\nYou can provide other axis-specific arguments to xparams = and yparams =. For example, to have different histogram bin sizes, as shown below.\n\nYou can have the marginal plots reflect groups (columns that have been assigned to color = in your ggplot() mapped aesthetics). If this is the case, set the ggMarginal() argument groupColour = or groupFill = to TRUE, as shown below.\nRead more at this vignette, in the R Graph Gallery or the function R documentation ?ggMarginal.\n\n# Install/load ggExtra\npacman::p_load(ggExtra)\n\n# Basic scatter plot of weight and age\nscatter_plot &lt;- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age)) +\n  labs(title = \"Scatter plot of weight and age\")\n\nTo add marginal histograms use type = \"histogram\". You can optionally set groupFill = TRUE to get stacked histograms.\n\n# with histograms\nggMarginal(\n  scatter_plot,                     # add marginal histograms\n  type = \"histogram\",               # specify histograms\n  fill = \"lightblue\",               # bar fill\n  xparams = list(binwidth = 10),    # other parameters for x-axis marginal\n  yparams = list(binwidth = 5))     # other parameters for y-axis marginal\n\n\n\n\nMarginal density plot with grouped/colored values:\n\n# Scatter plot, colored by outcome\n# Outcome column is assigned as color in ggplot. groupFill in ggMarginal set to TRUE\nscatter_plot_color &lt;- ggplot(data = linelist %&gt;% drop_na(gender))+\n  geom_point(mapping = aes(y = wt_kg, x = age, color = gender)) +\n  labs(title = \"Scatter plot of weight and age\")+\n  theme(legend.position = \"bottom\")\n\nggMarginal(scatter_plot_color, type = \"density\", groupFill = TRUE)\n\n\n\n\nSet the size = arguemnt to adjust the relative size of the marginal plot. Smaller number makes a larger marginal plot. You also set color =. Below are is a marginal boxplot, with demonstration of the margins = argument so it appears on only one axis:\n\n# with boxplot \nggMarginal(\n  scatter_plot,\n  margins = \"x\",      # only show x-axis marginal plot\n  type = \"boxplot\")   \n\n\n\n\n\n\n\n\nIn ggplot2, it is also possible to add text to plots. However, this comes with the notable limitation where text labels often clash with data points in a plot, making them look messy or hard to read. There is no ideal way to deal with this in the base package, but there is a ggplot2 add-on, known as ggrepel that makes dealing with this very simple!\nThe ggrepel package provides two new functions, geom_label_repel() and geom_text_repel(), which replace geom_label() and geom_text(). Simply use these functions instead of the base functions to produce neat labels. Within the function, map the aesthetics aes() as always, but include the argument label = to which you provide a column name containing the values you want to display (e.g. patient id, or name, etc.). You can make more complex labels by combining columns and newlines (\\n) within str_glue() as shown below.\nA few tips:\n\nUse min.segment.length = 0 to always draw line segments, or min.segment.length = Inf to never draw them\n\nUse size = outside of aes() to set text size\n\nUse force = to change the degree of repulsion between labels and their respective points (default is 1)\n\nInclude fill = within aes() to have label colored by value\n\nA letter “a” may appear in the legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ to remove it\n\n\nSee this is very in-depth tutorial for more.\n\npacman::p_load(ggrepel)\n\nlinelist %&gt;%                                               # start with linelist\n  group_by(hospital) %&gt;%                                   # group by hospital\n  summarise(                                               # create new dataset with summary values per hospital\n    n_cases = n(),                                           # number of cases per hospital\n    delay_mean = round(mean(days_onset_hosp, na.rm=T),1),    # mean delay per hospital\n  ) %&gt;% \n  ggplot(mapping = aes(x = n_cases, y = delay_mean))+      # send data frame to ggplot\n  geom_point(size = 2)+                                    # add points\n  geom_label_repel(                                        # add point labels\n    mapping = aes(\n      label = stringr::str_glue(\n        \"{hospital}\\n{n_cases} cases, {delay_mean} days\")  # how label displays\n      ), \n    size = 3,                                              # text size in labels\n    min.segment.length = 0)+                               # show all line segments                \n  labs(                                                    # add axes labels\n    title = \"Mean delay to admission, by hospital\",\n    x = \"Number of cases\",\n    y = \"Mean delay (days)\")\n\n\n\n\nYou can label only a subset of the data points - by using standard ggplot() syntax to provide different data = for each geom layer of the plot. Below, All cases are plotted, but only a few are labeled.\n\nggplot()+\n  # All points in grey\n  geom_point(\n    data = linelist,                                   # all data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    color = \"grey\",\n    alpha = 0.5)+                                              # grey and semi-transparent\n  \n  # Few points in black\n  geom_point(\n    data = linelist %&gt;% filter(days_onset_hosp &gt; 15),  # filtered data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    alpha = 1)+                                                # default black and not transparent\n  \n  # point labels for few points\n  geom_label_repel(\n    data = linelist %&gt;% filter(days_onset_hosp &gt; 15),  # filter the data for the labels\n    mapping = aes(\n      x = ht_cm,\n      y = wt_kg,\n      fill = outcome,                                          # label color by outcome\n      label = stringr::str_glue(\"Delay: {days_onset_hosp}d\")), # label created with str_glue()\n    min.segment.length = 0) +                                  # show line segments for all\n  \n  # remove letter \"a\" from inside legend boxes\n  guides(fill = guide_legend(override.aes = aes(color = NA)))+\n  \n  # axis labels\n  labs(\n    title = \"Cases with long delay to admission\",\n    y = \"weight (kg)\",\n    x = \"height(cm)\")\n\n\n\n\n\n\n\n\nHighlighting specific elements in a chart is a useful way to draw attention to a specific instance of a variable while also providing information on the dispersion of the full dataset. While this is not easily done in base ggplot2, there is an external package that can help to do this known as gghighlight. This is easy to use within the ggplot syntax.\nThe gghighlight package uses the gghighlight() function to achieve this effect. To use this function, supply a logical statement to the function - this can have quite flexible outcomes, but here we’ll show an example of the age distribution of cases in our linelist, highlighting them by outcome.\n\n# load gghighlight\nlibrary(gghighlight)\n\n# replace NA values with unknown in the outcome variable\nlinelist &lt;- linelist %&gt;%\n  mutate(outcome = replace_na(outcome, \"Unknown\"))\n\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  gghighlight::gghighlight(outcome == \"Death\")     # highlight instances where the patient has died.\n\n\n\n\nThis also works well with faceting functions - it allows the user to produce facet plots with the background data highlighted that doesn’t apply to the facet! Below we count cases by week and plot the epidemic curves by hospital (color = and facet_wrap() set to hospital column).\n\n# produce a histogram of all cases by age\nlinelist %&gt;% \n  count(week = lubridate::floor_date(date_hospitalisation, \"week\"),\n        hospital) %&gt;% \n  ggplot()+\n  geom_line(aes(x = week, y = n, color = hospital))+\n  theme_minimal()+\n  gghighlight::gghighlight() +                      # highlight instances where the patient has died\n  facet_wrap(~hospital)                              # make facets by outcome\n\n\n\n\n\n\n\nNote that properly aligning axes to plot from multiple datasets in the same plot can be difficult. Consider one of the following strategies:\n\nMerge the data prior to plotting, and convert to “long” format with a column reflecting the dataset\n\nUse cowplot or a similar package to combine two plots (see below)\n\n\n\n\n\nTwo packages that are very useful for combining plots are cowplot and patchwork. In this page we will mostly focus on cowplot, with occassional use of patchwork.\nHere is the online introduction to cowplot. You can read the more extensive documentation for each function online here. We will cover a few of the most common use cases and functions below.\nThe cowplot package works in tandem with ggplot2 - essentially, you use it to arrange and combine ggplots and their legends into compound figures. It can also accept base R graphics.\n\npacman::p_load(\n  tidyverse,      # data manipulation and visualisation\n  cowplot,        # combine plots\n  patchwork       # combine plots\n)\n\nWhile faceting is a convenient approach to plotting, sometimes its not possible to get the results you want from its relatively restrictive approach. Here, you may choose to combine plots by sticking them together into a larger plot. There are three well known packages that are great for this - cowplot, gridExtra, and patchwork. However, these packages largely do the same things, so we’ll focus on cowplot for this section.\n\n\nThe cowplot package has a fairly wide range of functions, but the easiest use of it can be achieved through the use of plot_grid(). This is effectively a way to arrange predefined plots in a grid formation. We can work through another example with the malaria dataset - here we can plot the total cases by district, and also show the epidemic curve over time.\n\nmalaria_data &lt;- rio::import(\"data/malaria_facility_count_data.rds\")\n\n# bar chart of total cases by district\np1 &lt;- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"District\",\n    y = \"Total number of cases\",\n    title = \"Total malaria cases by district\"\n  ) +\n  theme_minimal()\n\n# epidemic curve over time\np2 &lt;- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1) +\n  labs(\n    x = \"Date of data submission\",\n    y =  \"number of cases\"\n  ) +\n  theme_minimal()\n\ncowplot::plot_grid(p1, p2,\n                  # 1 column and two rows - stacked on top of each other\n                   ncol = 1,\n                   nrow = 2,\n                   # top plot is 2/3 as tall as second\n                   rel_heights = c(2, 3))\n\n\n\n\n\n\n\nIf your plots have the same legend, combining them is relatively straight-forward. Simple use the cowplot approach above to combine the plots, but remove the legend from one of them (de-duplicate).\nIf your plots have different legends, you must use an alternative approach:\n\nCreate and save your plots without legends using theme(legend.position = \"none\")\n\nExtract the legends from each plot using get_legend() as shown below - but extract legends from the plots modified to actually show the legend\n\nCombine the legends into a legends panel\n\nCombine the plots and legends panel\n\nFor demonstration we show the two plots separately, and then arranged in a grid with their own legends showing (ugly and inefficient use of space):\n\np1 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, outcome) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  labs(title = \"Cases by outcome\")\n\n\np2 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, age_cat) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(axis.text.y = element_blank())+\n  labs(title = \"Cases by age\")\n\nHere is how the two plots look when combined using plot_grid() without combining their legends:\n\ncowplot::plot_grid(p1, p2, rel_widths = c(0.3))\n\n\n\n\nAnd now we show how to combine the legends. Essentially what we do is to define each plot without its legend (theme(legend.position = \"none\"), and then we define each plot’s legend separately, using the get_legend() function from cowplot. When we extract the legend from the saved plot, we need to add + the legend back in, including specifying the placement (“right”) and smaller adjustments for alignment of the legends and their titles. Then, we combine the legends together vertically, and then combine the two plots with the newly-combined legends. Voila!\n\n# Define plot 1 without legend\np1 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, outcome) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(legend.position = \"none\")+\n  labs(title = \"Cases by outcome\")\n\n\n# Define plot 2 without legend\np2 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, age_cat) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank()\n  )+\n  labs(title = \"Cases by age\")\n\n\n# extract legend from p1 (from p1 + legend)\nleg_p1 &lt;- cowplot::get_legend(p1 +\n                                theme(legend.position = \"right\",        # extract vertical legend\n                                      legend.justification = c(0,0.5))+ # so legends  align\n                                labs(fill = \"Outcome\"))                 # title of legend\n# extract legend from p2 (from p2 + legend)\nleg_p2 &lt;- cowplot::get_legend(p2 + \n                                theme(legend.position = \"right\",         # extract vertical legend   \n                                      legend.justification = c(0,0.5))+  # so legends align\n                                labs(fill = \"Age Category\"))             # title of legend\n\n# create a blank plot for legend alignment\n#blank_p &lt;- patchwork::plot_spacer() + theme_void()\n\n# create legends panel, can be one on top of the other (or use spacer commented above)\nlegends &lt;- cowplot::plot_grid(leg_p1, leg_p2, nrow = 2, rel_heights = c(.3, .7))\n\n# combine two plots and the combined legends panel\ncombined &lt;- cowplot::plot_grid(p1, p2, legends, ncol = 3, rel_widths = c(.4, .4, .2))\n\ncombined  # print\n\n\n\n\nThis solution was learned from this post with a minor fix to align legends from this post.\nTIP: Fun note - the “cow” in cowplot comes from the creator’s name - Claus O. Wilke.\n\n\n\nYou can inset one plot in another using cowplot. Here are things to be aware of:\n\nDefine the main plot with theme_half_open() from cowplot; it may be best to have the legend either on top or bottom\n\nDefine the inset plot. Best is to have a plot where you do not need a legend. You can remove plot theme elements with element_blank() as shown below.\n\nCombine them by applying ggdraw() to the main plot, then adding draw_plot() on the inset plot and specifying the coordinates (x and y of lower left corner), height and width as proportion of the whole main plot.\n\n\n# Define main plot\nmain_plot &lt;- ggplot(data = linelist)+\n  geom_histogram(aes(x = date_onset, fill = hospital))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+ \n  theme_half_open()+\n  theme(legend.position = \"bottom\")+\n  labs(title = \"Epidemic curve and outcomes by hospital\")\n\n\n# Define inset plot\ninset_plot &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, outcome) %&gt;% \n  ggplot()+\n    geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n    scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n    coord_flip()+\n    theme_minimal()+\n    theme(legend.position = \"none\",\n          axis.title.y = element_blank())+\n    labs(title = \"Cases by outcome\") \n\n\n# Combine main with inset\ncowplot::ggdraw(main_plot)+\n     draw_plot(inset_plot,\n               x = .6, y = .55,    #x = .07, y = .65,\n               width = .4, height = .4)\n\n\n\n\nThis technique is explained more in these two vignettes:\nWilke lab\ndraw_plot() documentation"
  },
  {
    "objectID": "readings/ggplot-basics.html#basics-of-ggplot",
    "href": "readings/ggplot-basics.html#basics-of-ggplot",
    "title": "Data visualization",
    "section": "",
    "text": "“Grammar of graphics” - ggplot2\nPlotting with ggplot2 is based on “adding” plot layers and design elements on top of one another, with each command added to the previous ones with a plus symbol (+). The result is a multi-layer plot object that can be saved, modified, printed, exported, etc.\n\nThe idea behind the Grammar of Graphics it is that you can build every graph from the same 3 components: (1) a data set, (2) a coordinate system, and (3) geoms — i.e. visual marks that represent data points [source]\n\nggplot objects can be highly complex, but the basic order of layers will usually look like this:\n\nBegin with the baseline ggplot() command - this “opens” the ggplot and allow subsequent functions to be added with +. Typically the dataset is also specified in this command\n\nAdd “geom” layers - these functions visualize the data as geometries (shapes), e.g. as a bar graph, line plot, scatter plot, histogram (or a combination!). These functions all start with geom_ as a prefix.\n\nAdd design elements to the plot such as axis labels, title, fonts, sizes, color schemes, legends, or axes rotation\n\nIn code this amounts to the basic template:\n\nggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) +  &lt;GEOM_FUNCTION&gt;()\n\nWe can further expand this template to include aspects of the visualization such as theme and labels:\n\n# plot data from my_data columns as red points\nggplot(data = my_data)+                   # use the dataset \"my_data\"\n  geom_point(                             # add a layer of points (dots)\n    mapping = aes(x = col1, y = col2),    # \"map\" data column to axes\n    color = \"red\")+                       # other specification for the geom\n  labs()+                                 # here you add titles, axes labels, etc.\n  theme()                                 # here you adjust color, font, size etc of non-data plot elements (axes, title, etc.) \n\nWe will explain each component in the sections below."
  },
  {
    "objectID": "readings/ggplot-basics.html#ggplot",
    "href": "readings/ggplot-basics.html#ggplot",
    "title": "Data visualization",
    "section": "",
    "text": "The opening command of any ggplot2 plot is ggplot(). This command simply creates a blank canvas upon which to add layers. It “opens” the way for further layers to be added with a + symbol.\nTypically, the command ggplot() includes the data = argument for the plot. This sets the default dataset to be used for subsequent layers of the plot.\nThis command will end with a + after its closing parentheses. This leaves the command “open”. The ggplot will only execute/appear when the full command includes a final layer without a + at the end.\n\n# This will create plot that is a blank canvas\nggplot(data = linelist)"
  },
  {
    "objectID": "readings/ggplot-basics.html#geoms",
    "href": "readings/ggplot-basics.html#geoms",
    "title": "Data visualization",
    "section": "",
    "text": "A blank canvas is certainly not sufficient - we need to create geometries (shapes) from our data (e.g. bar plots, histograms, scatter plots, box plots).\nThis is done by adding layers “geoms” to the initial ggplot() command. There are many ggplot2 functions that create “geoms”. Each of these functions begins with “geom_”, so we will refer to them generically as geom_XXXX(). There are over 40 geoms in ggplot2 and many others created by fans. View them at the ggplot2 gallery. Some common geoms are listed below:\n\nHistograms - geom_histogram()\n\nBar charts - geom_bar() or geom_col() (see “Bar plot” section)\n\nBox plots - geom_boxplot()\n\nPoints (e.g. scatter plots) - geom_point()\n\nLine graphs - geom_line() or geom_path()\n\nTrend lines - geom_smooth()\n\nIn one plot you can display one or multiple geoms. Each is added to previous ggplot2 commands with a +, and they are plotted sequentially such that later geoms are plotted on top of previous ones."
  },
  {
    "objectID": "readings/ggplot-basics.html#ggplot_basics_mapping",
    "href": "readings/ggplot-basics.html#ggplot_basics_mapping",
    "title": "Data visualization",
    "section": "",
    "text": "Most geom functions must be told what to use to create their shapes - so you must tell them how they should map (assign) columns in your data to components of the plot like the axes, shape colors, shape sizes, etc. For most geoms, the essential components that must be mapped to columns in the data are the x-axis, and (if necessary) the y-axis.\nThis “mapping” occurs with the mapping = argument. The mappings you provide to mapping must be wrapped in the aes() function, so you would write something like mapping = aes(x = col1, y = col2), as shown below.\nBelow, in the ggplot() command the data are set as the case linelist. In the mapping = aes() argument the column age is mapped to the x-axis, and the column wt_kg is mapped to the y-axis.\nAfter a +, the plotting commands continue. A shape is created with the “geom” function geom_point(). This geom inherits the mappings from the ggplot() command above - it knows the axis-column assignments and proceeds to visualize those relationships as points on the canvas.\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\n\n\n\n\nAs another example, the following commands utilize the same data, a slightly different mapping, and a different geom. The geom_histogram() function only requires a column mapped to the x-axis, as the counts y-axis is generated automatically.\n\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\n\n\n\n\n\nIn ggplot terminology a plot “aesthetic” has a specific meaning. It refers to a visual property of plotted data. Note that “aesthetic” here refers to the data being plotted in geoms/shapes - not the surrounding display such as titles, axis labels, background color, that you might associate with the word “aesthetics” in common English. In ggplot those details are called “themes” and are adjusted within a theme() command (see this section).\nTherefore, plot object aesthetics can be colors, sizes, transparencies, placement, etc. of the plotted data. Not all geoms will have the same aesthetic options, but many can be used by most geoms. Here are some examples:\n\nshape = Display a point with geom_point() as a dot, star, triangle, or square…\n\nfill = The interior color (e.g. of a bar or boxplot)\n\ncolor = The exterior line of a bar, boxplot, etc., or the point color if using geom_point()\n\nsize = Size (e.g. line thickness, point size)\n\nalpha = Transparency (1 = opaque, 0 = invisible)\n\nbinwidth = Width of histogram bins\n\nwidth = Width of “bar plot” columns\n\nlinetype = Line type (e.g. solid, dashed, dotted)\n\nThese plot object aesthetics can be assigned values in two ways:\n\nAssigned a static value (e.g. color = \"blue\") to apply across all plotted observations\n\nAssigned to a column of the data (e.g. color = hospital) such that display of each observation depends on its value in that column\n\n\n\n\nIf you want the plot object aesthetic to be static, that is - to be the same for every observation in the data, you write its assignment within the geom but outside of any mapping = aes() statement. These assignments could look like size = 1 or color = \"blue\". Here are two examples:\n\nIn the first example, the mapping = aes() is in the ggplot() command and the axes are mapped to age and weight columns in the data. The plot aesthetics color =, size =, and alpha = (transparency) are assigned to static values. For clarity, this is done in the geom_point() function, as you may add other geoms afterward that would take different values for their plot aesthetics.\n\nIn the second example, the histogram requires only the x-axis mapped to a column. The histogram binwidth =, color =, fill = (internal color), and alpha = are again set within the geom to static values.\n\n\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # set data and axes mapping\n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)         # set static point aesthetics\n\n# histogram\nggplot(data = linelist, mapping = aes(x = age))+       # set data and axes\n  geom_histogram(              # display histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"blue\",               # bin interior color\n    alpha = 0.1)                 # bin transparency\n\n\n\n\n\n\n\n\n\n\nThe alternative is to scale the plot object aesthetic by the values in a column. In this approach, the display of this aesthetic will depend on that observation’s value in that column of the data. If the column values are continuous, the display scale (legend) for that aesthetic will be continuous. If the column values are discrete, the legend will display each value and the plotted data will appear as distinctly “grouped” (read more in the grouping section of this page).\nTo achieve this, you map that plot aesthetic to a column name (not in quotes). This must be done within a mapping = aes() function (note: there are several places in the code you can make these mapping assignments, as discussed below).\nTwo examples are below.\n\nIn the first example, the color = aesthetic (of each point) is mapped to the column age - and a scale has appeared in a legend! For now just note that the scale exists - we will show how to modify it in later sections.\n\nIn the second example two new plot aesthetics are also mapped to columns (color = and size =), while the plot aesthetics shape = and alpha = are mapped to static values outside of any mapping = aes() function.\n\n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age)\n       )+     # map color to age\n  geom_point()         # display data as points \n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age,       # map color to age\n         size = age))+      # map size to age\n  geom_point(             # display data as points\n    shape = \"diamond\",      # points display as diamonds\n    alpha = 0.3)            # point transparency at 30%\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAxes assignments are always assigned to columns in the data (not to static values), and this is always done within mapping = aes().\n\n\nIt becomes important to keep track of your plot layers and aesthetics when making more complex plots - for example plots with multiple geoms. In the example below, the size = aesthetic is assigned twice - once for geom_point() and once for geom_smooth() - both times as a static value.\n\nggplot(data = linelist,\n       mapping = aes(           # map aesthetics to columns\n         x = age,\n         y = wt_kg,\n         color = age_years)\n       ) + \n  geom_point(                   # add points for each row of data\n    size = 1,\n    alpha = 0.5) +  \n  geom_smooth(                  # add a trend line \n    method = \"lm\",              # with linear method\n    size = 2)                   # size (width of line) of 2\n\n\n\n\n\n\n\nAesthetic mapping within mapping = aes() can be written in several places in your plotting commands and can even be written more than once. This can be written in the top ggplot() command, and/or for each individual geom beneath. The nuances include:\n\nMapping assignments made in the top ggplot() command will be inherited as defaults across any geom below, like how x = and y = are inherited\nMapping assignments made within one geom apply only to that geom\n\nLikewise, data = specified in the top ggplot() will apply by default to any geom below, but you could also specify data for each geom (but this is more difficult).\nThus, each of the following commands will create the same plot:\n\n# These commands will produce the exact same plot\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))\n\nggplot()+\n  geom_histogram(data = linelist, mapping = aes(x = age))\n\n\n\n\nYou can easily group the data and “plot by group”. In fact, you have already done this!\nAssign the “grouping” column to the appropriate plot aesthetic, within a mapping = aes(). Above, we demonstrated this using continuous values when we assigned point size = to the column age. However this works the same way for discrete/categorical columns.\nFor example, if you want points to be displayed by gender, you would set mapping = aes(color = gender). A legend automatically appears. This assignment can be made within the mapping = aes() in the top ggplot() command (and be inherited by the geom), or it could be set in a separate mapping = aes() within the geom. Both approaches are shown below:\n\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)\n\n\n\n\n\n# This alternative code produces the same plot\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg))+\n  geom_point(\n    mapping = aes(color = gender),\n    alpha = 0.5)\n\nNote that depending on the geom, you will need to use different arguments to group the data. For geom_point() you will most likely use color =, shape = or size =. Whereas for geom_bar() you are more likely to use fill =. This just depends on the geom and what plot aesthetic you want to reflect the groupings.\nFor your information - the most basic way of grouping the data is by using only the group = argument within mapping = aes(). However, this by itself will not change the colors, fill, or shapes. Nor will it create a legend. Yet the data are grouped, so statistical displays may be affected."
  },
  {
    "objectID": "readings/ggplot-basics.html#ggplot_basics_facet",
    "href": "readings/ggplot-basics.html#ggplot_basics_facet",
    "title": "Data visualization",
    "section": "",
    "text": "Facets, or “small-multiples”, are used to split one plot into a multi-panel figure, with one panel (“facet”) per group of data. The same type of plot is created multiple times, each one using a sub-group of the same dataset.\nFaceting is a functionality that comes with ggplot2, so the legends and axes of the facet “panels” are automatically aligned. We would need to use other packages to combine completely different plots (cowplot and patchwork) into one figure.\nFaceting is done with one of the following ggplot2 functions:\n\nfacet_wrap() To show a different panel for each level of a single variable. One example of this could be showing a different epidemic curve for each hospital in a region. Facets are ordered alphabetically, unless the variable is a factor with other ordering defined.\n\n\n\nYou can invoke certain options to determine the layout of the facets, e.g. nrow = 1 or ncol = 1 to control the number of rows or columns that the faceted plots are arranged within.\n\n\nfacet_grid() This is used when you want to bring a second variable into the faceting arrangement. Here each panel of a grid shows the intersection between values in two columns. For example, epidemic curves for each hospital-age group combination with hospitals along the top (columns) and age groups along the sides (rows).\n\n\n\nnrow and ncol are not relevant, as the subgroups are presented in a grid\n\nEach of these functions accept a formula syntax to specify the column(s) for faceting. Both accept up to two columns, one on each side of a tilde ~.\n\nFor facet_wrap() most often you will write only one column preceded by a tilde ~ like facet_wrap(~hospital). However you can write two columns facet_wrap(outcome ~ hospital) - each unique combination will display in a separate panel, but they will not be arranged in a grid. The headings will show combined terms and these won’t be specific logic to the columns vs. rows. If you are providing only one faceting variable, a period . is used as a placeholder on the other side of the formula - see the code examples.\nFor facet_grid() you can also specify one or two columns to the formula (grid rows ~ columns). If you only want to specify one, you can place a period . on the other side of the tilde like facet_grid(. ~ hospital) or facet_grid(hospital ~ .).\n\nFacets can quickly contain an overwhelming amount of information - its good to ensure you don’t have too many levels of each variable that you choose to facet by. Here are some quick examples with the malaria dataset which consists of daily case counts of malaria for facilities, by age group.\nBelow we import and do some quick modifications for simplicity:\n\n# These data are daily counts of malaria cases, by facility-day\nmalaria_data &lt;- import(\"data/malaria_facility_count_data.rds\") %&gt;%  # import\n  select(-submitted_date, -Province, -newid)                                 # remove unneeded columns\n\nThe first 50 rows of the malaria data are below. Note there is a column malaria_tot, but also columns for counts by age group (these will be used in the second, facet_grid() example).\n\n\n# A tibble: 50 × 7\n   location_name data_date  District `malaria_rdt_0-4` `malaria_rdt_5-14`\n   &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;                &lt;int&gt;              &lt;int&gt;\n 1 Facility 1    2020-08-11 Spring                  11                 12\n 2 Facility 2    2020-08-11 Bolo                    11                 10\n 3 Facility 3    2020-08-11 Dingo                    8                  5\n 4 Facility 4    2020-08-11 Bolo                    16                 16\n 5 Facility 5    2020-08-11 Bolo                     9                  2\n 6 Facility 6    2020-08-11 Dingo                    3                  1\n 7 Facility 6    2020-08-10 Dingo                    4                  0\n 8 Facility 5    2020-08-10 Bolo                    15                 14\n 9 Facility 5    2020-08-09 Bolo                    11                 11\n10 Facility 5    2020-08-08 Bolo                    19                 15\n# ℹ 40 more rows\n# ℹ 2 more variables: malaria_rdt_15 &lt;int&gt;, malaria_tot &lt;int&gt;\n\n\n\n\nFor the moment, let’s focus on the columns malaria_tot and District. Ignore the age-specific count columns for now. We will plot epidemic curves with geom_col(), which produces a column for each day at the specified y-axis height given in column malaria_tot (the data are already daily counts, so we use geom_col() - see the “Bar plot” section below).\nWhen we add the command facet_wrap(), we specify a tilde and then the column to facet on (District in this case). You can place another column on the left side of the tilde, - this will create one facet for each combination - but we recommend you do this with facet_grid() instead. In this use case, one facet is created for each unique value of District.\n\n# A plot with facets by district\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district\") +\n  facet_wrap(~District)                       # the facets are created\n\n\n\n\n\n\n\nWe can use a facet_grid() approach to cross two variables. Let’s say we want to cross District and age. Well, we need to do some data transformations on the age columns to get these data into ggplot-preferred “long” format. The age groups all have their own columns - we want them in a single column called age_group and another called num_cases.\n\nmalaria_age &lt;- malaria_data %&gt;%\n  select(-malaria_tot) %&gt;% \n  pivot_longer(\n    cols = c(starts_with(\"malaria_rdt_\")),  # choose columns to pivot longer\n    names_to = \"age_group\",      # column names become age group\n    values_to = \"num_cases\"      # values to a single column (num_cases)\n  ) %&gt;%\n  mutate(\n    age_group = str_replace(age_group, \"malaria_rdt_\", \"\"),\n    age_group = forcats::fct_relevel(age_group, \"5-14\", after = 1))\n\nNow the first 50 rows of data look like this:\n\n\n# A tibble: 50 × 5\n   location_name data_date  District age_group num_cases\n   &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;    &lt;fct&gt;         &lt;int&gt;\n 1 Facility 1    2020-08-11 Spring   0-4              11\n 2 Facility 1    2020-08-11 Spring   5-14             12\n 3 Facility 1    2020-08-11 Spring   15               23\n 4 Facility 2    2020-08-11 Bolo     0-4              11\n 5 Facility 2    2020-08-11 Bolo     5-14             10\n 6 Facility 2    2020-08-11 Bolo     15                5\n 7 Facility 3    2020-08-11 Dingo    0-4               8\n 8 Facility 3    2020-08-11 Dingo    5-14              5\n 9 Facility 3    2020-08-11 Dingo    15                5\n10 Facility 4    2020-08-11 Bolo     0-4              16\n# ℹ 40 more rows\n\n\nWhen you pass the two variables to facet_grid(), easiest is to use formula notation (e.g. x ~ y) where x is rows and y is columns. Here is the plot, using facet_grid() to show the plots for each combination of the columns age_group and District.\n\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group)\n\n\n\n\n\n\n\nThe axes scales displayed when faceting are by default the same (fixed) across all the facets. This is helpful for cross-comparison, but not always appropriate.\nWhen using facet_wrap() or facet_grid(), we can add scales = \"free_y\" to “free” or release the y-axes of the panels to scale appropriately to their data subset. This is particularly useful if the actual counts are small for one of the subcategories and trends are otherwise hard to see. Instead of “free_y” we can also write “free_x” to do the same for the x-axis (e.g. for dates) or “free” for both axes. Note that in facet_grid, the y scales will be the same for facets in the same row, and the x scales will be the same for facets in the same column.\nWhen using facet_grid only, we can add space = \"free_y\" or space = \"free_x\" so that the actual height or width of the facet is weighted to the values of the figure within. This only works if scales = \"free\" (y or x) is already applied.\n\n# Free y-axis\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district - 'free' x and y axes\") +\n  facet_wrap(~District, scales = \"free\")        # the facets are created"
  },
  {
    "objectID": "readings/ggplot-basics.html#exporting-plots",
    "href": "readings/ggplot-basics.html#exporting-plots",
    "title": "Data visualization",
    "section": "",
    "text": "Exporting ggplots is made easy with the ggsave() function from ggplot2. It can work in two ways, either:\n\nSpecify the name of the plot object, then the file path and name with extension\n\nFor example: ggsave(my_plot, \"plots/my_plot.png\"))\n\n\nRun the command with only a file path, to save the last plot that was printed\n\nFor example: ggsave(\"plots/my_plot.png\"))\n\n\nYou can export as png, pdf, jpeg, tiff, bmp, svg, or several other file types, by specifying the file extension in the file path.\nYou can also specify the arguments width =, height =, and units = (either “in”, “cm”, or “mm”). You can also specify dpi = with a number for plot resolution (e.g. 300). See the function details by entering ?ggsave or reading the documentation online."
  },
  {
    "objectID": "readings/ggplot-basics.html#labels",
    "href": "readings/ggplot-basics.html#labels",
    "title": "Data visualization",
    "section": "",
    "text": "Surely you will want to add or adjust the plot’s labels. These are most easily done within the labs() function which is added to the plot with + just as the geoms were.\nWithin labs() you can provide character strings to these arguements:\n\nx = and y = The x-axis and y-axis title (labels)\n\ntitle = The main plot title\n\nsubtitle = The subtitle of the plot, in smaller text below the title\n\ncaption = The caption of the plot, in bottom-right by default\n\nHere is a plot we made earlier, but with nicer labels:\n\nage_by_wt &lt;- ggplot(\n  data = linelist,   # set data\n  mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()+           # display data as points\n  labs(\n    title = \"Age and weight distribution\",\n    subtitle = \"Fictional Ebola outbreak, 2014\",\n    x = \"Age in years\",\n    y = \"Weight in kilos\",\n    color = \"Age\",\n    caption = stringr::str_glue(\"Data as of {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt\n\n\n\n\nNote how in the caption assignment we used str_glue() from the stringr package to implant dynamic R code within the string text. The caption will show the “Data as of:” date that reflects the maximum hospitalization date in the linelist."
  },
  {
    "objectID": "readings/ggplot-basics.html#plot-continuous-data",
    "href": "readings/ggplot-basics.html#plot-continuous-data",
    "title": "Data visualization",
    "section": "",
    "text": "Throughout this page, you have already seen many examples of plotting continuous data. Here we briefly consolidate these and present a few variations.\nVisualisations covered here include:\n\nPlots for one continuous variable:\n\nHistogram, a classic graph to present the distribution of a continuous variable.\nBox plot (also called box and whisker), to show the 25th, 50th, and 75th percentiles, tail ends of the distribution, and outliers (important limitations).\n\nJitter plot, to show all values as points that are ‘jittered’ so they can (mostly) all be seen, even where two have the same value.\n\nViolin plot, show the distribution of a continuous variable based on the symmetrical width of the ‘violin’.\nSina plot, are a combination of jitter and violin plots, where individual points are shown but in the symmetrical shape of the distribution (via ggforce package).\n\n\nScatter plot for two continuous variables.\n\nHeat plots for three continuous variables\n\n\n\nHistograms may look like bar charts, but are distinct because they measure the distribution of a continuous variable. There are no spaces between the “bars”, and only one column is provided to geom_histogram().\nBelow is code for generating histograms, which group continuous data into ranges and display in adjacent bars of varying height. This is done using geom_histogram(). See the “Bar plot” section of the ggplot basics page to understand difference between geom_histogram(), geom_bar(), and geom_col().\nWe will show the distribution of ages of cases. Within mapping = aes() specify which column you want to see the distribution of. You can assign this column to either the x or the y axis.\nThe rows will be assigned to “bins” based on their numeric age, and these bins will be graphically represented by bars. If you specify a number of bins with the bins = plot aesthetic, the break points are evenly spaced between the minimum and maximum values of the histogram. If bins = is unspecified, an appropriate number of bins will be guessed and this message displayed after the plot:\n## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\nIf you do not want to specify a number of bins to bins =, you could alternatively specify binwidth = in the units of the axis. We give a few examples showing different bins and bin widths:\n\n# A) Regular histogram\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram()+\n  labs(title = \"A) Default histogram (30 bins)\")\n\n# B) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 50)+\n  labs(title = \"B) Set to 50 bins\")\n\n# C) Fewer bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 5)+\n  labs(title = \"C) Set to 5 bins\")\n\n\n# D) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(binwidth = 1)+\n  labs(title = \"D) binwidth of 1\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo get smoothed proportions, you can use geom_density():\n\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Proportional density\")\n\n# Stacked frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_density(size = 2, alpha = 0.2, position = \"stack\")+\n  labs(title = \"'Stacked' proportional densities\")\n\n\n\n\n\n\n\nTo get a “stacked” histogram (of a continuous column of data), you can do one of the following:\n\nUse geom_histogram() with the fill = argument within aes() and assigned to the grouping column, or\n\nUse geom_freqpoly(), which is likely easier to read (you can still set binwidth =)\n\nTo see proportions of all values, set the y = after_stat(density) (use this syntax exactly - not changed for your data). Note: these proportions will show per group.\n\nEach is shown below (*note use of color = vs. fill = in each):\n\n# \"Stacked\" histogram\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_histogram(binwidth = 2)+\n  labs(title = \"'Stacked' histogram\")\n\n# Frequency \nggplot(data = linelist, mapping = aes(x = age, color = gender)) +\n  geom_freqpoly(binwidth = 2, size = 2)+\n  labs(title = \"Freqpoly\")\n\n# Frequency with proportion axis\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), color = gender)) +\n  geom_freqpoly(binwidth = 5, size = 2)+\n  labs(title = \"Proportional freqpoly\")\n\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), fill = gender)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Proportional, smoothed with geom_density()\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to have some fun, try geom_density_ridges from the ggridges package (vignette here.\nRead more in detail about histograms at the tidyverse page on geom_histogram().\n\n\n\nBox plots are common, but have important limitations. They can obscure the actual distribution - e.g. a bi-modal distribution. See this R graph gallery and this data-to-viz article for more details. However, they do nicely display the inter-quartile range and outliers - so they can be overlaid on top of other types of plots that show the distribution in more detail.\nBelow we remind you of the various components of a boxplot:\n\n\n\n\n\n\n\n\n\nWhen using geom_boxplot() to create a box plot, you generally map only one axis (x or y) within aes(). The axis specified determines if the plots are horizontal or vertical.\nIn most geoms, you create a plot per group by mapping an aesthetic like color = or fill = to a column within aes(). However, for box plots achieve this by assigning the grouping column to the un-assigned axis (x or y). Below is code for a boxplot of all age values in the dataset, and second is code to display one box plot for each (non-missing) gender in the dataset. Note that NA (missing) values will appear as a separate box plot unless removed. In this example we also set the fill to the column outcome so each plot is a different color - but this is not necessary.\n\n# A) Overall boxplot\nggplot(data = linelist)+  \n  geom_boxplot(mapping = aes(y = age))+   # only y axis mapped (not x)\n  labs(title = \"A) Overall boxplot\")\n\n# B) Box plot by group\nggplot(data = linelist, mapping = aes(y = age, x = gender, fill = gender)) + \n  geom_boxplot()+                     \n  theme(legend.position = \"none\")+   # remove legend (redundant)\n  labs(title = \"B) Boxplot by gender\")      \n\n\n\n\n\n\n\n\n\n\nBelow is code for creating violin plots (geom_violin) and jitter plots (geom_jitter) to show distributions. You can specify that the fill or color is also determined by the data, by inserting these options within aes().\n\n# A) Jitter plot by group\nggplot(data = linelist %&gt;% drop_na(outcome),      # remove missing values\n       mapping = aes(y = age,                     # Continuous variable\n           x = outcome,                           # Grouping variable\n           color = outcome))+                     # Color variable\n  geom_jitter()+                                  # Create the violin plot\n  labs(title = \"A) jitter plot by gender\")     \n\n\n\n# B) Violin plot by group\nggplot(data = linelist %&gt;% drop_na(outcome),       # remove missing values\n       mapping = aes(y = age,                      # Continuous variable\n           x = outcome,                            # Grouping variable\n           fill = outcome))+                       # fill variable (color)\n  geom_violin()+                                   # create the violin plot\n  labs(title = \"B) violin plot by gender\")    \n\n\n\n\n\n\n\nYou can combine the two using the geom_sina() function from the ggforce package. The sina plots the jitter points in the shape of the violin plot. When overlaid on the violin plot (adjusting the transparencies) this can be easier to visually interpret.\n\n# A) Sina plot by group\nggplot(\n  data = linelist %&gt;% drop_na(outcome), \n  aes(y = age,           # numeric variable\n      x = outcome)) +    # group variable\n  geom_violin(\n    aes(fill = outcome), # fill (color of violin background)\n    color = \"white\",     # white outline\n    alpha = 0.2)+        # transparency\n  geom_sina(\n    size=1,                # Change the size of the jitter\n    aes(color = outcome))+ # color (color of dots)\n  scale_fill_manual(       # Define fill for violin background by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  scale_color_manual(      # Define colours for points by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  theme_minimal() +                                # Remove the gray background\n  theme(legend.position = \"none\") +                # Remove unnecessary legend\n  labs(title = \"B) violin and sina plot by gender, with extra formatting\")      \n\n\n\n\n\n\n\nFollowing similar syntax, geom_point() will allow you to plot two continuous variables against each other in a scatter plot. This is useful for showing actual values rather than their distributions. A basic scatter plot of age vs weight is shown in (A). In (B) we again use facet_grid() to show the relationship between two continuous variables in the linelist.\n\n# Basic scatter plot of weight and age\nggplot(data = linelist, \n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Scatter plot of weight and age\")\n\n# Scatter plot of weight and age by gender and Ebola outcome\nggplot(data = linelist %&gt;% drop_na(gender, outcome), # filter retains non-missing gender/outcome\n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Scatter plot of weight and age faceted by gender and outcome\")+\n  facet_grid(gender ~ outcome) \n\n\n\n\n\n\n\n\n\n\nYou can display three continuous variables by utilizing the fill = argument to create a heat plot. The color of each “cell” will reflect the value of the third continuous column of data. There are ways to make 3D plots in R, but for applied epidemiology these are often difficult to interpret and therefore less useful for decision-making."
  },
  {
    "objectID": "readings/ggplot-basics.html#plot-categorical-data",
    "href": "readings/ggplot-basics.html#plot-categorical-data",
    "title": "Data visualization",
    "section": "",
    "text": "Categorical data can be character values, could be logical (TRUE/FALSE), or factors.\n\n\n\n\nThe first thing to understand about your categorical data is whether it exists as raw observations like a linelist of cases, or as a summary or aggregate data frame that holds counts or proportions. The state of your data will impact which plotting function you use:\n\nIf your data are raw observations with one row per observation, you will likely use geom_bar()\n\nIf your data are already aggregated into counts or proportions, you will likely use geom_col()\n\n\n\n\nNext, examine the class of the columns you want to plot. We look at hospital, first with class() from base R, and with tabyl() from janitor.\n\n# View class of hospital column - we can see it is a character\nclass(linelist$hospital)\n\n[1] \"character\"\n\n# Look at values and proportions within hospital column\nlinelist %&gt;% \n  tabyl(hospital)\n\n                             hospital    n    percent\n                     Central Hospital  454 0.07710598\n                    Military Hospital  896 0.15217391\n                              Missing 1469 0.24949049\n                                Other  885 0.15030571\n                        Port Hospital 1762 0.29925272\n St. Mark's Maternity Hospital (SMMH)  422 0.07167120\n\n\nWe can see the values within are characters, as they are hospital names, and by default they are ordered alphabetically. There are ‘other’ and ‘missing’ values, which we would prefer to be the last subcategories when presenting breakdowns. So we change this column into a factor and re-order it.\n\n# Convert to factor and define level order so \"Other\" and \"Missing\" are last\nlinelist &lt;- linelist %&gt;% \n  mutate(\n    hospital = fct_relevel(hospital, \n      \"St. Mark's Maternity Hospital (SMMH)\",\n      \"Port Hospital\", \n      \"Central Hospital\",\n      \"Military Hospital\",\n      \"Other\",\n      \"Missing\"))\n\n\nlevels(linelist$hospital)\n\n[1] \"St. Mark's Maternity Hospital (SMMH)\"\n[2] \"Port Hospital\"                       \n[3] \"Central Hospital\"                    \n[4] \"Military Hospital\"                   \n[5] \"Other\"                               \n[6] \"Missing\"                             \n\n\n\n\n\n\nUse geom_bar() if you want bar height (or the height of stacked bar components) to reflect the number of relevant rows in the data. These bars will have gaps between them, unless the width = plot aesthetic is adjusted.\n\nProvide only one axis column assignment (typically x-axis). If you provide x and y, you will get Error: stat_count() can only have an x or y aesthetic.\n\nYou can create stacked bars by adding a fill = column assignment within mapping = aes()\n\nThe opposite axis will be titled “count” by default, because it represents the number of rows\n\nBelow, we have assigned outcome to the y-axis, but it could just as easily be on the x-axis. If you have longer character values, it can sometimes look better to flip the bars sideways and put the legend on the bottom. This may impact how your factor levels are ordered - in this case we reverse them with fct_rev() to put missing and other at the bottom.\n\n# A) Outcomes in all cases\nggplot(linelist %&gt;% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital)), width = 0.7) +\n  theme_minimal()+\n  labs(title = \"A) Number of cases by hospital\",\n       y = \"Hospital\")\n\n\n# B) Outcomes in all cases by hosptial\nggplot(linelist %&gt;% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital), fill = outcome), width = 0.7) +\n  theme_minimal()+\n  theme(legend.position = \"bottom\") +\n  labs(title = \"B) Number of recovered and dead Ebola cases, by hospital\",\n       y = \"Hospital\")\n\n\n\n\n\n\n\n\n\n\nUse geom_col() if you want bar height (or height of stacked bar components) to reflect pre-calculated values that exists in the data. Often, these are summary or “aggregated” counts, or proportions.\nProvide column assignments for both axes to geom_col(). Typically your x-axis column is discrete and your y-axis column is numeric.\nLet’s say we have this dataset outcomes:\n\n\n# A tibble: 2 × 3\n  outcome     n proportion\n  &lt;chr&gt;   &lt;int&gt;      &lt;dbl&gt;\n1 Death    1022       56.2\n2 Recover   796       43.8\n\n\nBelow is code using geom_col for creating simple bar charts to show the distribution of Ebola patient outcomes. With geom_col, both x and y need to be specified. Here x is the categorical variable along the x axis, and y is the generated proportions column proportion.\n\n# Outcomes in all cases\nggplot(outcomes) + \n  geom_col(aes(x=outcome, y = proportion)) +\n  labs(subtitle = \"Number of recovered and dead Ebola cases\")\n\n\n\n\nTo show breakdowns by hospital, we would need our table to contain more information, and to be in “long” format. We create this table with the frequencies of the combined categories outcome and hospital.\n\noutcomes2 &lt;- linelist %&gt;% \n  drop_na(outcome) %&gt;% \n  count(hospital, outcome) %&gt;%  # get counts by hospital and outcome\n  group_by(hospital) %&gt;%        # Group so proportions are out of hospital total\n  mutate(proportion = n/sum(n)*100) # calculate proportions of hospital total\n\nhead(outcomes2) # Preview data\n\n# A tibble: 6 × 4\n# Groups:   hospital [3]\n  hospital                             outcome     n proportion\n  &lt;fct&gt;                                &lt;chr&gt;   &lt;int&gt;      &lt;dbl&gt;\n1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\n2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\n3 Port Hospital                        Death     785       57.6\n4 Port Hospital                        Recover   579       42.4\n5 Central Hospital                     Death     193       53.9\n6 Central Hospital                     Recover   165       46.1\n\n\nWe then create the ggplot with some added formatting:\n\nAxis flip: Swapped the axis around with coord_flip() so that we can read the hospital names.\nColumns side-by-side: Added a position = \"dodge\" argument so that the bars for death and recover are presented side by side rather than stacked. Note stacked bars are the default.\nColumn width: Specified ‘width’, so the columns are half as thin as the full possible width.\nColumn order: Reversed the order of the categories on the y axis so that ‘Other’ and ‘Missing’ are at the bottom, with scale_x_discrete(limits=rev). Note that we used that rather than scale_y_discrete because hospital is stated in the x argument of aes(), even if visually it is on the y axis. We do this because Ggplot seems to present categories backwards unless we tell it not to.\n\nOther details: Labels/titles and colours added within labs and scale_fill_color respectively.\n\n\n# Outcomes in all cases by hospital\nggplot(outcomes2) +  \n  geom_col(\n    mapping = aes(\n      x = proportion,                 # show pre-calculated proportion values\n      y = fct_rev(hospital),          # reverse level order so missing/other at bottom\n      fill = outcome),                # stacked by outcome\n    width = 0.5)+                    # thinner bars (out of 1)\n  theme_minimal() +                  # Minimal theme \n  theme(legend.position = \"bottom\")+\n  labs(subtitle = \"Number of recovered and dead Ebola cases, by hospital\",\n       fill = \"Outcome\",             # legend title\n       y = \"Count\",                  # y axis title\n       x = \"Hospital of admission\")+ # x axis title\n  scale_fill_manual(                 # adding colors manually\n    values = c(\"Death\"= \"#3B1c8C\",\n               \"Recover\" = \"#21908D\" )) \n\n\n\n\nNote that the proportions are binary, so we may prefer to drop ‘recover’ and just show the proportion who died. This is just for illustration purposes.\nIf using geom_col() with dates data (e.g. an epicurve from aggregated data) - you will want to adjust the width = argument to remove the “gap” lines between the bars. If using daily data set width = 1. If weekly, width = 7. Months are not possible because each month has a different number of days."
  },
  {
    "objectID": "readings/ggplot-basics.html#ggplot_basics_themes",
    "href": "readings/ggplot-basics.html#ggplot_basics_themes",
    "title": "Data visualization",
    "section": "",
    "text": "One of the best parts of ggplot2 is the amount of control you have over the plot - you can define anything! As mentioned above, the design of the plot that is not related to the data shapes/geometries are adjusted within the theme() function. For example, the plot background color, presence/absence of gridlines, and the font/size/color/alignment of text (titles, subtitles, captions, axis text…). These adjustments can be done in one of two ways:\n\nAdd a complete theme theme_() function to make sweeping adjustments - these include theme_classic(), theme_minimal(), theme_dark(), theme_light() theme_grey(), theme_bw() among others\n\nAdjust each tiny aspect of the plot individually within theme()\n\n\n\nAs they are quite straight-forward, we will demonstrate the complete theme functions below and will not describe them further here. Note that any micro-adjustments with theme() should be made after use of a complete theme.\nWrite them with empty parentheses.\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme classic\")+\n  theme_classic()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme bw\")+\n  theme_bw()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme minimal\")+\n  theme_minimal()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme gray\")+\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe theme() function can take a large number of arguments, each of which edits a very specific aspect of the plot. There is no way we could cover all of the arguments, but we will describe the general pattern for them and show you how to find the argument name that you need. The basic syntax is this:\n\nWithin theme() write the argument name for the plot element you want to edit, like plot.title =\n\nProvide an element_() function to the argument\n\n\n\nMost often, use element_text(), but others include element_rect() for canvas background colors, or element_blank() to remove plot elements\n\n\n\nWithin the element_() function, write argument assignments to make the fine adjustments you desire\n\nSo, that description was quite abstract, so here are some examples.\nThe below plot looks quite silly, but it serves to show you a variety of the ways you can adjust your plot.\n\nWe begin with the plot age_by_wt defined just above and add theme_classic()\n\nFor finer adjustments we add theme() and include one argument for each plot element to adjust\n\nIt can be nice to organize the arguments in logical sections. To describe just some of those used below:\n\nlegend.position = is unique in that it accepts simple values like “bottom”, “top”, “left”, and “right”. But generally, text-related arguments require that you place the details within element_text().\n\nTitle size with element_text(size = 30)\n\nThe caption horizontal alignment with element_text(hjust = 0) (from right to left)\n\nThe subtitle is italicized with element_text(face = \"italic\")\n\n\nage_by_wt + \n  theme_classic()+                                 # pre-defined theme adjustments\n  theme(\n    legend.position = \"bottom\",                    # move legend to bottom\n    \n    plot.title = element_text(size = 30),          # size of title to 30\n    plot.caption = element_text(hjust = 0),        # left-align caption\n    plot.subtitle = element_text(face = \"italic\"), # italicize subtitle\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # adjusts only x-axis text\n    axis.text.y = element_text(size = 15),         # adjusts only y-axis text\n    \n    axis.title = element_text(size = 20)           # adjusts both axes titles\n    )     \n\n\n\n\nHere are some especially common theme() arguments. You will recognize some patterns, such as appending .x or .y to apply the change only to one axis.\n\n\n\n\n\n\n\ntheme() argument\nWhat it adjusts\n\n\n\n\nplot.title = element_text()\nThe title\n\n\nplot.subtitle = element_text()\nThe subtitle\n\n\nplot.caption = element_text()\nThe caption (family, face, color, size, angle, vjust, hjust…)\n\n\naxis.title = element_text()\nAxis titles (both x and y) (size, face, angle, color…)\n\n\naxis.title.x = element_text()\nAxis title x-axis only (use .y for y-axis only)\n\n\naxis.text = element_text()\nAxis text (both x and y)\n\n\naxis.text.x = element_text()\nAxis text x-axis only (use .y for y-axis only)\n\n\naxis.ticks = element_blank()\nRemove axis ticks\n\n\naxis.line = element_line()\nAxis lines (colour, size, linetype: solid dashed dotted etc)\n\n\nstrip.text = element_text()\nFacet strip text (colour, face, size, angle…)\n\n\nstrip.background = element_rect()\nfacet strip (fill, colour, size…)\n\n\n\nBut there are so many theme arguments! How could I remember them all? Do not worry - it is impossible to remember them all. Luckily there are a few tools to help you:\nThe tidyverse documentation on modifying theme, which has a complete list.\n\n\n\n\n\n\nTip\n\n\n\nRun theme_get() from ggplot2 to print a list of all 90+ theme() arguments to the console.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you ever want to remove an element of a plot, you can also do it through theme(). Just pass element_blank() to an argument to have it disappear completely. For legends, set legend.position = \"none\"."
  },
  {
    "objectID": "readings/ggplot-basics.html#ggplot_tips_colors",
    "href": "readings/ggplot-basics.html#ggplot_tips_colors",
    "title": "Data visualization",
    "section": "",
    "text": "In ggplot2, when aesthetics of plotted data (e.g. size, color, shape, fill, plot axis) are mapped to columns in the data, the exact display can be adjusted with the corresponding “scale” command. In this section we explain some common scale adjustments.\n\n\nOne thing that can initially be difficult to understand with ggplot2 is control of color schemes. Note that this section discusses the color of plot objects (geoms/shapes) such as points, bars, lines, tiles, etc.\nTo control “color” of plot objects you will be adjusting either the color = aesthetic (the exterior color) or the fill = aesthetic (the interior color). One exception to this pattern is geom_point(), where you really only get to control color =, which controls the color of the point (interior and exterior).\nWhen setting colour or fill you can use colour names recognized by R like \"red\" (see complete list or enter ?colors), or a specific hex colour such as \"#ff0505\".\n\n# histogram - \nggplot(data = linelist, mapping = aes(x = age))+       # set data and axes\n  geom_histogram(              # display histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"lightblue\")          # bin interior color (fill) \n\n\n\n\nAesthetics such as fill = and color = can be defined either outside of a mapping = aes() statement or inside of one. If outside the aes(), the assigned value should be static (e.g. color = \"blue\") and will apply for all data plotted by the geom. If inside, the aesthetic should be mapped to a column, like color = hospital, and the expression will vary by the value for that row in the data. A few examples:\n\n# Static color for points and for line\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(color = \"purple\")+\n  geom_vline(xintercept = 50, color = \"orange\")+\n  labs(title = \"Static color for points and line\")\n\n# Color mapped to continuous column\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(mapping = aes(color = temp))+         \n  labs(title = \"Color mapped to continuous column\")\n\n# Color mapped to discrete column\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+     \n  geom_point(mapping = aes(color = gender))+         \n  labs(title = \"Color mapped to discrete column\")\n\n# bar plot, fill to discrete column, color to static value\nggplot(data = linelist, mapping = aes(x = hospital))+     \n  geom_bar(mapping = aes(fill = gender), color = \"yellow\")+         \n  labs(title = \"Fill mapped to discrete column, static color\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce you map a column to a plot aesthetic (e.g. x =, y =, fill =, color =…), your plot will gain a scale/legend. See above how the scale can be continuous, discrete, date, etc. values depending on the class of the assigned column. If you have multiple aesthetics mapped to columns, your plot will have multiple scales.\nYou can control the scales with the appropriate scales_() function. The scale functions of ggplot() have 3 parts that are written like this: scale_AESTHETIC_METHOD().\n\nThe first part, scale_(), is fixed.\n\nThe second part, the AESTHETIC, should be the aesthetic that you want to adjust the scale for (_fill_, _shape_, _color_, _size_, _alpha_…) - the options here also include _x_ and _y_.\n\nThe third part, the METHOD, will be either _discrete(), continuous(), _date(), _gradient(), or _manual() depending on the class of the column and how you want to control it. There are others, but these are the most-often used.\n\nBe sure that you use the correct function for the scale! Otherwise your scale command will not appear to change anything. If you have multiple scales, you may use multiple scale functions to adjust them! For example:\n\n\n\nEach kind of scale has its own arguments, though there is some overlap. Query the function like ?scale_color_discrete in the R console to see the function argument documentation.\nFor continuous scales, use breaks = to provide a sequence of values with seq() (take to =, from =, and by = as shown in the example below. Set expand = c(0,0) to eliminate padding space around the axes (this can be used on any _x_ or _y_ scale.\nFor discrete scales, you can adjust the order of level appearance with breaks =, and how the values display with the labels = argument. Provide a character vector to each of those (see example below). You can also drop NA easily by setting na.translate = FALSE.\n\n\n\nOne of the most useful tricks is using “manual” scaling functions to explicitly assign colors as you desire. These are functions with the syntax scale_xxx_manual() (e.g. scale_colour_manual() or scale_fill_manual()). Each of the below arguments are demonstrated in the code example below.\n\nAssign colors to data values with the values = argument\n\nSpecify a color for NA with na.value =\n\nChange how the values are written in the legend with the labels = argument\n\nChange the legend title with name =\n\nBelow, we create a bar plot and show how it appears by default, and then with three scales adjusted - the continuous y-axis scale, the discrete x-axis scale, and manual adjustment of the fill (interior bar color).\n\n# BASELINE - no scale adjustment\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = outcome, fill = gender))+\n  labs(title = \"Baseline - no scale adjustments\")\n\n\n\n# SCALES ADJUSTED\nggplot(data = linelist)+\n  \n  geom_bar(mapping = aes(x = outcome, fill = gender), color = \"black\")+\n  \n  theme_minimal()+                   # simplify background\n  \n  scale_y_continuous(                # continuous scale for y-axis (counts)\n    expand = c(0,0),                 # no padding\n    breaks = seq(from = 0,\n                 to = 3000,\n                 by = 500))+\n  \n  scale_x_discrete(                   # discrete scale for x-axis (gender)\n    expand = c(0,0),                  # no padding\n    drop = FALSE,                     # show all factor levels (even if not in data)\n    na.translate = FALSE,             # remove NA outcomes from plot\n    labels = c(\"Died\", \"Recovered\"))+ # Change display of values\n    \n  \n  scale_fill_manual(                  # Manually specify fill (bar interior color)\n    values = c(\"m\" = \"violetred\",     # reference values in data to assign colors\n               \"f\" = \"aquamarine\"),\n    labels = c(\"m\" = \"Male\",          # re-label the legend (use \"=\" assignment to avoid mistakes)\n              \"f\" = \"Female\",\n              \"Missing\"),\n    name = \"Gender\",                  # title of legend\n    na.value = \"grey\"                 # assign a color for missing values\n  )+\n  labs(title = \"Adjustment of scales\") # Adjust the title of the fill legend\n\n\n\n\n\n\n\nWhen data are mapping to the plot axes, these too can be adjusted with scales commands. A common example is adjusting the display of an axis (e.g. y-axis) that is mapped to a column with continuous data.\nWe may want to adjust the breaks or display of the values in the ggplot using scale_y_continuous(). As noted above, use the argument breaks = to provide a sequence of values that will serve as “breaks” along the scale. These are the values at which numbers will display. To this argument, you can provide a c() vector containing the desired break values, or you can provide a regular sequence of numbers using the base R function seq(). This seq() function accepts to =, from =, and by =.\n\n# BASELINE - no scale adjustment\nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = outcome, fill = gender))+\n  labs(title = \"Baseline - no scale adjustments\")\n\n# \nggplot(data = linelist)+\n  geom_bar(mapping = aes(x = outcome, fill = gender))+\n  scale_y_continuous(\n    breaks = seq(\n      from = 0,\n      to = 3000,\n      by = 100)\n  )+\n  labs(title = \"Adjusted y-axis breaks\")\n\n\n\n\n\n\n\n\n\nIf your original data values are proportions, you can easily display them as percents with “%” by providing labels = scales::percent in your scales command, as shown below.\nWhile an alternative would be to convert the values to character and add a “%” character to the end, this approach will cause complications because your data will no longer be continuous numeric values.\n\n# Original y-axis proportions\n#############################\nlinelist %&gt;%                                   # start with linelist\n  group_by(hospital) %&gt;%                       # group data by hospital\n  summarise(                                   # create summary columns\n    n = n(),                                     # total number of rows in group\n    deaths = sum(outcome == \"Death\", na.rm=T),   # number of deaths in group\n    prop_death = deaths/n) %&gt;%                   # proportion deaths in group\n  ggplot(                                      # begin plotting\n    mapping = aes(\n      x = hospital,\n      y = prop_death))+ \n  geom_col()+\n  theme_minimal()+\n  labs(title = \"Display y-axis original proportions\")\n\n\n\n# Display y-axis proportions as percents\n########################################\nlinelist %&gt;%         \n  group_by(hospital) %&gt;% \n  summarise(\n    n = n(),\n    deaths = sum(outcome == \"Death\", na.rm=T),\n    prop_death = deaths/n) %&gt;% \n  ggplot(\n    mapping = aes(\n      x = hospital,\n      y = prop_death))+\n  geom_col()+\n  theme_minimal()+\n  labs(title = \"Display y-axis as percents (%)\")+\n  scale_y_continuous(\n    labels = scales::percent                    # display proportions as percents\n  )\n\n\n\n\n\n\n\n\n\n\nTo transform a continuous axis to log scale, add trans = \"log2\" to the scale command. For purposes of example, we create a data frame of regions with their respective preparedness_index and cumulative cases values.\n\nplot_data &lt;- data.frame(\n  region = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"),\n  preparedness_index = c(8.8, 7.5, 3.4, 3.6, 2.1, 7.9, 7.0, 5.6, 1.0),\n  cases_cumulative = c(15, 45, 80, 20, 21, 7, 51, 30, 1442)\n)\n\nplot_data\n\n  region preparedness_index cases_cumulative\n1      A                8.8               15\n2      B                7.5               45\n3      C                3.4               80\n4      D                3.6               20\n5      E                2.1               21\n6      F                7.9                7\n7      G                7.0               51\n8      H                5.6               30\n9      I                1.0             1442\n\n\nThe cumulative cases for region “I” are dramatically greater than all the other regions. In circumstances like this, you may elect to display the y-axis using a log scale so the reader can see differences between the regions with fewer cumulative cases.\n\n# Original y-axis\npreparedness_plot &lt;- ggplot(data = plot_data,  \n       mapping = aes(\n         x = preparedness_index,\n         y = cases_cumulative))+\n  geom_point(size = 2)+            # points for each region \n  geom_text(\n    mapping = aes(label = region),\n    vjust = 1.5)+                  # add text labels\n  theme_minimal()\n\npreparedness_plot                  # print original plot\n\n\n# print with y-axis transformed\npreparedness_plot+                   # begin with plot saved above\n  scale_y_continuous(trans = \"log2\") # add transformation for y-axis\n\n\n\n\n\n\n\n\n\n\n\nFill gradient scales can involve additional nuance. The defaults are usually quite pleasing, but you may want to adjust the values, cutoffs, etc.\nTo demonstrate how to adjust a continuous color scale, we’ll use a data set that contains the ages of cases and of sources in a contact tracing case.\n\ncase_source_relationships &lt;- rio::import(\"data/godata/relationships_clean.rds\") %&gt;% \n  select(source_age, target_age) \n\nBelow, we produce a “raster” heat tile density plot. Note how the fill scale is continuous.\n\ntrans_matrix &lt;- ggplot(\n    data = case_source_relationships,\n    mapping = aes(x = source_age, y = target_age))+\n  stat_density2d(\n    geom = \"raster\",\n    mapping = aes(fill = after_stat(density)),\n    contour = FALSE)+\n  theme_minimal()\n\nNow we show some variations on the fill scale:\n\ntrans_matrix\ntrans_matrix + scale_fill_viridis_c(option = \"plasma\")\n\n\n\n\n\n\n\nNow we show some examples of actually adjusting the break points of the scale:\n\nscale_fill_gradient() accepts two colors (high/low)\n\nscale_fill_gradientn() accepts a vector of any length of colors to values = (intermediate values will be interpolated)\n\nUse scales::rescale() to adjust how colors are positioned along the gradient; it rescales your vector of positions to be between 0 and 1.\n\n\ntrans_matrix + \n  scale_fill_gradient(     # 2-sided gradient scale\n    low = \"aquamarine\",    # low value\n    high = \"purple\",       # high value\n    na.value = \"grey\",     # value for NA\n    name = \"Density\")+     # Legend title\n  labs(title = \"Manually specify high/low colors\")\n\n# 3+ colors to scale\ntrans_matrix + \n  scale_fill_gradientn(    # 3-color scale (low/mid/high)\n    colors = c(\"blue\", \"yellow\",\"red\") # provide colors in vector\n  )+\n  labs(title = \"3-color scale\")\n\n# Use of rescale() to adjust placement of colors along scale\ntrans_matrix + \n  scale_fill_gradientn(    # provide any number of colors\n    colors = c(\"blue\", \"yellow\",\"red\", \"black\"),\n    values = scales::rescale(c(0, 0.05, 0.07, 0.10, 0.15, 0.20, 0.3, 0.5)) # positions for colors are rescaled between 0 and 1\n    )+\n  labs(title = \"Colors not evenly positioned\")\n\n# use of limits to cut-off values that get fill color\ntrans_matrix + \n  scale_fill_gradientn(    \n    colors = c(\"blue\", \"yellow\",\"red\"),\n    limits = c(0, 0.0002))+\n  labs(title = \"Restrict value limits, resulting in grey space\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore generally, if you want predefined palettes, you can use the scale_xxx_brewer or scale_xxx_viridis_y functions.\nThe ‘brewer’ functions can draw from colorbrewer.org palettes.\nThe ‘viridis’ functions draw from viridis (colourblind friendly!) palettes, which “provide colour maps that are perceptually uniform in both colour and black-and-white. They are also designed to be perceived by viewers with common forms of colour blindness.” (read more here and here). Define if the palette is discrete, continuous, or binned by specifying this at the end of the function (e.g. discrete is scale_xxx_viridis_d).\nIt is advised that you test your plot in this color blindness simulator. If you have a red/green color scheme, try a “hot-cold” (red-blue) scheme instead as described here\nHere is an example of using various color schemes.\n\nsymp_plot &lt;- linelist %&gt;%                                         # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %&gt;%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %&gt;%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %&gt;% \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  theme(legend.position = \"bottom\")+\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n\nsymp_plot  # print with default colors\n\n#################################\n# print with manually-specified colors\nsymp_plot +\n  scale_fill_manual(\n    values = c(\"yes\" = \"black\",         # explicitly define colours\n               \"no\" = \"white\",\n               \"unknown\" = \"grey\"),\n    breaks = c(\"yes\", \"no\", \"unknown\"), # order the factors correctly\n    name = \"\"                           # set legend to no title\n\n  ) \n\n#################################\n# print with viridis discrete colors\nsymp_plot +\n  scale_fill_viridis_d(\n    breaks = c(\"yes\", \"no\", \"unknown\"),\n    name = \"\"\n  )"
  },
  {
    "objectID": "readings/ggplot-basics.html#change-order-of-discrete-variables",
    "href": "readings/ggplot-basics.html#change-order-of-discrete-variables",
    "title": "Data visualization",
    "section": "",
    "text": "Changing the order that discrete variables appear in is often difficult to understand for people who are new to ggplot2 graphs. It’s easy to understand how to do this however once you understand how ggplot2 handles discrete variables under the hood. Generally speaking, if a discrete varaible is used, it is automatically converted to a factor type - which orders factors by alphabetical order by default. To handle this, you simply have to reorder the factor levels to reflect the order you would like them to appear in the chart. For more detailed information on how to reorder factor objects, see the factor section of the guide.\nWe can look at a common example using age groups - by default the 5-9 age group will be placed in the middle of the age groups (given alphanumeric order), but we can move it behind the 0-4 age group of the chart by releveling the factors.\n\nggplot(\n  data = linelist %&gt;% drop_na(age_cat5),                         # remove rows where age_cat5 is missing\n  mapping = aes(x = fct_relevel(age_cat5, \"5-9\", after = 1))) +  # relevel factor\n\n  geom_bar() +\n  \n  labs(x = \"Age group\", y = \"Number of hospitalisations\",\n       title = \"Total hospitalisations by age group\") +\n  \n  theme_minimal()"
  },
  {
    "objectID": "readings/ggplot-basics.html#advanced-ggplot-optional",
    "href": "readings/ggplot-basics.html#advanced-ggplot-optional",
    "title": "Data visualization",
    "section": "",
    "text": "These are a collection of less common plot types, ggplot2 extensions, and advanced examples of some of the things you can do visualizing data in R.\n\n\nContour plots are helpful when you have many points that might cover each other (“overplotting”). The case-source data used above are again plotted, but more simply using stat_density2d() and stat_density2d_filled() to produce discrete contour levels - like a topographical map. Read more about the statistics here.\n\ncase_source_relationships %&gt;% \n  ggplot(aes(x = source_age, y = target_age))+\n  stat_density2d()+\n  geom_point()+\n  theme_minimal()+\n  labs(title = \"stat_density2d() + geom_point()\")\n\n\ncase_source_relationships %&gt;% \n  ggplot(aes(x = source_age, y = target_age))+\n  stat_density2d_filled()+\n  theme_minimal()+\n  labs(title = \"stat_density2d_filled()\")\n\n\n\n\n\n\n\n\n\n\nTo show the distributions on the edges of a geom_point() scatterplot, you can use the ggExtra package and its function ggMarginal(). Save your original ggplot as an object, then pass it to ggMarginal() as shown below. Here are the key arguments:\n\nYou must specify the type = as either “histogram”, “density” “boxplot”, “violin”, or “densigram”.\n\nBy default, marginal plots will appear for both axes. You can set margins = to “x” or “y” if you only want one.\n\nOther optional arguments include fill = (bar color), color = (line color), size = (plot size relative to margin size, so larger number makes the marginal plot smaller).\n\nYou can provide other axis-specific arguments to xparams = and yparams =. For example, to have different histogram bin sizes, as shown below.\n\nYou can have the marginal plots reflect groups (columns that have been assigned to color = in your ggplot() mapped aesthetics). If this is the case, set the ggMarginal() argument groupColour = or groupFill = to TRUE, as shown below.\nRead more at this vignette, in the R Graph Gallery or the function R documentation ?ggMarginal.\n\n# Install/load ggExtra\npacman::p_load(ggExtra)\n\n# Basic scatter plot of weight and age\nscatter_plot &lt;- ggplot(data = linelist)+\n  geom_point(mapping = aes(y = wt_kg, x = age)) +\n  labs(title = \"Scatter plot of weight and age\")\n\nTo add marginal histograms use type = \"histogram\". You can optionally set groupFill = TRUE to get stacked histograms.\n\n# with histograms\nggMarginal(\n  scatter_plot,                     # add marginal histograms\n  type = \"histogram\",               # specify histograms\n  fill = \"lightblue\",               # bar fill\n  xparams = list(binwidth = 10),    # other parameters for x-axis marginal\n  yparams = list(binwidth = 5))     # other parameters for y-axis marginal\n\n\n\n\nMarginal density plot with grouped/colored values:\n\n# Scatter plot, colored by outcome\n# Outcome column is assigned as color in ggplot. groupFill in ggMarginal set to TRUE\nscatter_plot_color &lt;- ggplot(data = linelist %&gt;% drop_na(gender))+\n  geom_point(mapping = aes(y = wt_kg, x = age, color = gender)) +\n  labs(title = \"Scatter plot of weight and age\")+\n  theme(legend.position = \"bottom\")\n\nggMarginal(scatter_plot_color, type = \"density\", groupFill = TRUE)\n\n\n\n\nSet the size = arguemnt to adjust the relative size of the marginal plot. Smaller number makes a larger marginal plot. You also set color =. Below are is a marginal boxplot, with demonstration of the margins = argument so it appears on only one axis:\n\n# with boxplot \nggMarginal(\n  scatter_plot,\n  margins = \"x\",      # only show x-axis marginal plot\n  type = \"boxplot\")   \n\n\n\n\n\n\n\n\nIn ggplot2, it is also possible to add text to plots. However, this comes with the notable limitation where text labels often clash with data points in a plot, making them look messy or hard to read. There is no ideal way to deal with this in the base package, but there is a ggplot2 add-on, known as ggrepel that makes dealing with this very simple!\nThe ggrepel package provides two new functions, geom_label_repel() and geom_text_repel(), which replace geom_label() and geom_text(). Simply use these functions instead of the base functions to produce neat labels. Within the function, map the aesthetics aes() as always, but include the argument label = to which you provide a column name containing the values you want to display (e.g. patient id, or name, etc.). You can make more complex labels by combining columns and newlines (\\n) within str_glue() as shown below.\nA few tips:\n\nUse min.segment.length = 0 to always draw line segments, or min.segment.length = Inf to never draw them\n\nUse size = outside of aes() to set text size\n\nUse force = to change the degree of repulsion between labels and their respective points (default is 1)\n\nInclude fill = within aes() to have label colored by value\n\nA letter “a” may appear in the legend - add guides(fill = guide_legend(override.aes = aes(color = NA)))+ to remove it\n\n\nSee this is very in-depth tutorial for more.\n\npacman::p_load(ggrepel)\n\nlinelist %&gt;%                                               # start with linelist\n  group_by(hospital) %&gt;%                                   # group by hospital\n  summarise(                                               # create new dataset with summary values per hospital\n    n_cases = n(),                                           # number of cases per hospital\n    delay_mean = round(mean(days_onset_hosp, na.rm=T),1),    # mean delay per hospital\n  ) %&gt;% \n  ggplot(mapping = aes(x = n_cases, y = delay_mean))+      # send data frame to ggplot\n  geom_point(size = 2)+                                    # add points\n  geom_label_repel(                                        # add point labels\n    mapping = aes(\n      label = stringr::str_glue(\n        \"{hospital}\\n{n_cases} cases, {delay_mean} days\")  # how label displays\n      ), \n    size = 3,                                              # text size in labels\n    min.segment.length = 0)+                               # show all line segments                \n  labs(                                                    # add axes labels\n    title = \"Mean delay to admission, by hospital\",\n    x = \"Number of cases\",\n    y = \"Mean delay (days)\")\n\n\n\n\nYou can label only a subset of the data points - by using standard ggplot() syntax to provide different data = for each geom layer of the plot. Below, All cases are plotted, but only a few are labeled.\n\nggplot()+\n  # All points in grey\n  geom_point(\n    data = linelist,                                   # all data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    color = \"grey\",\n    alpha = 0.5)+                                              # grey and semi-transparent\n  \n  # Few points in black\n  geom_point(\n    data = linelist %&gt;% filter(days_onset_hosp &gt; 15),  # filtered data provided to this layer\n    mapping = aes(x = ht_cm, y = wt_kg),\n    alpha = 1)+                                                # default black and not transparent\n  \n  # point labels for few points\n  geom_label_repel(\n    data = linelist %&gt;% filter(days_onset_hosp &gt; 15),  # filter the data for the labels\n    mapping = aes(\n      x = ht_cm,\n      y = wt_kg,\n      fill = outcome,                                          # label color by outcome\n      label = stringr::str_glue(\"Delay: {days_onset_hosp}d\")), # label created with str_glue()\n    min.segment.length = 0) +                                  # show line segments for all\n  \n  # remove letter \"a\" from inside legend boxes\n  guides(fill = guide_legend(override.aes = aes(color = NA)))+\n  \n  # axis labels\n  labs(\n    title = \"Cases with long delay to admission\",\n    y = \"weight (kg)\",\n    x = \"height(cm)\")\n\n\n\n\n\n\n\n\nHighlighting specific elements in a chart is a useful way to draw attention to a specific instance of a variable while also providing information on the dispersion of the full dataset. While this is not easily done in base ggplot2, there is an external package that can help to do this known as gghighlight. This is easy to use within the ggplot syntax.\nThe gghighlight package uses the gghighlight() function to achieve this effect. To use this function, supply a logical statement to the function - this can have quite flexible outcomes, but here we’ll show an example of the age distribution of cases in our linelist, highlighting them by outcome.\n\n# load gghighlight\nlibrary(gghighlight)\n\n# replace NA values with unknown in the outcome variable\nlinelist &lt;- linelist %&gt;%\n  mutate(outcome = replace_na(outcome, \"Unknown\"))\n\n# produce a histogram of all cases by age\nggplot(\n  data = linelist,\n  mapping = aes(x = age_years, fill = outcome)) +\n  geom_histogram() + \n  gghighlight::gghighlight(outcome == \"Death\")     # highlight instances where the patient has died.\n\n\n\n\nThis also works well with faceting functions - it allows the user to produce facet plots with the background data highlighted that doesn’t apply to the facet! Below we count cases by week and plot the epidemic curves by hospital (color = and facet_wrap() set to hospital column).\n\n# produce a histogram of all cases by age\nlinelist %&gt;% \n  count(week = lubridate::floor_date(date_hospitalisation, \"week\"),\n        hospital) %&gt;% \n  ggplot()+\n  geom_line(aes(x = week, y = n, color = hospital))+\n  theme_minimal()+\n  gghighlight::gghighlight() +                      # highlight instances where the patient has died\n  facet_wrap(~hospital)                              # make facets by outcome\n\n\n\n\n\n\n\nNote that properly aligning axes to plot from multiple datasets in the same plot can be difficult. Consider one of the following strategies:\n\nMerge the data prior to plotting, and convert to “long” format with a column reflecting the dataset\n\nUse cowplot or a similar package to combine two plots (see below)\n\n\n\n\n\nTwo packages that are very useful for combining plots are cowplot and patchwork. In this page we will mostly focus on cowplot, with occassional use of patchwork.\nHere is the online introduction to cowplot. You can read the more extensive documentation for each function online here. We will cover a few of the most common use cases and functions below.\nThe cowplot package works in tandem with ggplot2 - essentially, you use it to arrange and combine ggplots and their legends into compound figures. It can also accept base R graphics.\n\npacman::p_load(\n  tidyverse,      # data manipulation and visualisation\n  cowplot,        # combine plots\n  patchwork       # combine plots\n)\n\nWhile faceting is a convenient approach to plotting, sometimes its not possible to get the results you want from its relatively restrictive approach. Here, you may choose to combine plots by sticking them together into a larger plot. There are three well known packages that are great for this - cowplot, gridExtra, and patchwork. However, these packages largely do the same things, so we’ll focus on cowplot for this section.\n\n\nThe cowplot package has a fairly wide range of functions, but the easiest use of it can be achieved through the use of plot_grid(). This is effectively a way to arrange predefined plots in a grid formation. We can work through another example with the malaria dataset - here we can plot the total cases by district, and also show the epidemic curve over time.\n\nmalaria_data &lt;- rio::import(\"data/malaria_facility_count_data.rds\")\n\n# bar chart of total cases by district\np1 &lt;- ggplot(malaria_data, aes(x = District, y = malaria_tot)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    x = \"District\",\n    y = \"Total number of cases\",\n    title = \"Total malaria cases by district\"\n  ) +\n  theme_minimal()\n\n# epidemic curve over time\np2 &lt;- ggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1) +\n  labs(\n    x = \"Date of data submission\",\n    y =  \"number of cases\"\n  ) +\n  theme_minimal()\n\ncowplot::plot_grid(p1, p2,\n                  # 1 column and two rows - stacked on top of each other\n                   ncol = 1,\n                   nrow = 2,\n                   # top plot is 2/3 as tall as second\n                   rel_heights = c(2, 3))\n\n\n\n\n\n\n\nIf your plots have the same legend, combining them is relatively straight-forward. Simple use the cowplot approach above to combine the plots, but remove the legend from one of them (de-duplicate).\nIf your plots have different legends, you must use an alternative approach:\n\nCreate and save your plots without legends using theme(legend.position = \"none\")\n\nExtract the legends from each plot using get_legend() as shown below - but extract legends from the plots modified to actually show the legend\n\nCombine the legends into a legends panel\n\nCombine the plots and legends panel\n\nFor demonstration we show the two plots separately, and then arranged in a grid with their own legends showing (ugly and inefficient use of space):\n\np1 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, outcome) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  labs(title = \"Cases by outcome\")\n\n\np2 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, age_cat) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(axis.text.y = element_blank())+\n  labs(title = \"Cases by age\")\n\nHere is how the two plots look when combined using plot_grid() without combining their legends:\n\ncowplot::plot_grid(p1, p2, rel_widths = c(0.3))\n\n\n\n\nAnd now we show how to combine the legends. Essentially what we do is to define each plot without its legend (theme(legend.position = \"none\"), and then we define each plot’s legend separately, using the get_legend() function from cowplot. When we extract the legend from the saved plot, we need to add + the legend back in, including specifying the placement (“right”) and smaller adjustments for alignment of the legends and their titles. Then, we combine the legends together vertically, and then combine the two plots with the newly-combined legends. Voila!\n\n# Define plot 1 without legend\np1 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, outcome) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n  scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(legend.position = \"none\")+\n  labs(title = \"Cases by outcome\")\n\n\n# Define plot 2 without legend\np2 &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, age_cat) %&gt;% \n  ggplot()+\n  geom_col(mapping = aes(x = hospital, y = n, fill = age_cat))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+\n  coord_flip()+\n  theme_minimal()+\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank()\n  )+\n  labs(title = \"Cases by age\")\n\n\n# extract legend from p1 (from p1 + legend)\nleg_p1 &lt;- cowplot::get_legend(p1 +\n                                theme(legend.position = \"right\",        # extract vertical legend\n                                      legend.justification = c(0,0.5))+ # so legends  align\n                                labs(fill = \"Outcome\"))                 # title of legend\n# extract legend from p2 (from p2 + legend)\nleg_p2 &lt;- cowplot::get_legend(p2 + \n                                theme(legend.position = \"right\",         # extract vertical legend   \n                                      legend.justification = c(0,0.5))+  # so legends align\n                                labs(fill = \"Age Category\"))             # title of legend\n\n# create a blank plot for legend alignment\n#blank_p &lt;- patchwork::plot_spacer() + theme_void()\n\n# create legends panel, can be one on top of the other (or use spacer commented above)\nlegends &lt;- cowplot::plot_grid(leg_p1, leg_p2, nrow = 2, rel_heights = c(.3, .7))\n\n# combine two plots and the combined legends panel\ncombined &lt;- cowplot::plot_grid(p1, p2, legends, ncol = 3, rel_widths = c(.4, .4, .2))\n\ncombined  # print\n\n\n\n\nThis solution was learned from this post with a minor fix to align legends from this post.\nTIP: Fun note - the “cow” in cowplot comes from the creator’s name - Claus O. Wilke.\n\n\n\nYou can inset one plot in another using cowplot. Here are things to be aware of:\n\nDefine the main plot with theme_half_open() from cowplot; it may be best to have the legend either on top or bottom\n\nDefine the inset plot. Best is to have a plot where you do not need a legend. You can remove plot theme elements with element_blank() as shown below.\n\nCombine them by applying ggdraw() to the main plot, then adding draw_plot() on the inset plot and specifying the coordinates (x and y of lower left corner), height and width as proportion of the whole main plot.\n\n\n# Define main plot\nmain_plot &lt;- ggplot(data = linelist)+\n  geom_histogram(aes(x = date_onset, fill = hospital))+\n  scale_fill_brewer(type = \"qual\", palette = 1, na.value = \"grey\")+ \n  theme_half_open()+\n  theme(legend.position = \"bottom\")+\n  labs(title = \"Epidemic curve and outcomes by hospital\")\n\n\n# Define inset plot\ninset_plot &lt;- linelist %&gt;% \n  mutate(hospital = recode(hospital, \"St. Mark's Maternity Hospital (SMMH)\" = \"St. Marks\")) %&gt;% \n  count(hospital, outcome) %&gt;% \n  ggplot()+\n    geom_col(mapping = aes(x = hospital, y = n, fill = outcome))+\n    scale_fill_brewer(type = \"qual\", palette = 4, na.value = \"grey\")+\n    coord_flip()+\n    theme_minimal()+\n    theme(legend.position = \"none\",\n          axis.title.y = element_blank())+\n    labs(title = \"Cases by outcome\") \n\n\n# Combine main with inset\ncowplot::ggdraw(main_plot)+\n     draw_plot(inset_plot,\n               x = .6, y = .55,    #x = .07, y = .65,\n               width = .4, height = .4)\n\n\n\n\nThis technique is explained more in these two vignettes:\nWilke lab\ndraw_plot() documentation"
  },
  {
    "objectID": "readings/install.html",
    "href": "readings/install.html",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "Open an internet browser and go to www.r-project.org.\nClick the “download R” link in the middle of the page under “Getting Started.”\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the “Download R for (Mac) OS X” link at the top of the page.\nClick on the file containing the latest version of R under “Files.”\nSave the .pkg file, double-click it to open, and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\n\n\n\n\nGo to www.rstudio.com and click on the “Download RStudio” button.\nClick on “DOWNLOAD” in the upper right corner.\nDownload the Free version of RStudio Desktop.\nSave the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder.\n\n\n\n\n\n\n\n\nOpen an internet browser and go to www.r-project.org.\nClick the “download R” link in the middle of the page under “Getting Started.”\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the “Download R for Windows” link at the top of the page.\nClick on the “install R for the first time” link at the top of the page.\nClick “Download R for Windows” and save the executable file somewhere on your computer. Run the .exe file and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\n\n\n\n\nGo to www.rstudio.com and click on the “Download RStudio” button.\nClick on “DOWNLOAD” in the upper right corner.\nDownload the Free version of RStudio Desktop.\nSave the executable file. Run the .exe file and follow the installation instructions.\n\nPermissions\nNote that you should install R and RStudio to a drive where you have read and write permissions. Otherwise, your ability to install R packages (a frequent occurrence) will be impacted. If you encounter problems, try opening RStudio by right-clicking the icon and selecting “Run as administrator”. Other tips can be found in the page [R on network drives].\nHow to update R and RStudio\nYour version of R is printed to the R Console at start-up. You can also run sessionInfo().\nTo update R, go to the website mentioned above and re-install R. Be aware that the old R version will still exist in your computer. You can temporarily run an older version (older “installation”) of R by clicking “Tools” -&gt; “Global Options” in RStudio and choosing an R version. This can be useful if you want to use a package that has not been updated to work on the newest version of R.\nTo update RStudio, you can go to the website above and re-download RStudio. Another option is to click “Help” -&gt; “Check for Updates” within RStudio, but this may not show the very latest updates.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions adapted from guide developed by HMS Research computing and Chapter 3 of the The Epidemiologist R Handbook."
  },
  {
    "objectID": "readings/install.html#mac-users",
    "href": "readings/install.html#mac-users",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "Open an internet browser and go to www.r-project.org.\nClick the “download R” link in the middle of the page under “Getting Started.”\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the “Download R for (Mac) OS X” link at the top of the page.\nClick on the file containing the latest version of R under “Files.”\nSave the .pkg file, double-click it to open, and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\n\n\n\n\nGo to www.rstudio.com and click on the “Download RStudio” button.\nClick on “DOWNLOAD” in the upper right corner.\nDownload the Free version of RStudio Desktop.\nSave the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder."
  },
  {
    "objectID": "readings/install.html#windows-users",
    "href": "readings/install.html#windows-users",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "Open an internet browser and go to www.r-project.org.\nClick the “download R” link in the middle of the page under “Getting Started.”\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the “Download R for Windows” link at the top of the page.\nClick on the “install R for the first time” link at the top of the page.\nClick “Download R for Windows” and save the executable file somewhere on your computer. Run the .exe file and follow the installation instructions.\nNow that R is installed, you need to download and install RStudio.\n\n\n\n\n\nGo to www.rstudio.com and click on the “Download RStudio” button.\nClick on “DOWNLOAD” in the upper right corner.\nDownload the Free version of RStudio Desktop.\nSave the executable file. Run the .exe file and follow the installation instructions.\n\nPermissions\nNote that you should install R and RStudio to a drive where you have read and write permissions. Otherwise, your ability to install R packages (a frequent occurrence) will be impacted. If you encounter problems, try opening RStudio by right-clicking the icon and selecting “Run as administrator”. Other tips can be found in the page [R on network drives].\nHow to update R and RStudio\nYour version of R is printed to the R Console at start-up. You can also run sessionInfo().\nTo update R, go to the website mentioned above and re-install R. Be aware that the old R version will still exist in your computer. You can temporarily run an older version (older “installation”) of R by clicking “Tools” -&gt; “Global Options” in RStudio and choosing an R version. This can be useful if you want to use a package that has not been updated to work on the newest version of R.\nTo update RStudio, you can go to the website above and re-download RStudio. Another option is to click “Help” -&gt; “Check for Updates” within RStudio, but this may not show the very latest updates."
  },
  {
    "objectID": "readings/install.html#reference",
    "href": "readings/install.html#reference",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "Instructions adapted from guide developed by HMS Research computing and Chapter 3 of the The Epidemiologist R Handbook."
  },
  {
    "objectID": "readings/manage-data.html",
    "href": "readings/manage-data.html",
    "title": "Managing Data",
    "section": "",
    "text": "Extended Materials\n\n\n\nYou can find the original, extended version of these materials from chapters 8, 13, and 14.\n\n\nThis week we will be diving deeper into operations needed for data analysis. We will look at how to manipulate column names, group data by its variables, and append datasets together.\nWe will be continueing with the same simulated Ebola outbreak dataset.\n\nlinelist &lt;- import(\"linelist_cleaned.rds\")\n\n\n\nIn R, column names are the “header” or “top” value of a column. They are used to refer to columns in the code, and serve as a default label in figures.\nOther statistical software such as SAS and STATA use “labels” that co-exist as longer printed versions of the shorter column names. While R does offer the possibility of adding column labels to the data, this is not emphasized in most practice. To make column names “printer-friendly” for figures, one typically adjusts their display within the plotting commands that create the outputs.\nAs R column names are used very often, so they must have “clean” syntax. We suggest the following:\n\nShort names\nNo spaces (replace with underscores _ )\nNo unusual characters (&, #, &lt;, &gt;, …)\n\nSimilar style nomenclature (e.g. all date columns named like date_onset, date_report, date_death…)\n\nRe-naming columns manually is often necessary, even after the standardization step above. Below, re-naming is performed using the rename() function from the dplyr package, as part of a pipe chain. rename() uses the style NEW = OLD - the new column name is given before the old column name.\nBelow, a re-naming command is added to the cleaning pipeline. Spaces have been added strategically to align code for easier reading.\nNow you can see that the columns names have been changed:\n\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_onset\"           \"date_hospitalisation\" \"date_outcome\"        \n [7] \"outcome\"              \"gender\"               \"age\"                 \n[10] \"age_unit\"             \"age_years\"            \"age_cat\"             \n[13] \"age_cat5\"             \"hospital\"             \"lon\"                 \n[16] \"lat\"                  \"infector\"             \"source\"              \n[19] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"            \n[22] \"fever\"                \"chills\"               \"cough\"               \n[25] \"aches\"                \"vomit\"                \"temp\"                \n[28] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\n\n\nYou can also rename by column position, instead of column name, for example:\n\nrename(newNameForFirstColumn  = 1,\n       newNameForSecondColumn = 2)\n\n\n\n\nAs a shortcut, you can also rename columns within the dplyr select() and summarise() functions. select() is used to keep only certain columns and summarise() is used when grouping data. These functions also uses the format new_name = old_name. Here is an example:\n\nlinelist_raw %&gt;% \n  select(# NEW name             # OLD name\n         date_infection       = `infection date`,    # rename and KEEP ONLY these columns\n         date_hospitalisation = `hosp date`)\n\n\n\n\n\n\nR cannot have dataset columns that do not have column names (headers). So, if you import an Excel dataset with data but no column headers, R will fill-in the headers with names like “…1” or “…2”. The number represents the column number (e.g. if the 4th column in the dataset has no header, then R will name it “…4”).\nYou can clean these names manually by referencing their position number (see example above), or their assigned name (linelist_raw$...1).\n\n\n\nMerged cells in an Excel file are a common occurrence when receiving data. Merged cells can be nice for human reading of data, but are not “tidy data” and cause many problems for machine reading of data. R cannot accommodate merged cells.\nOne solution to deal with merged cells is to import the data with the function readWorkbook() from the package openxlsx. Set the argument fillMergedCells = TRUE. This gives the value in a merged cell to all cells within the merge range.\n\nlinelist_raw &lt;- openxlsx::readWorkbook(\"linelist_raw.xlsx\", fillMergedCells = TRUE)\n\n\n\n\n\n\nTwo weeks ago we learned to use select() to select the columns we wanted to keep.\n\n# linelist dataset is piped through select() command, and names() prints just the column names\nlinelist %&gt;% \n  select(case_id, date_onset, date_hospitalisation, fever) %&gt;% \n  names()  # display the column names\n\n[1] \"case_id\"              \"date_onset\"           \"date_hospitalisation\"\n[4] \"fever\"               \n\n\nLet’s look at some more complicated scenarios when we need to think a bit deeper on how we’re selecting or choosing columns in our data.\n\n\nThese helper functions exist to make it easy to specify columns to keep, discard, or transform. They are from the package tidyselect, which is included in tidyverse and underlies how columns are selected in dplyr functions.\nFor example, if you want to re-order the columns, everything() is a useful function to signify “all other columns not yet mentioned”. The command below moves columns date_onset and date_hospitalisation to the beginning (left) of the dataset, but keeps all the other columns afterward. Note that everything() is written with empty parentheses:\n\n# move date_onset and date_hospitalisation to beginning\nlinelist %&gt;% \n  select(date_onset, date_hospitalisation, everything()) %&gt;% \n  names()\n\n [1] \"date_onset\"           \"date_hospitalisation\" \"case_id\"             \n [4] \"generation\"           \"date_infection\"       \"date_outcome\"        \n [7] \"outcome\"              \"gender\"               \"age\"                 \n[10] \"age_unit\"             \"age_years\"            \"age_cat\"             \n[13] \"age_cat5\"             \"hospital\"             \"lon\"                 \n[16] \"lat\"                  \"infector\"             \"source\"              \n[19] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"            \n[22] \"fever\"                \"chills\"               \"cough\"               \n[25] \"aches\"                \"vomit\"                \"temp\"                \n[28] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\nHere are other “tidyselect” helper functions that also work within dplyr functions like select(), across(), and summarise():\n\neverything() - all other columns not mentioned\n\nlast_col() - the last column\n\nwhere() - applies a function to all columns and selects those which are TRUE\n\ncontains() - columns containing a character string\n\nexample: select(contains(\"time\"))\n\n\nstarts_with() - matches to a specified prefix\n\nexample: select(starts_with(\"date_\"))\n\n\nends_with() - matches to a specified suffix\n\nexample: select(ends_with(\"_post\"))\n\n\nmatches() - to apply a regular expression (regex)\n\nexample: select(matches(\"[pt]al\"))\n\n\nnum_range() - a numerical range like x01, x02, x03\n\nany_of() - matches IF column exists but returns no error if it is not found\n\nexample: select(any_of(date_onset, date_death, cardiac_arrest))\n\n\nIn addition, use normal operators such as c() to list several columns, : for consecutive columns, ! for opposite, & for AND, and | for OR.\nUse where() to specify logical criteria for columns. If providing a function inside where(), do not include the function’s empty parentheses. The command below selects columns that are class Numeric.\n\n# select columns that are class Numeric\nlinelist %&gt;% \n  select(where(is.numeric)) %&gt;% \n  names()\n\n [1] \"generation\"      \"age\"             \"age_years\"       \"lon\"            \n [5] \"lat\"             \"wt_kg\"           \"ht_cm\"           \"ct_blood\"       \n [9] \"temp\"            \"bmi\"             \"days_onset_hosp\"\n\n\nUse contains() to select only columns in which the column name contains a specified character string. ends_with() and starts_with() provide more nuance.\n\n# select columns containing certain characters\nlinelist %&gt;% \n  select(contains(\"date\")) %&gt;% \n  names()\n\n[1] \"date_infection\"       \"date_onset\"           \"date_hospitalisation\"\n[4] \"date_outcome\"        \n\n\nThe function matches() works similarly to contains() but can be provided a regular expression, such as multiple strings separated by OR bars within the parentheses:\n\n# searched for multiple character matches\nlinelist %&gt;% \n  select(matches(\"onset|hosp|fev\")) %&gt;%   # note the OR symbol \"|\"\n  names()\n\n[1] \"date_onset\"           \"date_hospitalisation\" \"hospital\"            \n[4] \"fever\"                \"days_onset_hosp\"     \n\n\n\n\n\n\nIn a later week we will learn more about how to de-duplicate data. Only a very simple row de-duplication example is presented here.\nThe package dplyr offers the distinct() function. This function examines every row and reduce the data frame to only the unique rows. That is, it removes rows that are 100% duplicates.\nWhen evaluating duplicate rows, it takes into account a range of columns - by default it considers all columns. As shown in the de-duplication page, you can adjust this column range so that the uniqueness of rows is only evaluated in regards to certain columns.\nIn this simple example, we just add the empty command distinct() to the pipe chain. This ensures there are no rows that are 100% duplicates of other rows (evaluated across all columns).\nWe begin with nrow(linelist) rows in linelist.\n\nlinelist &lt;- linelist %&gt;% \n  distinct()\n\nAfter de-duplication there are nrow(linelist) rows. Any removed rows would have been 100% duplicates of other rows."
  },
  {
    "objectID": "readings/manage-data.html#column-names",
    "href": "readings/manage-data.html#column-names",
    "title": "Managing Data",
    "section": "",
    "text": "In R, column names are the “header” or “top” value of a column. They are used to refer to columns in the code, and serve as a default label in figures.\nOther statistical software such as SAS and STATA use “labels” that co-exist as longer printed versions of the shorter column names. While R does offer the possibility of adding column labels to the data, this is not emphasized in most practice. To make column names “printer-friendly” for figures, one typically adjusts their display within the plotting commands that create the outputs.\nAs R column names are used very often, so they must have “clean” syntax. We suggest the following:\n\nShort names\nNo spaces (replace with underscores _ )\nNo unusual characters (&, #, &lt;, &gt;, …)\n\nSimilar style nomenclature (e.g. all date columns named like date_onset, date_report, date_death…)\n\nRe-naming columns manually is often necessary, even after the standardization step above. Below, re-naming is performed using the rename() function from the dplyr package, as part of a pipe chain. rename() uses the style NEW = OLD - the new column name is given before the old column name.\nBelow, a re-naming command is added to the cleaning pipeline. Spaces have been added strategically to align code for easier reading.\nNow you can see that the columns names have been changed:\n\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_onset\"           \"date_hospitalisation\" \"date_outcome\"        \n [7] \"outcome\"              \"gender\"               \"age\"                 \n[10] \"age_unit\"             \"age_years\"            \"age_cat\"             \n[13] \"age_cat5\"             \"hospital\"             \"lon\"                 \n[16] \"lat\"                  \"infector\"             \"source\"              \n[19] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"            \n[22] \"fever\"                \"chills\"               \"cough\"               \n[25] \"aches\"                \"vomit\"                \"temp\"                \n[28] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\n\n\nYou can also rename by column position, instead of column name, for example:\n\nrename(newNameForFirstColumn  = 1,\n       newNameForSecondColumn = 2)\n\n\n\n\nAs a shortcut, you can also rename columns within the dplyr select() and summarise() functions. select() is used to keep only certain columns and summarise() is used when grouping data. These functions also uses the format new_name = old_name. Here is an example:\n\nlinelist_raw %&gt;% \n  select(# NEW name             # OLD name\n         date_infection       = `infection date`,    # rename and KEEP ONLY these columns\n         date_hospitalisation = `hosp date`)\n\n\n\n\n\n\nR cannot have dataset columns that do not have column names (headers). So, if you import an Excel dataset with data but no column headers, R will fill-in the headers with names like “…1” or “…2”. The number represents the column number (e.g. if the 4th column in the dataset has no header, then R will name it “…4”).\nYou can clean these names manually by referencing their position number (see example above), or their assigned name (linelist_raw$...1).\n\n\n\nMerged cells in an Excel file are a common occurrence when receiving data. Merged cells can be nice for human reading of data, but are not “tidy data” and cause many problems for machine reading of data. R cannot accommodate merged cells.\nOne solution to deal with merged cells is to import the data with the function readWorkbook() from the package openxlsx. Set the argument fillMergedCells = TRUE. This gives the value in a merged cell to all cells within the merge range.\n\nlinelist_raw &lt;- openxlsx::readWorkbook(\"linelist_raw.xlsx\", fillMergedCells = TRUE)"
  },
  {
    "objectID": "readings/manage-data.html#revisiting-select",
    "href": "readings/manage-data.html#revisiting-select",
    "title": "Managing Data",
    "section": "",
    "text": "Two weeks ago we learned to use select() to select the columns we wanted to keep.\n\n# linelist dataset is piped through select() command, and names() prints just the column names\nlinelist %&gt;% \n  select(case_id, date_onset, date_hospitalisation, fever) %&gt;% \n  names()  # display the column names\n\n[1] \"case_id\"              \"date_onset\"           \"date_hospitalisation\"\n[4] \"fever\"               \n\n\nLet’s look at some more complicated scenarios when we need to think a bit deeper on how we’re selecting or choosing columns in our data.\n\n\nThese helper functions exist to make it easy to specify columns to keep, discard, or transform. They are from the package tidyselect, which is included in tidyverse and underlies how columns are selected in dplyr functions.\nFor example, if you want to re-order the columns, everything() is a useful function to signify “all other columns not yet mentioned”. The command below moves columns date_onset and date_hospitalisation to the beginning (left) of the dataset, but keeps all the other columns afterward. Note that everything() is written with empty parentheses:\n\n# move date_onset and date_hospitalisation to beginning\nlinelist %&gt;% \n  select(date_onset, date_hospitalisation, everything()) %&gt;% \n  names()\n\n [1] \"date_onset\"           \"date_hospitalisation\" \"case_id\"             \n [4] \"generation\"           \"date_infection\"       \"date_outcome\"        \n [7] \"outcome\"              \"gender\"               \"age\"                 \n[10] \"age_unit\"             \"age_years\"            \"age_cat\"             \n[13] \"age_cat5\"             \"hospital\"             \"lon\"                 \n[16] \"lat\"                  \"infector\"             \"source\"              \n[19] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"            \n[22] \"fever\"                \"chills\"               \"cough\"               \n[25] \"aches\"                \"vomit\"                \"temp\"                \n[28] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\nHere are other “tidyselect” helper functions that also work within dplyr functions like select(), across(), and summarise():\n\neverything() - all other columns not mentioned\n\nlast_col() - the last column\n\nwhere() - applies a function to all columns and selects those which are TRUE\n\ncontains() - columns containing a character string\n\nexample: select(contains(\"time\"))\n\n\nstarts_with() - matches to a specified prefix\n\nexample: select(starts_with(\"date_\"))\n\n\nends_with() - matches to a specified suffix\n\nexample: select(ends_with(\"_post\"))\n\n\nmatches() - to apply a regular expression (regex)\n\nexample: select(matches(\"[pt]al\"))\n\n\nnum_range() - a numerical range like x01, x02, x03\n\nany_of() - matches IF column exists but returns no error if it is not found\n\nexample: select(any_of(date_onset, date_death, cardiac_arrest))\n\n\nIn addition, use normal operators such as c() to list several columns, : for consecutive columns, ! for opposite, & for AND, and | for OR.\nUse where() to specify logical criteria for columns. If providing a function inside where(), do not include the function’s empty parentheses. The command below selects columns that are class Numeric.\n\n# select columns that are class Numeric\nlinelist %&gt;% \n  select(where(is.numeric)) %&gt;% \n  names()\n\n [1] \"generation\"      \"age\"             \"age_years\"       \"lon\"            \n [5] \"lat\"             \"wt_kg\"           \"ht_cm\"           \"ct_blood\"       \n [9] \"temp\"            \"bmi\"             \"days_onset_hosp\"\n\n\nUse contains() to select only columns in which the column name contains a specified character string. ends_with() and starts_with() provide more nuance.\n\n# select columns containing certain characters\nlinelist %&gt;% \n  select(contains(\"date\")) %&gt;% \n  names()\n\n[1] \"date_infection\"       \"date_onset\"           \"date_hospitalisation\"\n[4] \"date_outcome\"        \n\n\nThe function matches() works similarly to contains() but can be provided a regular expression, such as multiple strings separated by OR bars within the parentheses:\n\n# searched for multiple character matches\nlinelist %&gt;% \n  select(matches(\"onset|hosp|fev\")) %&gt;%   # note the OR symbol \"|\"\n  names()\n\n[1] \"date_onset\"           \"date_hospitalisation\" \"hospital\"            \n[4] \"fever\"                \"days_onset_hosp\""
  },
  {
    "objectID": "readings/manage-data.html#deduplication",
    "href": "readings/manage-data.html#deduplication",
    "title": "Managing Data",
    "section": "",
    "text": "In a later week we will learn more about how to de-duplicate data. Only a very simple row de-duplication example is presented here.\nThe package dplyr offers the distinct() function. This function examines every row and reduce the data frame to only the unique rows. That is, it removes rows that are 100% duplicates.\nWhen evaluating duplicate rows, it takes into account a range of columns - by default it considers all columns. As shown in the de-duplication page, you can adjust this column range so that the uniqueness of rows is only evaluated in regards to certain columns.\nIn this simple example, we just add the empty command distinct() to the pipe chain. This ensures there are no rows that are 100% duplicates of other rows (evaluated across all columns).\nWe begin with nrow(linelist) rows in linelist.\n\nlinelist &lt;- linelist %&gt;% \n  distinct()\n\nAfter de-duplication there are nrow(linelist) rows. Any removed rows would have been 100% duplicates of other rows."
  },
  {
    "objectID": "readings/manage-data.html#grouping",
    "href": "readings/manage-data.html#grouping",
    "title": "Managing Data",
    "section": "Grouping",
    "text": "Grouping\nThe function group_by() from dplyr groups the rows by the unique values in the column specified to it. If multiple columns are specified, rows are grouped by the unique combinations of values across the columns. Each unique value (or combination of values) constitutes a group. Subsequent changes to the dataset or calculations can then be performed within the context of each group.\nFor example, the command below takes the linelist and groups the rows by unique values in the column outcome, saving the output as a new data frame ll_by_outcome. The grouping column(s) are placed inside the parentheses of the function group_by().\n\nll_by_outcome &lt;- linelist %&gt;% \n  group_by(outcome)\n\nNote that there is no perceptible change to the dataset after running group_by(), until another dplyr verb such as mutate(), summarise(), or arrange() is applied on the “grouped” data frame.\nYou can however “see” the groupings by printing the data frame. When you print a grouped data frame, you will see it has been transformed into a tibble class object which, when printed, displays which groupings have been applied and how many groups there are - written just above the header row.\n\n# print to see which groups are active\nll_by_outcome\n\n# A tibble: 5,888 × 30\n# Groups:   outcome [3]\n   case_id generation date_infection date_onset date_hospitalisation\n   &lt;chr&gt;        &lt;dbl&gt; &lt;date&gt;         &lt;date&gt;     &lt;date&gt;              \n 1 5fe599           4 2014-05-08     2014-05-13 2014-05-15          \n 2 8689b7           4 NA             2014-05-13 2014-05-14          \n 3 11f8ea           2 NA             2014-05-16 2014-05-18          \n 4 b8812a           3 2014-05-04     2014-05-18 2014-05-20          \n 5 893f25           3 2014-05-18     2014-05-21 2014-05-22          \n 6 be99c8           3 2014-05-03     2014-05-22 2014-05-23          \n 7 07e3e8           4 2014-05-22     2014-05-27 2014-05-29          \n 8 369449           4 2014-05-28     2014-06-02 2014-06-03          \n 9 f393b4           4 NA             2014-06-05 2014-06-06          \n10 1389ca           4 NA             2014-06-05 2014-06-07          \n# ℹ 5,878 more rows\n# ℹ 25 more variables: date_outcome &lt;date&gt;, outcome &lt;chr&gt;, gender &lt;chr&gt;,\n#   age &lt;dbl&gt;, age_unit &lt;chr&gt;, age_years &lt;dbl&gt;, age_cat &lt;fct&gt;, age_cat5 &lt;fct&gt;,\n#   hospital &lt;chr&gt;, lon &lt;dbl&gt;, lat &lt;dbl&gt;, infector &lt;chr&gt;, source &lt;chr&gt;,\n#   wt_kg &lt;dbl&gt;, ht_cm &lt;dbl&gt;, ct_blood &lt;dbl&gt;, fever &lt;chr&gt;, chills &lt;chr&gt;,\n#   cough &lt;chr&gt;, aches &lt;chr&gt;, vomit &lt;chr&gt;, temp &lt;dbl&gt;, time_admission &lt;chr&gt;,\n#   bmi &lt;dbl&gt;, days_onset_hosp &lt;dbl&gt;\n\n\n\nUnique groups\nThe groups created reflect each unique combination of values across the grouping columns.\nTo see the groups and the number of rows in each group, pass the grouped data to tally(). To see just the unique groups without counts you can pass to group_keys().\nSee below that there are three unique values in the grouping column outcome: “Death”, “Recover”, and NA. See that there were nrow(linelist %&gt;% filter(outcome == \"Death\")) deaths, nrow(linelist %&gt;% filter(outcome == \"Recover\")) recoveries, and nrow(linelist %&gt;% filter(is.na(outcome))) with no outcome recorded.\n\nlinelist %&gt;% \n  group_by(outcome) %&gt;% \n  tally()\n\n# A tibble: 3 × 2\n  outcome     n\n  &lt;chr&gt;   &lt;int&gt;\n1 Death    2582\n2 Recover  1983\n3 &lt;NA&gt;     1323\n\n\nYou can group by more than one column. Below, the data frame is grouped by outcome and gender, and then tallied. Note how each unique combination of outcome and gender is registered as its own group - including missing values for either column.\n\nlinelist %&gt;% \n  group_by(outcome, gender) %&gt;% \n  tally()\n\n# A tibble: 9 × 3\n# Groups:   outcome [3]\n  outcome gender     n\n  &lt;chr&gt;   &lt;chr&gt;  &lt;int&gt;\n1 Death   f       1227\n2 Death   m       1228\n3 Death   &lt;NA&gt;     127\n4 Recover f        953\n5 Recover m        950\n6 Recover &lt;NA&gt;      80\n7 &lt;NA&gt;    f        627\n8 &lt;NA&gt;    m        625\n9 &lt;NA&gt;    &lt;NA&gt;      71\n\n\n\n\nNew columns\nYou can also create a new grouping column within the group_by() statement. This is equivalent to calling mutate() before the group_by(). For a quick tabulation this style can be handy, but for more clarity in your code consider creating this column in its own mutate() step and then piping to group_by().\n\n# group dat based on a binary column created *within* the group_by() command\nlinelist %&gt;% \n  group_by(\n    age_class = ifelse(age &gt;= 18, \"adult\", \"child\")) %&gt;% \n  tally(sort = T)\n\n# A tibble: 3 × 2\n  age_class     n\n  &lt;chr&gt;     &lt;int&gt;\n1 child      3618\n2 adult      2184\n3 &lt;NA&gt;         86\n\n\n\n\nAdd/drop grouping columns\nBy default, if you run group_by() on data that are already grouped, the old groups will be removed and the new one(s) will apply. If you want to add new groups to the existing ones, include the argument .add = TRUE.\n\n# Grouped by outcome\nby_outcome &lt;- linelist %&gt;% \n  group_by(outcome)\n\n# Add grouping by gender in addition\nby_outcome_gender &lt;- by_outcome %&gt;% \n  group_by(gender, .add = TRUE)\n\n** Keep all groups**\nIf you group on a column of class factor there may be levels of the factor that are not currently present in the data. If you group on this column, by default those non-present levels are dropped and not included as groups. To change this so that all levels appear as groups (even if not present in the data), set .drop = FALSE in your group_by() command."
  },
  {
    "objectID": "readings/manage-data.html#un-group",
    "href": "readings/manage-data.html#un-group",
    "title": "Managing Data",
    "section": "Un-group",
    "text": "Un-group\nData that have been grouped will remain grouped until specifically ungrouped via ungroup(). If you forget to ungroup, it can lead to incorrect calculations! Below is an example of removing all groupings:\n\nlinelist %&gt;% \n  group_by(outcome, gender) %&gt;% \n  tally() %&gt;% \n  ungroup()\n\nYou can also remove grouping for only specific columns, by placing the column name inside ungroup().\n\nlinelist %&gt;% \n  group_by(outcome, gender) %&gt;% \n  tally() %&gt;% \n  ungroup(gender) # remove the grouping by gender, leave grouping by outcome\n\n\n\n\n\n\n\nTip\n\n\n\nThe verb count() automatically ungroups the data after counting."
  },
  {
    "objectID": "readings/manage-data.html#group_summarise",
    "href": "readings/manage-data.html#group_summarise",
    "title": "Managing Data",
    "section": "Summarise",
    "text": "Summarise\nSee the dplyr section of the [Descriptive tables] page for a detailed description of how to produce summary tables with summarise(). Here we briefly address how its behavior changes when applied to grouped data.\nThe dplyr function summarise() (or summarize()) takes a data frame and converts it into a new summary data frame, with columns containing summary statistics that you define. On an ungrouped data frame, the summary statistics will be calculated from all rows. Applying summarise() to grouped data produces those summary statistics for each group.\nThe syntax of summarise() is such that you provide the name(s) of the new summary column(s), an equals sign, and then a statistical function to apply to the data, as shown below. For example, min(), max(), median(), or sd(). Within the statistical function, list the column to be operated on and any relevant argument (e.g. na.rm = TRUE). You can use sum() to count the number of rows that meet a logical criteria (with double equals ==).\nBelow is an example of summarise() applied without grouped data. The statistics returned are produced from the entire dataset.\n\n# summary statistics on ungrouped linelist\nlinelist %&gt;% \n  summarise(\n    n_cases  = n(),\n    mean_age = mean(age_years, na.rm=T),\n    max_age  = max(age_years, na.rm=T),\n    min_age  = min(age_years, na.rm=T),\n    n_males  = sum(gender == \"m\", na.rm=T))\n\n  n_cases mean_age max_age min_age n_males\n1    5888 16.01831      84       0    2803\n\n\nIn contrast, below is the same summarise() statement applied to grouped data. The statistics are calculated for each outcome group. Note how grouping columns will carry over into the new data frame.\n\n# summary statistics on grouped linelist\nlinelist %&gt;% \n  group_by(outcome) %&gt;% \n  summarise(\n    n_cases  = n(),\n    mean_age = mean(age_years, na.rm=T),\n    max_age  = max(age_years, na.rm=T),\n    min_age  = min(age_years, na.rm=T),\n    n_males    = sum(gender == \"m\", na.rm=T))\n\n# A tibble: 3 × 6\n  outcome n_cases mean_age max_age min_age n_males\n  &lt;chr&gt;     &lt;int&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;int&gt;\n1 Death      2582     15.9      76       0    1228\n2 Recover    1983     16.1      84       0     950\n3 &lt;NA&gt;       1323     16.2      69       0     625"
  },
  {
    "objectID": "readings/manage-data.html#counts-and-tallies",
    "href": "readings/manage-data.html#counts-and-tallies",
    "title": "Managing Data",
    "section": "Counts and tallies",
    "text": "Counts and tallies\ncount() and tally() provide similar functionality but are different. Read more about the distinction between tally() and count() here\n\ntally()\ntally() is shorthand for summarise(n = n()), and does not group data. Thus, to achieve grouped tallys it must follow a group_by() command. You can add sort = TRUE to see the largest groups first.\n\nlinelist %&gt;% \n  tally()\n\n     n\n1 5888\n\n\n\nlinelist %&gt;% \n  group_by(outcome) %&gt;% \n  tally(sort = TRUE)\n\n# A tibble: 3 × 2\n  outcome     n\n  &lt;chr&gt;   &lt;int&gt;\n1 Death    2582\n2 Recover  1983\n3 &lt;NA&gt;     1323\n\n\n\n\ncount()\nIn contrast, count() does the following:\n\napplies group_by() on the specified column(s)\n\napplies summarise() and returns column n with the number of rows per group\n\napplies ungroup()\n\n\nlinelist %&gt;% \n  count(outcome)\n\n  outcome    n\n1   Death 2582\n2 Recover 1983\n3    &lt;NA&gt; 1323\n\n\nJust like with group_by() you can create a new column within the count() command:\n\nlinelist %&gt;% \n  count(age_class = ifelse(age &gt;= 18, \"adult\", \"child\"), sort = T)\n\n  age_class    n\n1     child 3618\n2     adult 2184\n3      &lt;NA&gt;   86\n\n\ncount() can be called multiple times, with the functionality “rolling up”. For example, to summarise the number of hospitals present for each gender, run the following. Note, the name of the final column is changed from default “n” for clarity (with name  =).\n\nlinelist %&gt;% \n  # produce counts by unique outcome-gender groups\n  count(gender, hospital) %&gt;% \n  # gather rows by gender (3) and count number of hospitals per gender (6)\n  count(gender, name = \"hospitals per gender\" ) \n\n  gender hospitals per gender\n1      f                    6\n2      m                    6\n3   &lt;NA&gt;                    6\n\n\n\n\nAdd counts\nIn contrast to count() and summarise(), you can use add_count() to add a new column n with the counts of rows per group while retaining all the other data frame columns.\nThis means that a group’s count number, in the new column n, will be printed in each row of the group. For demonstration purposes, we add this column and then re-arrange the columns for easier viewing. See the section below on filter on group size for another example.\n\nlinelist %&gt;% \n  as_tibble() %&gt;%                   # convert to tibble for nicer printing \n  add_count(hospital) %&gt;%           # add column n with counts by hospital\n  select(hospital, n, everything()) # re-arrange for demo purposes\n\n# A tibble: 5,888 × 31\n   hospital                       n case_id generation date_infection date_onset\n   &lt;chr&gt;                      &lt;int&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;date&gt;         &lt;date&gt;    \n 1 Other                        885 5fe599           4 2014-05-08     2014-05-13\n 2 Missing                     1469 8689b7           4 NA             2014-05-13\n 3 St. Mark's Maternity Hosp…   422 11f8ea           2 NA             2014-05-16\n 4 Port Hospital               1762 b8812a           3 2014-05-04     2014-05-18\n 5 Military Hospital            896 893f25           3 2014-05-18     2014-05-21\n 6 Port Hospital               1762 be99c8           3 2014-05-03     2014-05-22\n 7 Missing                     1469 07e3e8           4 2014-05-22     2014-05-27\n 8 Missing                     1469 369449           4 2014-05-28     2014-06-02\n 9 Missing                     1469 f393b4           4 NA             2014-06-05\n10 Missing                     1469 1389ca           4 NA             2014-06-05\n# ℹ 5,878 more rows\n# ℹ 25 more variables: date_hospitalisation &lt;date&gt;, date_outcome &lt;date&gt;,\n#   outcome &lt;chr&gt;, gender &lt;chr&gt;, age &lt;dbl&gt;, age_unit &lt;chr&gt;, age_years &lt;dbl&gt;,\n#   age_cat &lt;fct&gt;, age_cat5 &lt;fct&gt;, lon &lt;dbl&gt;, lat &lt;dbl&gt;, infector &lt;chr&gt;,\n#   source &lt;chr&gt;, wt_kg &lt;dbl&gt;, ht_cm &lt;dbl&gt;, ct_blood &lt;dbl&gt;, fever &lt;chr&gt;,\n#   chills &lt;chr&gt;, cough &lt;chr&gt;, aches &lt;chr&gt;, vomit &lt;chr&gt;, temp &lt;dbl&gt;,\n#   time_admission &lt;chr&gt;, bmi &lt;dbl&gt;, days_onset_hosp &lt;dbl&gt;\n\n\n\n\nAdd totals\nTo easily add total sum rows or columns after using tally() or count() you can use the tabyl function from janitor. This package also offers functions like adorn_totals() and adorn_percentages() to add totals and convert to show percentages. Below is a brief example:\n\nlinelist %&gt;%                                  # case linelist\n  tabyl(age_cat, gender) %&gt;%                  # cross-tabulate counts of two columns\n  adorn_totals(where = \"row\") %&gt;%             # add a total row\n  adorn_percentages(denominator = \"col\") %&gt;%  # convert to proportions with column denominator\n  adorn_pct_formatting() %&gt;%                  # convert proportions to percents\n  adorn_ns(position = \"front\") %&gt;%            # display as: \"count (percent)\"\n  adorn_title(                                # adjust titles\n    row_name = \"Age Category\",\n    col_name = \"Gender\")\n\n                      Gender                            \n Age Category              f              m          NA_\n          0-4   640  (22.8%)   416  (14.8%)  39  (14.0%)\n          5-9   641  (22.8%)   412  (14.7%)  42  (15.1%)\n        10-14   518  (18.5%)   383  (13.7%)  40  (14.4%)\n        15-19   359  (12.8%)   364  (13.0%)  20   (7.2%)\n        20-29   468  (16.7%)   575  (20.5%)  30  (10.8%)\n        30-49   179   (6.4%)   557  (19.9%)  18   (6.5%)\n        50-69     2   (0.1%)    91   (3.2%)   2   (0.7%)\n          70+     0   (0.0%)     5   (0.2%)   1   (0.4%)\n         &lt;NA&gt;     0   (0.0%)     0   (0.0%)  86  (30.9%)\n        Total 2,807 (100.0%) 2,803 (100.0%) 278 (100.0%)\n\n\nTo add more complex totals rows that involve summary statistics other than sums, see this section of the Descriptive Tables page.\n\n\nArranging grouped data\nUsing the dplyr verb arrange() to order the rows in a data frame behaves the same when the data are grouped, unless you set the argument .by_group =TRUE. In this case the rows are ordered first by the grouping columns and then by any other columns you specify to arrange().\n\n\nFilter on grouped data\n\nfilter()\nWhen applied in conjunction with functions that evaluate the data frame (like max(), min(), mean()), these functions will now be applied to the groups. For example, if you want to filter and keep rows where patients are above the median age, this will now apply per group - filtering to keep rows above the group’s median age.\n\n\nSlice rows per group\nThe dplyr function slice(), which filters rows based on their position in the data, can also be applied per group. Remember to account for sorting the data within each group to get the desired “slice”.\nFor example, to retrieve only the latest 5 admissions from each hospital:\n\nGroup the linelist by column hospital\n\nArrange the records from latest to earliest date_hospitalisation within each hospital group\n\nSlice to retrieve the first 5 rows from each hospital\n\n\nlinelist %&gt;%\n  group_by(hospital) %&gt;%\n  arrange(hospital, date_hospitalisation) %&gt;%\n  slice_head(n = 5) %&gt;% \n  arrange(hospital) %&gt;%                            # for display\n  select(case_id, hospital, date_hospitalisation)  # for display\n\n# A tibble: 30 × 3\n# Groups:   hospital [6]\n   case_id hospital          date_hospitalisation\n   &lt;chr&gt;   &lt;chr&gt;             &lt;date&gt;              \n 1 20b688  Central Hospital  2014-05-06          \n 2 d58402  Central Hospital  2014-05-10          \n 3 b8f2fd  Central Hospital  2014-05-13          \n 4 acf422  Central Hospital  2014-05-28          \n 5 275cc7  Central Hospital  2014-05-28          \n 6 d1fafd  Military Hospital 2014-04-17          \n 7 974bc1  Military Hospital 2014-05-13          \n 8 6a9004  Military Hospital 2014-05-13          \n 9 09e386  Military Hospital 2014-05-14          \n10 865581  Military Hospital 2014-05-15          \n# ℹ 20 more rows\n\n\nslice_head() - selects n rows from the top\nslice_tail() - selects n rows from the end\nslice_sample() - randomly selects n rows\nslice_min() - selects n rows with highest values in order_by = column, use with_ties = TRUE to keep ties\nslice_max() - selects n rows with lowest values in order_by = column, use with_ties = TRUE to keep ties\nSee the [De-duplication] page for more examples and detail on slice().\n\n\nFilter on group size\nThe function add_count() adds a column n to the original data giving the number of rows in that row’s group.\nShown below, add_count() is applied to the column hospital, so the values in the new column n reflect the number of rows in that row’s hospital group. Note how values in column n are repeated. In the example below, the column name n could be changed using name = within add_count(). For demonstration purposes we re-arrange the columns with select().\n\nlinelist %&gt;% \n  as_tibble() %&gt;% \n  add_count(hospital) %&gt;%          # add \"number of rows admitted to same hospital as this row\" \n  select(hospital, n, everything())\n\n# A tibble: 5,888 × 31\n   hospital                       n case_id generation date_infection date_onset\n   &lt;chr&gt;                      &lt;int&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;date&gt;         &lt;date&gt;    \n 1 Other                        885 5fe599           4 2014-05-08     2014-05-13\n 2 Missing                     1469 8689b7           4 NA             2014-05-13\n 3 St. Mark's Maternity Hosp…   422 11f8ea           2 NA             2014-05-16\n 4 Port Hospital               1762 b8812a           3 2014-05-04     2014-05-18\n 5 Military Hospital            896 893f25           3 2014-05-18     2014-05-21\n 6 Port Hospital               1762 be99c8           3 2014-05-03     2014-05-22\n 7 Missing                     1469 07e3e8           4 2014-05-22     2014-05-27\n 8 Missing                     1469 369449           4 2014-05-28     2014-06-02\n 9 Missing                     1469 f393b4           4 NA             2014-06-05\n10 Missing                     1469 1389ca           4 NA             2014-06-05\n# ℹ 5,878 more rows\n# ℹ 25 more variables: date_hospitalisation &lt;date&gt;, date_outcome &lt;date&gt;,\n#   outcome &lt;chr&gt;, gender &lt;chr&gt;, age &lt;dbl&gt;, age_unit &lt;chr&gt;, age_years &lt;dbl&gt;,\n#   age_cat &lt;fct&gt;, age_cat5 &lt;fct&gt;, lon &lt;dbl&gt;, lat &lt;dbl&gt;, infector &lt;chr&gt;,\n#   source &lt;chr&gt;, wt_kg &lt;dbl&gt;, ht_cm &lt;dbl&gt;, ct_blood &lt;dbl&gt;, fever &lt;chr&gt;,\n#   chills &lt;chr&gt;, cough &lt;chr&gt;, aches &lt;chr&gt;, vomit &lt;chr&gt;, temp &lt;dbl&gt;,\n#   time_admission &lt;chr&gt;, bmi &lt;dbl&gt;, days_onset_hosp &lt;dbl&gt;\n\n\nIt then becomes easy to filter for case rows who were hospitalized at a “small” hospital, say, a hospital that admitted fewer than 500 patients:\n\nlinelist %&gt;% \n  add_count(hospital) %&gt;% \n  filter(n &lt; 500)\n\n\n\n\nMutate on grouped data\nTo retain all columns and rows (not summarise) and add a new column containing group statistics, use mutate() after group_by() instead of summarise().\nThis is useful if you want group statistics in the original dataset with all other columns present - e.g. for calculations that compare one row to its group.\nFor example, this code below calculates the difference between a row’s delay-to-admission and the median delay for their hospital. The steps are:\n\nGroup the data by hospital\n\nUse the column days_onset_hosp (delay to hospitalisation) to create a new column containing the mean delay at the hospital of that row\n\nCalculate the difference between the two columns\n\nWe select() only certain columns to display, for demonstration purposes.\n\nlinelist %&gt;% \n  # group data by hospital (no change to linelist yet)\n  group_by(hospital) %&gt;% \n  \n  # new columns\n  mutate(\n    # mean days to admission per hospital (rounded to 1 decimal)\n    group_delay_admit = round(mean(days_onset_hosp, na.rm=T), 1),\n    \n    # difference between row's delay and mean delay at their hospital (rounded to 1 decimal)\n    diff_to_group     = round(days_onset_hosp - group_delay_admit, 1)) %&gt;%\n  \n  # select certain rows only - for demonstration/viewing purposes\n  select(case_id, hospital, days_onset_hosp, group_delay_admit, diff_to_group)\n\n# A tibble: 5,888 × 5\n# Groups:   hospital [6]\n   case_id hospital              days_onset_hosp group_delay_admit diff_to_group\n   &lt;chr&gt;   &lt;chr&gt;                           &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n 1 5fe599  Other                               2               2             0  \n 2 8689b7  Missing                             1               2.1          -1.1\n 3 11f8ea  St. Mark's Maternity…               2               2.1          -0.1\n 4 b8812a  Port Hospital                       2               2.1          -0.1\n 5 893f25  Military Hospital                   1               2.1          -1.1\n 6 be99c8  Port Hospital                       1               2.1          -1.1\n 7 07e3e8  Missing                             2               2.1          -0.1\n 8 369449  Missing                             1               2.1          -1.1\n 9 f393b4  Missing                             1               2.1          -1.1\n10 1389ca  Missing                             2               2.1          -0.1\n# ℹ 5,878 more rows\n\n\n\n\nSelect on grouped data\nThe verb select() works on grouped data, but the grouping columns are always included (even if not mentioned in select()). If you do not want these grouping columns, use ungroup() first."
  },
  {
    "objectID": "readings/manage-data.html#appending-datasets",
    "href": "readings/manage-data.html#appending-datasets",
    "title": "Managing Data",
    "section": "Appending Datasets",
    "text": "Appending Datasets\nWe often need to combine multiple sources of data. Later on we’ll see more complex methods for combining data based on matching ID’s or other values. However, to start we’ll look at the case where we want to add additional observations to a dataset. You can also think of this as “appending” or “adding” rows.\n\nBind rows\nTo bind rows of one data frame to the bottom of another data frame, use bind_rows() from dplyr. It is very inclusive, so any column present in either data frame will be included in the output. A few notes:\n\nUnlike the base R version row.bind(), dplyr’s bind_rows() does not require that the order of columns be the same in both data frames. As long as the column names are spelled identically, it will align them correctly.\n\nYou can optionally specify the argument .id =. Provide a character column name. This will produce a new column that serves to identify which data frame each row originally came from.\n\nYou can use bind_rows() on a list of similarly-structured data frames to combine them into one data frame.\n\nOne common example of row binding is to bind a “total” row onto a descriptive table made with dplyr’s summarise() function. Below we create a table of case counts and median CT values by hospital with a total row.\nThe function summarise() is used on data grouped by hospital to return a summary data frame by hospital. But the function summarise() does not automatically produce a “totals” row, so we create it by summarising the data again, but with the data not grouped by hospital. This produces a second data frame of just one row. We can then bind these data frames together to achieve the final table.\n\n# Create core table\n###################\nhosp_summary &lt;- linelist %&gt;% \n  group_by(hospital) %&gt;%                        # Group data by hospital\n  summarise(                                    # Create new summary columns of indicators of interest\n    cases = n(),                                  # Number of rows per hospital-outcome group     \n    ct_value_med = median(ct_blood, na.rm=T))     # median CT value per group\n\nHere is the hosp_summary data frame:\n\n\n# A tibble: 6 × 3\n  hospital                             cases ct_value_med\n  &lt;chr&gt;                                &lt;int&gt;        &lt;dbl&gt;\n1 Central Hospital                       454           22\n2 Military Hospital                      896           21\n3 Missing                               1469           21\n4 Other                                  885           22\n5 Port Hospital                         1762           22\n6 St. Mark's Maternity Hospital (SMMH)   422           22\n\n\nCreate a data frame with the “total” statistics (not grouped by hospital). This will return just one row.\n\n# create totals\n###############\ntotals &lt;- linelist %&gt;% \n  summarise(\n    cases = n(),                               # Number of rows for whole dataset     \n    ct_value_med = median(ct_blood, na.rm=T))  # Median CT for whole dataset\n\nAnd below is that totals data frame. Note how there are only two columns. These columns are also in hosp_summary, but there is one column in hosp_summary that is not in totals (hospital).\n\n\n  cases ct_value_med\n1  5888           22\n\n\nNow we can bind the rows together with bind_rows().\n\n# Bind data frames together\ncombined &lt;- bind_rows(hosp_summary, totals)\n\nNow we can view the result. See how in the final row, an empty NA value fills in for the column hospital that was not in hosp_summary.\n\n\n# A tibble: 7 × 3\n  hospital                             cases ct_value_med\n  &lt;chr&gt;                                &lt;int&gt;        &lt;dbl&gt;\n1 Central Hospital                       454           22\n2 Military Hospital                      896           21\n3 Missing                               1469           21\n4 Other                                  885           22\n5 Port Hospital                         1762           22\n6 St. Mark's Maternity Hospital (SMMH)   422           22\n7 &lt;NA&gt;                                  5888           22"
  },
  {
    "objectID": "readings/readings.html",
    "href": "readings/readings.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome!\nIn this module of the course, we will be learning how to use R to analyze data. This workbook will contain pre-class readings, in-class materials, and links to additional resources.\nMost of this workbook has been adapted from The Epidemiologist R Handbook. You can find more details at the bottom of this page.\n\n\nAs stated on the R project website, R is a programming language and environment for statistical computing and graphics. It is highly versatile, extendable, and community-driven.\n\n\nThe learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that’s a good thing! So, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results; you just have to run your script again.\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\nWorking with scripts forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n\n\nReproducibility means that someone else (including your future self) can obtain the same results from the same dataset when using the same analysis code.\nR integrates with other tools to generate manuscripts or reports from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript or report are updated automatically.\nAn increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n\n\nWith 10000+ packages1 that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyse your data. For instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more.\n\n\n\n\n\nExponential increase of the number of packages available on CRAN, the Comprehensive R Archive Network. From the R Journal, Volume 10/2, December 2018.\n\n\n\n\n\n\n\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you.\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient.\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n\n\nThe plotting functionalities in R are extensive, and allow you to adjust any aspect of your graph to convey most effectively the message from your data.\n\n\n\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, or on the RStudio community. These broad user communities extend to specialised areas such as bioinformatics. One such subset of the R community is Bioconductor, a scientific project for analysis and comprehension “of data from current and emerging biological assays.” Another example is R-Ladies, a worldwide organization whose mission is to promote gender diversity in the R community. It is one of the largest organizations of R users and likely has a chapter near you!\n\n\n\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs.\n\n\n\n\nMost of the materials in this workbook have been adapted from The Epidemiologist R Handbook with some changes made and materials incorporated from other sources. These additional sources are attributed in the chapters they are a part of. The Epidemiologist R Handbook is licensed by Applied Epi Incorporated under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "readings/readings.html#why-learn-r",
    "href": "readings/readings.html#why-learn-r",
    "title": "Introduction",
    "section": "",
    "text": "As stated on the R project website, R is a programming language and environment for statistical computing and graphics. It is highly versatile, extendable, and community-driven.\n\n\nThe learning curve might be steeper than with other software, but with R, the results of your analysis do not rely on remembering a succession of pointing and clicking, but instead on a series of written commands, and that’s a good thing! So, if you want to redo your analysis because you collected more data, you don’t have to remember which button you clicked in which order to obtain your results; you just have to run your script again.\nWorking with scripts makes the steps you used in your analysis clear, and the code you write can be inspected by someone else who can give you feedback and spot mistakes.\nWorking with scripts forces you to have a deeper understanding of what you are doing, and facilitates your learning and comprehension of the methods you use.\n\n\n\nReproducibility means that someone else (including your future self) can obtain the same results from the same dataset when using the same analysis code.\nR integrates with other tools to generate manuscripts or reports from your code. If you collect more data, or fix a mistake in your dataset, the figures and the statistical tests in your manuscript or report are updated automatically.\nAn increasing number of journals and funding agencies expect analyses to be reproducible, so knowing R will give you an edge with these requirements.\n\n\n\nWith 10000+ packages1 that can be installed to extend its capabilities, R provides a framework that allows you to combine statistical approaches from many scientific disciplines to best suit the analytical framework you need to analyse your data. For instance, R has packages for image analysis, GIS, time series, population genetics, and a lot more.\n\n\n\n\n\nExponential increase of the number of packages available on CRAN, the Comprehensive R Archive Network. From the R Journal, Volume 10/2, December 2018.\n\n\n\n\n\n\n\nThe skills you learn with R scale easily with the size of your dataset. Whether your dataset has hundreds or millions of lines, it won’t make much difference to you.\nR is designed for data analysis. It comes with special data structures and data types that make handling of missing data and statistical factors convenient.\nR can connect to spreadsheets, databases, and many other data formats, on your computer or on the web.\n\n\n\nThe plotting functionalities in R are extensive, and allow you to adjust any aspect of your graph to convey most effectively the message from your data.\n\n\n\nThousands of people use R daily. Many of them are willing to help you through mailing lists and websites such as Stack Overflow, or on the RStudio community. These broad user communities extend to specialised areas such as bioinformatics. One such subset of the R community is Bioconductor, a scientific project for analysis and comprehension “of data from current and emerging biological assays.” Another example is R-Ladies, a worldwide organization whose mission is to promote gender diversity in the R community. It is one of the largest organizations of R users and likely has a chapter near you!\n\n\n\nAnyone can inspect the source code to see how R works. Because of this transparency, there is less chance for mistakes, and if you (or someone else) find some, you can report and fix bugs."
  },
  {
    "objectID": "readings/readings.html#sources-and-references",
    "href": "readings/readings.html#sources-and-references",
    "title": "Introduction",
    "section": "",
    "text": "Most of the materials in this workbook have been adapted from The Epidemiologist R Handbook with some changes made and materials incorporated from other sources. These additional sources are attributed in the chapters they are a part of. The Epidemiologist R Handbook is licensed by Applied Epi Incorporated under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "readings/readings.html#footnotes",
    "href": "readings/readings.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ni.e. add-ons that confer R with new functionality, such as bioinformatics data analysis.↩︎"
  },
  {
    "objectID": "readings/rstudio.html",
    "href": "readings/rstudio.html",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "RStudio is freely available open-source Integrated Development Environment (IDE). RStudio provides an environment with many features to make using R easier and is a great alternative to working on R in the terminal.\nYou can see the complete RStudio user-interface cheatsheet (PDF) here\n\n\n\nLet’s create a new project directory for the Research and Design course.\n\nOpen RStudio\nGo to the File menu and select New Project.\nIn the New Project window, choose New Directory. Then, choose New Project. Name your new directory whatever you want and then “Create the project as subdirectory of:” the Desktop (or location of your choice).\nClick on Create Project.\nAfter your project is completed, if the project does not automatically open in RStudio, then go to the File menu, select Open Project, and choose [your project name].Rproj.\nWhen RStudio opens, you will see three panels in the window.\nGo to the File menu and select New File, and select R Script. The RStudio interface should now look like the screenshot below.\n\nTIP: If your RStudio displays only one left pane it is because you have no scripts open yet.\n\n\n\nRStudio interface\n\n\n\n\nIt is simply a directory that contains everything related your analyses for a specific project. RStudio projects are useful when you are working on context- specific analyses and you wish to keep them separate. When creating a project in RStudio you associate it with a working directory of your choice (either an existing one, or a new one). A . RProj file is created within that directory and that keeps track of your command history and variables in the environment. The . RProj file can be used to open the project in its current state but at a later date.\nWhen a project is (re) opened within RStudio the following actions are taken:\n\nA new R session (process) is started\nThe .RData file in the project’s main directory is loaded, populating the environment with any objects that were present when the project was closed.\nThe .Rhistory file in the project’s main directory is loaded into the RStudio History pane (and used for Console Up/Down arrow command history).\nThe current working directory is set to the project directory.\nPreviously edited source documents are restored into editor tabs\nOther RStudio settings (e.g. active tabs, splitter positions, etc.) are restored to where they were the last time the project was closed.\n\nInformation adapted from RStudio Support Site\n\n\n\n\nThe RStudio interface has four main panels:\n\nConsole: where you can type commands and see output. The console is all you would see if you ran R in the command line without RStudio.\nScript editor: where you can type out commands and save to file. You can also submit the commands to run in the console.\nEnvironment/History: environment shows all active objects and history keeps track of all commands run in console\nFiles/Plots/Packages/Help\n\n\n\n\n\n\nBefore we organize our working directory, let’s check to see where our current working directory is located by typing into the console:\n\ngetwd()\n\nYour working directory should be the Intro-to-R folder constructed when you created the project. The working directory is where RStudio will automatically look for any files you bring in and where it will automatically save any files you create, unless otherwise specified.\nYou can visualize your working directory by selecting the Files tab from the Files/Plots/Packages/Help window.\n\n\n\nViewing your working directory\n\n\nIf you wanted to choose a different directory to be your working directory, you could navigate to a different folder in the Files tab, then, click on the More dropdown menu and select Set As Working Directory.\n\n\n\nSetting your working directory\n\n\n\n\n\nTo organize your working directory for a particular analysis, you typically want to separate the original data (raw data) from intermediate datasets. For instance, you may want to create a data/ directory within your working directory that stores the raw data, and have a results/ directory for intermediate datasets and a figures/ directory for the plots you will generate.\nLet’s create these three directories within your working directory by clicking on New Folder within the Files tab.\n\n\n\nStructuring your working directory\n\n\nWhen finished, your working directory should look like:\n\n\n\nYour organized working directory\n\n\n\n\n\nThis is more of a housekeeping task. We will be writing long lines of code in our script editor and want to make sure that the lines “wrap” and you don’t have to scroll back and forth to look at your long line of code.\nClick on “Tools” at the top of your RStudio screen and click on “Global Options” in the pull down menu.\n\n\n\noptions\n\n\nOn the left, select “Code” and put a check against “Soft-wrap R source files”. Make sure you click the “Apply” button at the bottom of the Window before saying “OK”.\n\n\n\nwrap_options\n\n\n\n\n\n\nNow that we have our interface and directory structure set up, let’s start playing with R! There are two main ways of interacting with R in RStudio: using the console or by using script editor (plain text files that contain your code).\n\n\nThe console window (in RStudio, the bottom left panel) is the place where R is waiting for you to tell it what to do, and where it will show the results of a command. You can type commands directly into the console, but they will be forgotten when you close the session.\n\n\n\nRunning in the console\n\n\n\n\n\nBest practice is to enter the commands in the script editor, and save the script. You are encouraged to comment liberally to describe the commands you are running using #. This way, you have a complete record of what you did, you can easily show others how you did it and you can do it again later on if needed.\nThe Rstudio script editor allows you to ‘send’ the current line or the currently highlighted text to the R console by clicking on the Run button in the upper-right hand corner of the script editor. Alternatively, you can run by simply pressing the Ctrl and Enter keys at the same time as a shortcut.\nNow let’s try entering commands to the script editor and using the comments character # to add descriptions and highlighting the text to run:\n\n    # Session 1\n    # Feb 3, 2023\n\n    # Interacting with R\n    \n    # I am adding 3 and 5. \n    3+5\n\n\n\n\nRunning in the script editor\n\n\nYou should see the command run in the console and output the result.\n\n\n\nScript editor output\n\n\nWhat happens if we do that same command without the comment symbol #? Re-run the command after removing the # sign in the front:\n\nI am adding 3 and 5. R is fun!\n3+5\n\nNow R is trying to run that sentence as a command, and it doesn’t work. We get an error in the console “Error: unexpected symbol in”I am” means that the R interpreter did not know what to do with that command.”\n\n\n\nInterpreting the command prompt can help understand when R is ready to accept commands. Below lists the different states of the command prompt and how you can exit a command:\nConsole is ready to accept commands: &gt;.\nIf R is ready to accept commands, the R console shows a &gt; prompt.\nWhen the console receives a command (by directly typing into the console or running from the script editor (Ctrl-Enter), R will try to execute it.\nAfter running, the console will show the results and come back with a new &gt; prompt to wait for new commands.\nConsole is waiting for you to enter more data: +.\nIf R is still waiting for you to enter more data because it isn’t complete yet, the console will show a + prompt. It means that you haven’t finished entering a complete command. Often this can be due to you having not ‘closed’ a parenthesis or quotation.\nEscaping a command and getting a new prompt: esc\nIf you’re in Rstudio and you can’t figure out why your command isn’t running, you can click inside the console window and press esc to escape the command and bring back a new prompt &gt;.\n\n\n\nIn addition to some of the shortcuts described earlier in this lesson, we have listed a few more that can be helpful as you work in RStudio.\n\n\n\n\n\n\nShortcuts Table\n\n\n\n\n\nSome very useful keyboard shortcuts are below. See all the keyboard shortcuts for Windows, Max, and Linux in the second page of this RStudio user interface cheatsheet.\n\n\n\n\n\n\n\n\nWindows/Linux\nMac\nAction\n\n\n\n\nEsc\nEsc\nInterrupt current command (useful if you accidentally ran an incomplete command and cannot escape seeing “+” in the R console)\n\n\nCtrl+s\nCmd+s\nSave (script)\n\n\nTab\nTab\nAuto-complete\n\n\nCtrl + Enter\nCmd + Enter\nRun current line(s)/selection of code\n\n\nCtrl + Shift + C\nCmd + Shift + c\ncomment/uncomment the highlighted lines\n\n\nAlt + -\nOption + -\nInsert &lt;-\n\n\nCtrl + Shift + m\nCmd + Shift + m\nInsert %&gt;%\n\n\nCtrl + l\nCmd + l\nClear the R console\n\n\nCtrl + Alt + b\nCmd + Option + b\nRun from start to current line\n\n\nCtrl + Alt + t\nCmd + Option + t\nRun the current code section (R Markdown)\n\n\nCtrl + Alt + i\nCmd + Shift + r\nInsert code chunk (into R Markdown)\n\n\nCtrl + Alt + c\nCmd + Option + c\nRun current code chunk (R Markdown)\n\n\nup/down arrows in R console\nSame\nToggle through recently run commands\n\n\nShift + up/down arrows in script\nSame\nSelect multiple code lines\n\n\nCtrl + f\nCmd + f\nFind and replace in current script\n\n\nCtrl + Shift + f\nCmd + Shift + f\nFind in files (search/replace across many scripts)\n\n\nAlt + l\nCmd + Option + l\nFold selected code\n\n\nShift + Alt + l\nCmd + Shift + Option+l\nUnfold selected code\n\n\n\n\n\n\n\n\n\n\n\n\nTake advantage of auto-complete\n\n\n\nUse your Tab key when typing to engage RStudio’s auto-complete functionality. This can prevent spelling errors. Press Tab while typing to produce a drop-down menu of likely functions and objects, based on what you have typed so far.\n\n\n\n\n\n\nNow that we know how to talk with R via the script editor or the console, we want to use R for something more than adding numbers. To do this, we need to know more about the R syntax.\nThe main “parts of speech” in R (syntax) include:\n\nthe comments # and how they are used to document function and its content\nvariables and functions\nthe assignment operator &lt;-\nthe = for arguments in functions\n\nWe will go through each of these “parts of speech” in more detail, starting with the assignment operator.\n\n\n\nTo do useful and interesting things in R, we need to assign values to variables using the assignment operator, &lt;-. For example, we can use the assignment operator to assign the value of 3 to x by executing:\n\nx &lt;- 3\n\nThe assignment operator (&lt;-) assigns values on the right to variables on the left.\nIn RStudio, typing Alt + - (push Alt at the same time as the - key, on Mac type option + -) will write &lt;- in a single keystroke.\n\n\n\nA variable is a symbolic name for (or reference to) information. Variables in computer programming are analogous to “buckets”, where information can be maintained and referenced. On the outside of the bucket is a name. When referring to the bucket, we use the name of the bucket, not the data stored in the bucket.\nIn the example above, we created a variable or a ‘bucket’ called x. Inside we put a value, 3.\nLet’s create another variable called y and give it a value of 5.\n\ny &lt;- 5\n\nWhen assigning a value to an variable, R does not print anything to the console. You can force to print the value by using parentheses or by typing the variable name.\n\ny\n\nYou can also view information on the variable by looking in your Environment window in the upper right-hand corner of the RStudio interface.\n\n\n\nViewing your environment\n\n\nNow we can reference these buckets by name to perform mathematical operations on the values contained within. What do you get in the console for the following operation:\n\nx + y\n\nTry assigning the results of this operation to another variable called number.\n\nnumber &lt;- x + y\n\n\nThe materials in this lesson have been adapted from work created by the (HBC)](http://bioinformatics.sph.harvard.edu/) and Data Carpentry (http://datacarpentry.org/). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited."
  },
  {
    "objectID": "readings/rstudio.html#what-is-rstudio",
    "href": "readings/rstudio.html#what-is-rstudio",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "RStudio is freely available open-source Integrated Development Environment (IDE). RStudio provides an environment with many features to make using R easier and is a great alternative to working on R in the terminal.\nYou can see the complete RStudio user-interface cheatsheet (PDF) here"
  },
  {
    "objectID": "readings/rstudio.html#creating-a-new-project-directory-in-rstudio",
    "href": "readings/rstudio.html#creating-a-new-project-directory-in-rstudio",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "Let’s create a new project directory for the Research and Design course.\n\nOpen RStudio\nGo to the File menu and select New Project.\nIn the New Project window, choose New Directory. Then, choose New Project. Name your new directory whatever you want and then “Create the project as subdirectory of:” the Desktop (or location of your choice).\nClick on Create Project.\nAfter your project is completed, if the project does not automatically open in RStudio, then go to the File menu, select Open Project, and choose [your project name].Rproj.\nWhen RStudio opens, you will see three panels in the window.\nGo to the File menu and select New File, and select R Script. The RStudio interface should now look like the screenshot below.\n\nTIP: If your RStudio displays only one left pane it is because you have no scripts open yet.\n\n\n\nRStudio interface\n\n\n\n\nIt is simply a directory that contains everything related your analyses for a specific project. RStudio projects are useful when you are working on context- specific analyses and you wish to keep them separate. When creating a project in RStudio you associate it with a working directory of your choice (either an existing one, or a new one). A . RProj file is created within that directory and that keeps track of your command history and variables in the environment. The . RProj file can be used to open the project in its current state but at a later date.\nWhen a project is (re) opened within RStudio the following actions are taken:\n\nA new R session (process) is started\nThe .RData file in the project’s main directory is loaded, populating the environment with any objects that were present when the project was closed.\nThe .Rhistory file in the project’s main directory is loaded into the RStudio History pane (and used for Console Up/Down arrow command history).\nThe current working directory is set to the project directory.\nPreviously edited source documents are restored into editor tabs\nOther RStudio settings (e.g. active tabs, splitter positions, etc.) are restored to where they were the last time the project was closed.\n\nInformation adapted from RStudio Support Site"
  },
  {
    "objectID": "readings/rstudio.html#rstudio-interface",
    "href": "readings/rstudio.html#rstudio-interface",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "The RStudio interface has four main panels:\n\nConsole: where you can type commands and see output. The console is all you would see if you ran R in the command line without RStudio.\nScript editor: where you can type out commands and save to file. You can also submit the commands to run in the console.\nEnvironment/History: environment shows all active objects and history keeps track of all commands run in console\nFiles/Plots/Packages/Help"
  },
  {
    "objectID": "readings/rstudio.html#organizing-your-working-directory-setting-up",
    "href": "readings/rstudio.html#organizing-your-working-directory-setting-up",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "Before we organize our working directory, let’s check to see where our current working directory is located by typing into the console:\n\ngetwd()\n\nYour working directory should be the Intro-to-R folder constructed when you created the project. The working directory is where RStudio will automatically look for any files you bring in and where it will automatically save any files you create, unless otherwise specified.\nYou can visualize your working directory by selecting the Files tab from the Files/Plots/Packages/Help window.\n\n\n\nViewing your working directory\n\n\nIf you wanted to choose a different directory to be your working directory, you could navigate to a different folder in the Files tab, then, click on the More dropdown menu and select Set As Working Directory.\n\n\n\nSetting your working directory\n\n\n\n\n\nTo organize your working directory for a particular analysis, you typically want to separate the original data (raw data) from intermediate datasets. For instance, you may want to create a data/ directory within your working directory that stores the raw data, and have a results/ directory for intermediate datasets and a figures/ directory for the plots you will generate.\nLet’s create these three directories within your working directory by clicking on New Folder within the Files tab.\n\n\n\nStructuring your working directory\n\n\nWhen finished, your working directory should look like:\n\n\n\nYour organized working directory\n\n\n\n\n\nThis is more of a housekeeping task. We will be writing long lines of code in our script editor and want to make sure that the lines “wrap” and you don’t have to scroll back and forth to look at your long line of code.\nClick on “Tools” at the top of your RStudio screen and click on “Global Options” in the pull down menu.\n\n\n\noptions\n\n\nOn the left, select “Code” and put a check against “Soft-wrap R source files”. Make sure you click the “Apply” button at the bottom of the Window before saying “OK”.\n\n\n\nwrap_options"
  },
  {
    "objectID": "readings/rstudio.html#interacting-with-r",
    "href": "readings/rstudio.html#interacting-with-r",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "Now that we have our interface and directory structure set up, let’s start playing with R! There are two main ways of interacting with R in RStudio: using the console or by using script editor (plain text files that contain your code).\n\n\nThe console window (in RStudio, the bottom left panel) is the place where R is waiting for you to tell it what to do, and where it will show the results of a command. You can type commands directly into the console, but they will be forgotten when you close the session.\n\n\n\nRunning in the console\n\n\n\n\n\nBest practice is to enter the commands in the script editor, and save the script. You are encouraged to comment liberally to describe the commands you are running using #. This way, you have a complete record of what you did, you can easily show others how you did it and you can do it again later on if needed.\nThe Rstudio script editor allows you to ‘send’ the current line or the currently highlighted text to the R console by clicking on the Run button in the upper-right hand corner of the script editor. Alternatively, you can run by simply pressing the Ctrl and Enter keys at the same time as a shortcut.\nNow let’s try entering commands to the script editor and using the comments character # to add descriptions and highlighting the text to run:\n\n    # Session 1\n    # Feb 3, 2023\n\n    # Interacting with R\n    \n    # I am adding 3 and 5. \n    3+5\n\n\n\n\nRunning in the script editor\n\n\nYou should see the command run in the console and output the result.\n\n\n\nScript editor output\n\n\nWhat happens if we do that same command without the comment symbol #? Re-run the command after removing the # sign in the front:\n\nI am adding 3 and 5. R is fun!\n3+5\n\nNow R is trying to run that sentence as a command, and it doesn’t work. We get an error in the console “Error: unexpected symbol in”I am” means that the R interpreter did not know what to do with that command.”\n\n\n\nInterpreting the command prompt can help understand when R is ready to accept commands. Below lists the different states of the command prompt and how you can exit a command:\nConsole is ready to accept commands: &gt;.\nIf R is ready to accept commands, the R console shows a &gt; prompt.\nWhen the console receives a command (by directly typing into the console or running from the script editor (Ctrl-Enter), R will try to execute it.\nAfter running, the console will show the results and come back with a new &gt; prompt to wait for new commands.\nConsole is waiting for you to enter more data: +.\nIf R is still waiting for you to enter more data because it isn’t complete yet, the console will show a + prompt. It means that you haven’t finished entering a complete command. Often this can be due to you having not ‘closed’ a parenthesis or quotation.\nEscaping a command and getting a new prompt: esc\nIf you’re in Rstudio and you can’t figure out why your command isn’t running, you can click inside the console window and press esc to escape the command and bring back a new prompt &gt;.\n\n\n\nIn addition to some of the shortcuts described earlier in this lesson, we have listed a few more that can be helpful as you work in RStudio.\n\n\n\n\n\n\nShortcuts Table\n\n\n\n\n\nSome very useful keyboard shortcuts are below. See all the keyboard shortcuts for Windows, Max, and Linux in the second page of this RStudio user interface cheatsheet.\n\n\n\n\n\n\n\n\nWindows/Linux\nMac\nAction\n\n\n\n\nEsc\nEsc\nInterrupt current command (useful if you accidentally ran an incomplete command and cannot escape seeing “+” in the R console)\n\n\nCtrl+s\nCmd+s\nSave (script)\n\n\nTab\nTab\nAuto-complete\n\n\nCtrl + Enter\nCmd + Enter\nRun current line(s)/selection of code\n\n\nCtrl + Shift + C\nCmd + Shift + c\ncomment/uncomment the highlighted lines\n\n\nAlt + -\nOption + -\nInsert &lt;-\n\n\nCtrl + Shift + m\nCmd + Shift + m\nInsert %&gt;%\n\n\nCtrl + l\nCmd + l\nClear the R console\n\n\nCtrl + Alt + b\nCmd + Option + b\nRun from start to current line\n\n\nCtrl + Alt + t\nCmd + Option + t\nRun the current code section (R Markdown)\n\n\nCtrl + Alt + i\nCmd + Shift + r\nInsert code chunk (into R Markdown)\n\n\nCtrl + Alt + c\nCmd + Option + c\nRun current code chunk (R Markdown)\n\n\nup/down arrows in R console\nSame\nToggle through recently run commands\n\n\nShift + up/down arrows in script\nSame\nSelect multiple code lines\n\n\nCtrl + f\nCmd + f\nFind and replace in current script\n\n\nCtrl + Shift + f\nCmd + Shift + f\nFind in files (search/replace across many scripts)\n\n\nAlt + l\nCmd + Option + l\nFold selected code\n\n\nShift + Alt + l\nCmd + Shift + Option+l\nUnfold selected code\n\n\n\n\n\n\n\n\n\n\n\n\nTake advantage of auto-complete\n\n\n\nUse your Tab key when typing to engage RStudio’s auto-complete functionality. This can prevent spelling errors. Press Tab while typing to produce a drop-down menu of likely functions and objects, based on what you have typed so far."
  },
  {
    "objectID": "readings/rstudio.html#r-syntax",
    "href": "readings/rstudio.html#r-syntax",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "Now that we know how to talk with R via the script editor or the console, we want to use R for something more than adding numbers. To do this, we need to know more about the R syntax.\nThe main “parts of speech” in R (syntax) include:\n\nthe comments # and how they are used to document function and its content\nvariables and functions\nthe assignment operator &lt;-\nthe = for arguments in functions\n\nWe will go through each of these “parts of speech” in more detail, starting with the assignment operator."
  },
  {
    "objectID": "readings/rstudio.html#assignment-operator",
    "href": "readings/rstudio.html#assignment-operator",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "To do useful and interesting things in R, we need to assign values to variables using the assignment operator, &lt;-. For example, we can use the assignment operator to assign the value of 3 to x by executing:\n\nx &lt;- 3\n\nThe assignment operator (&lt;-) assigns values on the right to variables on the left.\nIn RStudio, typing Alt + - (push Alt at the same time as the - key, on Mac type option + -) will write &lt;- in a single keystroke."
  },
  {
    "objectID": "readings/rstudio.html#variables",
    "href": "readings/rstudio.html#variables",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "A variable is a symbolic name for (or reference to) information. Variables in computer programming are analogous to “buckets”, where information can be maintained and referenced. On the outside of the bucket is a name. When referring to the bucket, we use the name of the bucket, not the data stored in the bucket.\nIn the example above, we created a variable or a ‘bucket’ called x. Inside we put a value, 3.\nLet’s create another variable called y and give it a value of 5.\n\ny &lt;- 5\n\nWhen assigning a value to an variable, R does not print anything to the console. You can force to print the value by using parentheses or by typing the variable name.\n\ny\n\nYou can also view information on the variable by looking in your Environment window in the upper right-hand corner of the RStudio interface.\n\n\n\nViewing your environment\n\n\nNow we can reference these buckets by name to perform mathematical operations on the values contained within. What do you get in the console for the following operation:\n\nx + y\n\nTry assigning the results of this operation to another variable called number.\n\nnumber &lt;- x + y\n\n\nThe materials in this lesson have been adapted from work created by the (HBC)](http://bioinformatics.sph.harvard.edu/) and Data Carpentry (http://datacarpentry.org/). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited."
  },
  {
    "objectID": "resources/getting-help.html",
    "href": "resources/getting-help.html",
    "title": "Where to get help",
    "section": "",
    "text": "Where to get help\n\nUse the built-in RStudio help interface to search for more information on R functions\n\n\n\n\n\nRStudio help interface.\n\n\n\n\nOne of the fastest ways to get help, is to use the RStudio help interface. This panel by default can be found at the lower right hand panel of RStudio. As seen in the screenshot, by typing the word “Mean”, RStudio tries to also give a number of suggestions that you might be interested in. The description is then shown in the display window.\n\n\nI know the name of the function I want to use, but I’m not sure how to use it\nIf you need help with a specific function, let’s say barplot(), you can type:\n\n?barplot\n\nIf you just need to remind yourself of the names of the arguments, you can use:\n\nargs(lm)\n\n\n\nI want to use a function that does X, there must be a function for it but I don’t know which one…\nIf you are looking for a function to do a particular task, you can use the help.search() function, which is called by the double question mark ??. However, this only looks through the installed packages for help pages with a match to your search request\n\n??kruskal\n\nIf you can’t find what you are looking for, you can use the rdocumentation.org website that searches through the help files across all packages available.\nFinally, a generic Google or internet search “R &lt;task&gt;” will often either send you to the appropriate package documentation or a helpful forum where someone else has already asked your question.\n\n\nI am stuck… I get an error message that I don’t understand\nStart by googling the error message. However, this doesn’t always work very well because often, package developers rely on the error catching provided by R. You end up with general error messages that might not be very helpful to diagnose a problem (e.g. “subscript out of bounds”). If the message is very generic, you might also include the name of the function or package you’re using in your query.\nHowever, you should check Stack Overflow. Search using the [r] tag. Most questions have already been answered, but the challenge is to use the right words in the search to find the answers:\nhttp://stackoverflow.com/questions/tagged/r\nThe Introduction to R can also be dense for people with little programming experience but it is a good place to understand the underpinnings of the R language.\nThe R FAQ is dense and technical but it is full of useful information.\n\n\nAsking for help\nThe key to receiving help from someone is for them to rapidly grasp your problem. You should make it as easy as possible to pinpoint where the issue might be.\nTry to use the correct words to describe your problem. For instance, a package is not the same thing as a library. Most people will understand what you meant, but others have really strong feelings about the difference in meaning. The key point is that it can make things confusing for people trying to help you. Be as precise as possible when describing your problem.\nIf possible, try to reduce what doesn’t work to a simple reproducible example. If you can reproduce the problem using a very small data frame instead of your 50000 rows and 10000 columns one, provide the small one with the description of your problem. When appropriate, try to generalise what you are doing so even people who are not in your field can understand the question. For instance instead of using a subset of your real dataset, create a small (3 columns, 5 rows) generic one. For more information on how to write a reproducible example see this article by Hadley Wickham.\nTo share an object with someone else, if it’s relatively small, you can use the function dput(). It will output R code that can be used to recreate the exact same object as the one in memory:\n\n## iris is an example data frame that comes with R and head() is a\n## function that returns the first part of the data frame\ndput(head(iris))\n\nstructure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6, 5, 5.4), \n    Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9), Petal.Length = c(1.4, \n    1.4, 1.3, 1.5, 1.4, 1.7), Petal.Width = c(0.2, 0.2, 0.2, \n    0.2, 0.2, 0.4), Species = structure(c(1L, 1L, 1L, 1L, 1L, \n    1L), levels = c(\"setosa\", \"versicolor\", \"virginica\"), class = \"factor\")), row.names = c(NA, \n6L), class = \"data.frame\")\n\n\nIf the object is larger, provide either the raw file (i.e., your CSV file) with your script up to the point of the error (and after removing everything that is not relevant to your issue). Alternatively, in particular if your question is not related to a data frame, you can save any R object to a file[^export]:\n\nsaveRDS(iris, file=\"/tmp/iris.rds\")\n\nThe content of this file is however not human readable and cannot be posted directly on Stack Overflow. Instead, it can be sent to someone by email who can read it with the readRDS() command (here it is assumed that the downloaded file is in a Downloads folder in the user’s home directory):\n\nsome_data &lt;- readRDS(file=\"~/Downloads/iris.rds\")\n\nLast, but certainly not least, always include the output of sessionInfo() as it provides critical information about your platform, the versions of R and the packages that you are using, and other information that can be very helpful to understand your problem.\n\nsessionInfo()\n\nR version 4.2.2 (2022-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.2.2    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.2.2       htmltools_0.5.5   rstudioapi_0.14   rmarkdown_2.21   \n [9] knitr_1.42        jsonlite_1.8.4    xfun_0.38         digest_0.6.31    \n[13] rlang_1.1.0       evaluate_0.20    \n\n\n\n\nWhere to ask for help?\n\nThe person sitting next to you. Don’t hesitate to talk to your neighbour during the workshop, compare your answers, and ask for help.\nThe instructors. We’re here to help you.\nYour friendly colleagues: if you know someone with more experience than you, they might be able and willing to help you.\nStack Overflow: if your question hasn’t been answered before and is well crafted, chances are you will get an answer in less than 5 min. Remember to follow their guidelines on how to ask a good question.\nThe R-help mailing list: it is read by a lot of people (including most of the R core team), a lot of people post to it, but the tone can be pretty dry, and it is not always very welcoming to new users. If your question is valid, you are likely to get an answer very fast but don’t expect that it will come with smiley faces. Also, here more than anywhere else, be sure to use correct vocabulary (otherwise you might get an answer pointing to the misuse of your words rather than answering your question). You will also have more success if your question is about a base function rather than a specific package.\nIf your question is about a specific package, see if there is a mailing list for it. Usually it’s included in the DESCRIPTION file of the package that can be accessed using packageDescription(\"name-of-package\"). You may also want to try to email the author of the package directly, or open an issue on the code repository (e.g., GitHub).\nThere are also some topic-specific mailing lists (GIS, phylogenetics, etc…), the complete list is here.\n\n\n\nMore resources\n\nThe Posting Guide for the R mailing lists.\nHow to ask for R help useful guidelines.\nThis blog post by Jon Skeet has quite comprehensive advice on how to ask programming questions.\nThe reprex package is very helpful to create reproducible examples when asking for help. The rOpenSci community call “How to ask questions so they get answered” (Github link and video recording) includes a presentation of the reprex package and of its philosophy.\n\n\nThe materials in this lesson have been adapted from the Introduction to data analysis with R and Bioconductor workshop, which is a part of the Carpentries Incubator. These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited."
  },
  {
    "objectID": "resources/resources.html",
    "href": "resources/resources.html",
    "title": "Additional Resources",
    "section": "",
    "text": "Help documentation\nSearch the RStudio “Help” tab for documentation on R packages and specific functions. This is within the pane that also contains Files, Plots, and Packages (typically in the lower-right pane). As a shortcut, you can also type the name of a package or function into the R console after a question-mark to open the relevant Help page. Do not include parentheses.\nFor example: ?filter or ?diagrammeR.\nInteractive tutorials\nThere are several ways to learn R interactively within RStudio.\nRStudio itself offers a Tutorial pane that is powered by the learnr R package. Simply install this package and open a tutorial via the new “Tutorial” tab in the upper-right RStudio pane (which also contains Environment and History tabs).\nThe R package swirl offers interactive courses in the R Console. Install and load this package, then run the command swirl() (empty parentheses) in the R console. You will see prompts appear in the Console. Respond by typing in the Console. It will guide you through a course of your choice.\n\n\n\nThere are many PDF “cheatsheets” available on the RStudio website, for example:\n\nFactors with forcats package\n\nDates and times with lubridate package\n\nStrings with stringr package\n\niterative opertaions with purrr package\n\nData import\n\nData transformation cheatsheet with dplyr package\n\nR Markdown (to create documents like PDF, Word, Powerpoint…)\n\nShiny (to build interactive web apps)\n\nData visualization with ggplot2 package\n\nCartography (GIS)\n\nleaflet package (interactive maps)\n\nPython with R (reticulate package)\n\nThis is an online R resource specifically for Excel users\n\n\n\n\n\n\nanother plotting cheat sheet\ntidyverse ggplot basics page\n\nplotting continuous variables\n\nR for Data Science pages on data visualization\ngraphics for communicaton\n\n\n\n\n\nThe Data Carpentry page on dplyr\n\nThe tidyverse reference pages on group_by() and grouping\n\nThis page on Data manipulation\n\nSummarize with conditions in dplyr\n\n\n\n\n\n\n\nR has a vibrant twitter community where you can learn tips, shortcuts, and news - follow these accounts:\n\nEpiHandbook (makers of the textbook these materials are based on) @epiRhandbook\n\nR Function A Day @rfuntionaday is an incredible resource\n\nR for Data Science @rstats4ds\n\nRStudio @RStudio\n\nRStudio Tips @rstudiotips\n\nR-Bloggers @Rbloggers\n\nR-ladies @RLadiesGlobal\n\nHadley Wickham @hadleywickham\n\nAlso:\n#epitwitter and #rstats\n\n\n\nA definitive text is the R for Data Science book by Garrett Grolemund and Hadley Wickham\nThe R4Epis project website aims to “develop standardised data cleaning, analysis and reporting tools to cover common types of outbreaks and population-based surveys that would be conducted in an MSF emergency response setting.” You can find R basics training materials, templates for RMarkdown reports on outbreaks and surveys, and tutorials to help you set them up.\n\n\n\n\nMateriales de RStudio en Español\nIntroduction à R et au tidyverse (Francais)"
  },
  {
    "objectID": "resources/resources.html#other-r-resources",
    "href": "resources/resources.html#other-r-resources",
    "title": "Additional Resources",
    "section": "",
    "text": "Help documentation\nSearch the RStudio “Help” tab for documentation on R packages and specific functions. This is within the pane that also contains Files, Plots, and Packages (typically in the lower-right pane). As a shortcut, you can also type the name of a package or function into the R console after a question-mark to open the relevant Help page. Do not include parentheses.\nFor example: ?filter or ?diagrammeR.\nInteractive tutorials\nThere are several ways to learn R interactively within RStudio.\nRStudio itself offers a Tutorial pane that is powered by the learnr R package. Simply install this package and open a tutorial via the new “Tutorial” tab in the upper-right RStudio pane (which also contains Environment and History tabs).\nThe R package swirl offers interactive courses in the R Console. Install and load this package, then run the command swirl() (empty parentheses) in the R console. You will see prompts appear in the Console. Respond by typing in the Console. It will guide you through a course of your choice.\n\n\n\nThere are many PDF “cheatsheets” available on the RStudio website, for example:\n\nFactors with forcats package\n\nDates and times with lubridate package\n\nStrings with stringr package\n\niterative opertaions with purrr package\n\nData import\n\nData transformation cheatsheet with dplyr package\n\nR Markdown (to create documents like PDF, Word, Powerpoint…)\n\nShiny (to build interactive web apps)\n\nData visualization with ggplot2 package\n\nCartography (GIS)\n\nleaflet package (interactive maps)\n\nPython with R (reticulate package)\n\nThis is an online R resource specifically for Excel users\n\n\n\n\n\n\nanother plotting cheat sheet\ntidyverse ggplot basics page\n\nplotting continuous variables\n\nR for Data Science pages on data visualization\ngraphics for communicaton\n\n\n\n\n\nThe Data Carpentry page on dplyr\n\nThe tidyverse reference pages on group_by() and grouping\n\nThis page on Data manipulation\n\nSummarize with conditions in dplyr\n\n\n\n\n\n\n\nR has a vibrant twitter community where you can learn tips, shortcuts, and news - follow these accounts:\n\nEpiHandbook (makers of the textbook these materials are based on) @epiRhandbook\n\nR Function A Day @rfuntionaday is an incredible resource\n\nR for Data Science @rstats4ds\n\nRStudio @RStudio\n\nRStudio Tips @rstudiotips\n\nR-Bloggers @Rbloggers\n\nR-ladies @RLadiesGlobal\n\nHadley Wickham @hadleywickham\n\nAlso:\n#epitwitter and #rstats\n\n\n\nA definitive text is the R for Data Science book by Garrett Grolemund and Hadley Wickham\nThe R4Epis project website aims to “develop standardised data cleaning, analysis and reporting tools to cover common types of outbreaks and population-based surveys that would be conducted in an MSF emergency response setting.” You can find R basics training materials, templates for RMarkdown reports on outbreaks and surveys, and tutorials to help you set them up.\n\n\n\n\nMateriales de RStudio en Español\nIntroduction à R et au tidyverse (Francais)"
  },
  {
    "objectID": "session-materials/session1/session1.html",
    "href": "session-materials/session1/session1.html",
    "title": "Session 1 Notebook",
    "section": "",
    "text": "Welcome! Each week, in-class we will be answering questions on the reading and performing analyses based on a code notebook.\nThroughout these sessions we will be replicating the analysis from Beheshti et. al. 20211\nThis is an analysis of the association between diabetes and dental caries in U.S. adolescents. By the end of the semester we will be able to replicate and extend the analysis in this paper."
  },
  {
    "objectID": "session-materials/session1/session1.html#code-chunks",
    "href": "session-materials/session1/session1.html#code-chunks",
    "title": "Session 1 Notebook",
    "section": "Code Chunks",
    "text": "Code Chunks\nYou can start a and end code chunk using three back ticks “```”. To have a chunk run as R code, you need to assign the chunk using {r}. You can then specify options for the chunk on subsequent lines using the “hash-pipe” |#. Code chinks have a lot of options, but some of the most important are label, eval, echo, and output.\n\nx &lt;- 5\nx\n\n[1] 5\n\n\n\n\n\n\n\n\nExercise\n\n\n\nTry changing these options in the first of the two chunks below and re-rendering the document. What do each of these arguments do? Pay attention to both chunk’s output.\n\ny = 8\nx\n\n[1] 5\n\ny\n\n[1] 8\n\nx &lt;- x + y \n\n\nx # Show the value of x\n\n[1] 13"
  },
  {
    "objectID": "session-materials/session1/session1.html#markdown",
    "href": "session-materials/session1/session1.html#markdown",
    "title": "Session 1 Notebook",
    "section": "Markdown",
    "text": "Markdown\nMarkdown is a language used to quickly create formatted text. It’s great to know as it is used in R Markdown, Quarto, Jupyter, Github documents, and many other places. A pure markdown file has a .md file extension.\nYou can find a quick guide to markdown here, throughout the course we will see various things markdown can do in the readings and in-class materials.\n\n\n\n\n\n\nQuarto Vs. R Markdown\n\n\n\n\n\nFor those familiar with R Markdown, you can find a rundown of changes here.\nDue to Quarto being written as an evolution of R Markdown, it also supports most R Markdown syntax. While we could technically mix and match different types of syntax in a single document, this is bad practice. Readable code is consistent. Even if there are multiple ways to do something, it’s best to choose one way and stick with it throughout a code or document. For an example of how passionate programmers can get about consistencies in their code, check out the wikipedia article on indentation style."
  },
  {
    "objectID": "session-materials/session1/session1.html#footnotes",
    "href": "session-materials/session1/session1.html#footnotes",
    "title": "Session 1 Notebook",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBeheshti, Mahdieh et al. “Association of Diabetes and Dental Caries Among U.S. Adolescents in the NHANES Dataset.” Pediatric dentistry vol. 43,2 (2021): 123-128.↩︎"
  },
  {
    "objectID": "session-materials/session2/session2.html",
    "href": "session-materials/session2/session2.html",
    "title": "Session 2 Notebook",
    "section": "",
    "text": "Data\nWe will be picking up where we left off with the data last week. If you have the data at hand you’re all set, or you can download the week 2 data here. You should check that the categorical variables you added last week are correctly encoded before continuing.\n\nlibrary(tidyverse) \n\nnhanes_processed &lt;- read_csv(file.choose()) \n\n#| label: preview-data\n#| echo: false\n#| message: false\nDT::datatable(head(nhanes_processed,200), rownames = FALSE, options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )\n\n\n\nFirst steps with ggplot2\nAs you saw in this week’s reading, ggplot2 utilizes a specific syntax for creating plots. We can summarize it as:\nggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) +  &lt;GEOM_FUNCTION&gt;()\nWhere we define a dataset, choose which variables map to which aspects of the plot, and then choose the geom() or type of plot to draw.\nLet’s plug the NHANES dataset into a plot.\n\n1ggplot(nhanes_processed)\n\n\n1\n\ndata and mapping are positional arguments in the ggplot function, so we don’t have to name them. However, it can be good practice to include the argument names so that it’s immediately obvious what each argument is.\n\n\n\n\n\n\n\nSince we haven’t told ggplot what we want to display, we just get a blank plot. If we add some mappings for the x and y axes:\n\nggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose))\n\n\n\n\nWe now get labeled axes and scales based on the variable range. Finally, we can add a geom(). Let’s make a scatterplot, created with geom_point() in ggplot.\n\nggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose)) +\n  geom_point()\n\nWarning: Removed 1893 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nTry making a histogram displaying age in years with geom_histogram. Do you agree with the authors’ decision in Beheshti et. al. to create two age categories to study this population?\n\n\n# TODO make your histogram here\nggplot(nhanes_processed,\n       aes(x = age.years)\n       ) + geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nTypically, the bars in a histogram touch each other. Why is that not the case here? Is there a parameter you could change or different geom() you could use which might work better in this situation?\n\nTry your solution out.\n\n# TODO your improved age distribution code here\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nChoose a numeric variable in the data and make a boxplot showing how it varies by subject ethnicity.\n\n#TODO your plot here\nggplot(nhanes_processed, aes(x = ethnicity, y = bmi)) + \n  geom_boxplot()\n\nWarning: Removed 25 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nMapping Variables\nBeyond the actual axes we can use mappings to encode variables as various aspects of a plot. Some of the most commonly used other mapping types are shape, fill, color, size, and linetype.\nFor instance, let’s take our scatterplot from before and color the points by diabetic status.\n\nggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes)) +\n  geom_point() \n\nWarning: Removed 1893 rows containing missing values (`geom_point()`).\n\n\n\n\n\nRemember we can also change parts of the plot outside of aes() to have them not depend on any variable.\n\nggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes)) +\n  geom_point(size = 2.5) \n\nWarning: Removed 1893 rows containing missing values (`geom_point()`).\n\n\n\n\n\nWe can also have a single variable encoded into multiple parts of the plot.\n\nggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes, shape = diabetes)) +\n  geom_point(size = 2.5) \n\nWarning: Removed 1893 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nTry coloring your boxplot from before by age.years. What happens? What about when you use age.cat? Remember to use fill instead of color for shapes like boxplots.\n\n\n# We can't color by age since it's numeric, ggplot gives an error. \nggplot(nhanes_processed, aes(x = ethnicity, y = bmi, fill = age.years)) + \n  geom_boxplot()\n\nWarning: Removed 25 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: The following aesthetics were dropped during statistical transformation: fill\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\nggplot(nhanes_processed, aes(x = ethnicity, y = bmi, fill = age.cat)) + \n  geom_boxplot()\n\nWarning: Removed 25 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\nNow try flipping which variables are encoded in x and fill. Which version do you think works better?\n\n\nggplot(nhanes_processed, aes(x = age.cat, y = bmi, fill = ethnicity)) + \n  geom_boxplot()\n\nWarning: Removed 25 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nCustomizing Plots\nTaking a figure all the way to publication-quality can require careful fine tuning. ggplot has a variety of useful themes and other ways to improve a figure’s appearance and readability.\nHere’s an example of some of what you can do. Note that changing the fig.width setting for the code block will not effect how the image looks when exported.\n\n#Maybe we want a color scheme from a Wes Anderson movie:\nlibrary(wesanderson)\n\n#Note that this font import can take multiple minutes to run\npal &lt;- wes_palette(\"Zissou1\", 5, type = \"continuous\")\n\nggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) + \n geom_histogram() +\n theme_minimal() +\n ggtitle(\"HbA1C stratified by ethnicity\") +\n xlab(\"HbA1C (%)\") +\n ylab(\"Count\") +\n scale_fill_manual(values = pal, name = \"Ethnicity\") +\n theme(text = element_text(size=18))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 298 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nUse a figure you’ve already created, or choose a new plot to create. Try to get that figure to as close to publication-ready as possible. The R Graph Gallery is a great place to look for inspiration on what you can do to improve your plots.\nIf there’s something you want to change but don’t know how, try checking the ggplot2 cheatsheet, the extended ggplot chapter, and the official documentation.\n\n# TODO your plotting code here\n\n\n\n\n\nExporting plots\n\n\n\n\n\n\nExercise\n\n\n\nThe Journal of the American Dental Association (JADA) manuscript guidlines list the following as their figure formatting requirements:\n\nFormats for Figures If your electronic artwork is created in a Microsoft Office application (Word, PowerPoint, Excel) then please supply “as is” in the native document format. Otherwise, regardless of the application used to create figures, the final artwork should be saved as or converted to 1 of the following formats:\n\nTIFF, JPEG, or PPT: Color or grayscale photographs (halftones): always use a minimum of 300 dpi.\nTIFF, JPEG, or PPT: Bitmapped line drawings: use a minimum of 1,000 dpi.\nTIFF, JPEG, or PPT: Combinations bitmapped line/halftone (color or grayscale): a minimum of 500 dpi is required.\n\n\nWhile Nature’s formatting guidelines are\nNature preferred formats are:\n\nLayered Photoshop (PSD) or TIFF format (high resolution, 300–600 dots per inch (dpi) for photographic images. In Photoshop, it is possible to create images with separate components on different layers. This is particularly useful for placing text labels or arrows over an image, as it allows them to be edited later. If you have done this, please send the Photoshop file (.psd) with the layers intact.\nAdobe Illustrator (AI), Postscript, Vector EPS or PDF format for figures containing line drawings and graphs, including figures combining text and line art with photographs or scans.\nIf these formats are not possible, we can also accept the following formats: JPEG (high-resolution, 300–600 dpi), CorelDraw (up to version 8), Microsoft Word, Excel or PowerPoint.\n\nExport your figure using ggsave to comply with one of these sets of guidelines."
  },
  {
    "objectID": "session-materials/session3/session3.html",
    "href": "session-materials/session3/session3.html",
    "title": "Session 3 Notebook",
    "section": "",
    "text": "library(tidyverse)\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "session-materials/session3/session3.html#see-more-about-how-we-downloaded-the-data",
    "href": "session-materials/session3/session3.html#see-more-about-how-we-downloaded-the-data",
    "title": "Session 3 Notebook",
    "section": "See more about how we downloaded the data",
    "text": "See more about how we downloaded the data\nThe NHANES data was downloaded using a packaged called phonto. phonto connects to a database of the NHANES data developed by the Center for Computational Biomedicine (CCB). The database is a relational database running on a virtual machine using the containerization software Docker.\nWe will be learning a bit more about this in the last week of class. The code used to download the data is shown here:\nlibrary(phonto)\nlibrary(DBI)\nlibrary(DT)\n\ncols_d = list(DEMO_D=c(\"RIDAGEYR\",\"RIAGENDR\",\"RIDRETH1\",\"DMDEDUC2\", \"DMDBORN\", \"INDFMPIR\"), \n            OHX_D =c(\"OHXDECAY\", \"OHXREST\"),\n            GLU_D =c(\"LBXGLU\"), GHB_D = \"LBXGH\",\n            BMX_D=\"BMXBMI\"\n)\nbase_df_d &lt;- jointQuery(cols_d)\n\ncols_e = list(DEMO_E=c(\"RIDAGEYR\",\"RIAGENDR\",\"RIDRETH1\",\"DMDEDUC2\", \"DMDBORN2\", \"INDFMPIR\"), \n            OHX_E =c(\"OHXDECAY\", \"OHXREST\"),\n            GLU_E =c(\"LBXGLU\"), GHB_E = \"LBXGH\",\n            BMX_E =\"BMXBMI\"\n)\nbase_df_e &lt;- jointQuery(cols_e)\n\ncols_f = list(DEMO_F=c(\"RIDAGEYR\",\"RIAGENDR\",\"RIDRETH1\",\"DMDEDUC2\", \"DMDBORN2\", \"INDFMPIR\"), \n            OHXDEN_F =c(\"OHXDECAY\", \"OHXREST\"),\n            GLU_F =c(\"LBXGLU\"), GHB_F = \"LBXGH\",\n            BMX_F =\"BMXBMI\"\n)\nbase_df_f &lt;- jointQuery(cols_f)"
  },
  {
    "objectID": "session-materials/session3/session3.html#preparing-the-data",
    "href": "session-materials/session3/session3.html#preparing-the-data",
    "title": "Session 3 Notebook",
    "section": "Preparing the data",
    "text": "Preparing the data\nIn the reading, we saw how to combine multiple sets of observations by appending datasets. However, before we need to make sure corresponding columns between years can be combined.\nNHANES will often change how it encodes or records different variables from year to year. Our first red flag are any columns whose name has changed. Let’s take a look at the column names.\n\ncolnames(base_df_d)\n\n [1] \"SEQN\"       \"RIDAGEYR\"   \"RIAGENDR\"   \"RIDRETH1\"   \"DMDEDUC2\"  \n [6] \"DMDBORN\"    \"INDFMPIR\"   \"OHXDECAY\"   \"OHXREST\"    \"LBXGLU\"    \n[11] \"LBXGH\"      \"BMXBMI\"     \"Begin.Year\" \"EndYear\"   \n\ncolnames(base_df_e)\n\n [1] \"SEQN\"       \"RIDAGEYR\"   \"RIAGENDR\"   \"RIDRETH1\"   \"DMDEDUC2\"  \n [6] \"DMDBORN2\"   \"INDFMPIR\"   \"OHXDECAY\"   \"OHXREST\"    \"LBXGLU\"    \n[11] \"LBXGH\"      \"BMXBMI\"     \"Begin.Year\" \"EndYear\"   \n\ncolnames(base_df_f)\n\n [1] \"SEQN\"       \"RIDAGEYR\"   \"RIAGENDR\"   \"RIDRETH1\"   \"DMDEDUC2\"  \n [6] \"DMDBORN2\"   \"INDFMPIR\"   \"OHXDECAY\"   \"OHXREST\"    \"LBXGLU\"    \n[11] \"LBXGH\"      \"BMXBMI\"     \"Begin.Year\" \"EndYear\"   \n\n\nWe can also check for equality directly:\n\ncolnames(base_df_d)[colnames(base_df_d) != colnames(base_df_e)]\n\n[1] \"DMDBORN\"\n\ncolnames(base_df_e)[colnames(base_df_e) != colnames(base_df_f)]\n\ncharacter(0)\n\ncolnames(base_df_f)[colnames(base_df_f) != colnames(base_df_d)]\n\n[1] \"DMDBORN2\"\n\n\nIt looks like DMDBORN changed after 2006 to DMDBORN2. If we check the demographic variable definitions for the three collection cycles DEMO_D, DEMO_E, and DEMO_F we can see that the encoding has changed over time.\nTo continue the analysis, let’s also convert these dataframes into tibbles so we can take advantage of Tidyverse functionality.\n\ntib_d &lt;- as_tibble(base_df_d)\ntib_e &lt;- as_tibble(base_df_e)\ntib_f &lt;- as_tibble(base_df_f)\n\n\n\n\n\n\n\nExercise\n\n\n\n\nResolve the change the variable coding between the datasets. Use your own judgement on the best way to resolve this issue.\n\n\n# Step 1: Change things to have the same sets of values\n# TODO your code here\n\n# Step 2: Rename the columns to fit between the datasets\ntib_e &lt;- rename(tib_e, DMDBORN = DMDBORN2)\ntib_f &lt;- rename(tib_f, DMDBORN = DMDBORN2)\n\n\nCheck table 1b to see how the authors chose to handle this in Beheshti et. al. 2021. Do you think there were any other factors which went into their decision?"
  },
  {
    "objectID": "session-materials/session3/session3.html#combining-the-data",
    "href": "session-materials/session3/session3.html#combining-the-data",
    "title": "Session 3 Notebook",
    "section": "Combining the data",
    "text": "Combining the data\nNow we can combine the data together.\n\n# Combine all years together\ntib_all &lt;- tib_d %&gt;%\n  bind_rows(tib_e) %&gt;%\n  bind_rows(tib_f)"
  },
  {
    "objectID": "session-materials/session3/session3.html#summary-statistics",
    "href": "session-materials/session3/session3.html#summary-statistics",
    "title": "Session 3 Notebook",
    "section": "Summary Statistics",
    "text": "Summary Statistics"
  },
  {
    "objectID": "session-materials/sessions.html",
    "href": "session-materials/sessions.html",
    "title": "Sessions",
    "section": "",
    "text": "This set of pages contains the in-class materials we will be using.\nYou can browse the materials for each week here, but for class you need to download the materials and datasets.\n\n\nDownload Week 1 Materials Here\n\n\n\nDownload Week 2 Materials Here\n\n\n\nDownload Week 3 Materials Here"
  },
  {
    "objectID": "session-materials/sessions.html#week-1-getting-started-with-data",
    "href": "session-materials/sessions.html#week-1-getting-started-with-data",
    "title": "Sessions",
    "section": "",
    "text": "Download Week 1 Materials Here"
  },
  {
    "objectID": "session-materials/sessions.html#week-2-data-visualization",
    "href": "session-materials/sessions.html#week-2-data-visualization",
    "title": "Sessions",
    "section": "",
    "text": "Download Week 2 Materials Here"
  },
  {
    "objectID": "session-materials/sessions.html#week-3-managing-data",
    "href": "session-materials/sessions.html#week-3-managing-data",
    "title": "Sessions",
    "section": "",
    "text": "Download Week 3 Materials Here"
  },
  {
    "objectID": "readings/recoding-values.html",
    "href": "readings/recoding-values.html",
    "title": "Recoding Values",
    "section": "",
    "text": "Extended Materials\n\n\n\nYou can find the original, extended version of this chapter here.\n\n\nHere are a few scenarios where you need to re-code (change) values:\n\nto edit one specific value (e.g. one date with an incorrect year or format)\n\nto reconcile values not spelled the same\nto create a new column of categorical values\n\nto create a new column of numeric categories (e.g. age categories)\n\n\n\nTo change values manually you can use the recode() function within the mutate() function.\nImagine there is a nonsensical date in the data (e.g. “2014-14-15”): you could fix the date manually in the raw source data, or, you could write the change into the cleaning pipeline via mutate() and recode(). The latter is more transparent and reproducible to anyone else seeking to understand or repeat your analysis.\n\n# fix incorrect values                   # old value       # new value\nlinelist &lt;- linelist %&gt;% \n  mutate(date_onset = recode(date_onset, \"2014-14-15\" = \"2014-04-15\"))\n\nThe mutate() line above can be read as: “mutate the column date_onset to equal the column date_onset re-coded so that OLD VALUE is changed to NEW VALUE”. Note that this pattern (OLD = NEW) for recode() is the opposite of most R patterns (new = old). The R development community is working on revising this.\n\n\n\nBelow we demonstrate how to re-code values in a column using logic and conditions:\n\nUsing replace(), ifelse() and if_else() for simple logic\nUsing case_when() for more complex logic\n\n\n\n\n\nTo re-code with simple logical criteria, you can use replace() within mutate(). replace() is a function from base R. Use a logic condition to specify the rows to change . The general syntax is:\nmutate(col_to_change = replace(col_to_change, criteria for rows, new value)).\nOne common situation to use replace() is changing just one value in one row, using an unique row identifier. Below, the gender is changed to “Female” in the row where the column case_id is “2195”.\n\n# Example: change gender of one specific observation to \"Female\" \nlinelist &lt;- linelist %&gt;% \n  mutate(gender = replace(gender, case_id == \"2195\", \"Female\"))\n\nThe equivalent command using base R syntax and indexing brackets [ ] is below. It reads as “Change the value of the dataframe linelist‘s column gender (for the rows where linelist’s column case_id has the value ’2195’) to ‘Female’”.\n\nlinelist$gender[linelist$case_id == \"2195\"] &lt;- \"Female\"\n\n\n\n\nAnother tool for simple logic is ifelse() and its partner if_else(). However, in most cases for re-coding it is more clear to use case_when() (detailed below). These “if else” commands are simplified versions of an if and else programming statement. The general syntax is:\nifelse(condition, value to return if condition evaluates to TRUE, value to return if condition evaluates to FALSE)\nBelow, the column source_known is defined. Its value in a given row is set to “known” if the row’s value in column source is not missing. If the value in source is missing, then the value in source_known is set to “unknown”.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(source_known = ifelse(!is.na(source), \"known\", \"unknown\"))\n\nif_else() is a special version from dplyr that handles dates. Note that if the ‘true’ value is a date, the ‘false’ value must also qualify a date, hence using the special value NA_real_ instead of just NA.\n\n# Create a date of death column, which is NA if patient has not died.\nlinelist &lt;- linelist %&gt;% \n  mutate(date_death = if_else(outcome == \"Death\", date_outcome, NA_real_))\n\nAvoid stringing together many ifelse commands… use case_when() instead! case_when() is much easier to read and you’ll make fewer errors.\n\n\n\n\n\n\n\n\n\nOutside of the context of a data frame, if you want to have an object used in your code switch its value, consider using switch() from base R.\n\n\n\n\nUse dplyr’s case_when() if you are re-coding into many new groups, or if you need to use complex logic statements to re-code values. This function evaluates every row in the data frame, assess whether the rows meets specified criteria, and assigns the correct new value.\ncase_when() commands consist of statements that have a Right-Hand Side (RHS) and a Left-Hand Side (LHS) separated by a “tilde” ~. The logic criteria are in the left side and the pursuant values are in the right side of each statement. Statements are separated by commas.\nFor example, here we utilize the columns age and age_unit to create a column age_years:\n\nlinelist &lt;- linelist %&gt;% \n  mutate(age_years = case_when(\n       age_unit == \"years\"  ~ age,       # if age unit is years\n       age_unit == \"months\" ~ age/12,    # if age unit is months, divide age by 12\n       is.na(age_unit)      ~ age))      # if age unit is missing, assume years\n                                         # any other circumstance, assign NA (missing)\n\nAs each row in the data is evaluated, the criteria are applied/evaluated in the order the case_when() statements are written - from top-to-bottom. If the top criteria evaluates to TRUE for a given row, the RHS value is assigned, and the remaining criteria are not even tested for that row in the data. Thus, it is best to write the most specific criteria first, and the most general last. A data row that does not meet any of the RHS criteria will be assigned NA.\nSometimes, you may with to write a final statement that assigns a value for all other scenarios not described by one of the previous lines. To do this, place TRUE on the left-side, which will capture any row that did not meet any of the previous criteria. The right-side of this statement could be assigned a value like “check me!” or missing.\nBelow is another example of case_when() used to create a new column with the patient classification, according to a case definition for confirmed and suspect cases:\n\nlinelist &lt;- linelist %&gt;% \n     mutate(case_status = case_when(\n          \n          # if patient had lab test and it is positive,\n          # then they are marked as a confirmed case \n          ct_blood &lt; 20                   ~ \"Confirmed\",\n          \n          # given that a patient does not have a positive lab result,\n          # if patient has a \"source\" (epidemiological link) AND has fever, \n          # then they are marked as a suspect case\n          !is.na(source) & fever == \"yes\" ~ \"Suspect\",\n          \n          # any other patient not addressed above \n          # is marked for follow up\n          TRUE                            ~ \"To investigate\"))\n\n\n\n\n\nHere we describe some special approaches for creating categories from numerical columns. Common examples include age categories, groups of lab values, etc. Here we will discuss:\n\nage_categories(), from the epikit package\n\ncut(), from base R\n\ncase_when()\n\nquantile breaks with quantile() and ntile()\n\n\n\nFor this example we will create an age_cat column using the age_years column.\n\n#check the class of the linelist variable age\nclass(linelist$age_years)\n\n[1] \"numeric\"\n\n\n\n\n\nThe basic syntax within cut() is to first provide the numeric column to be cut (age_years), and then the breaks argument, which is a numeric vector c() of break points. Using cut(), the resulting column is an ordered factor.\nBy default, the categorization occurs so that the right/upper side is “open” and inclusive (and the left/lower side is “closed” or exclusive). This is the opposite behavior from the age_categories() function. The default labels use the notation “(A, B]”, which means A is not included but B is. Reverse this behavior by providing the right = TRUE argument.\nThus, by default, “0” values are excluded from the lowest group, and categorized as NA! “0” values could be infants coded as age 0 so be careful! To change this, add the argument include.lowest = TRUE so that any “0” values will be included in the lowest group. The automatically-generated label for the lowest category will then be “[A],B]”. Note that if you include the include.lowest = TRUE argument and right = TRUE, the extreme inclusion will now apply to the highest break point value and category, not the lowest.\nYou can provide a vector of customized labels using the labels = argument. As these are manually written, be very careful to ensure they are accurate! Check your work using cross-tabulation, as described below.\nAn example of cut() applied to age_years to make the new variable age_cat is below:\n\n# Create new variable, by cutting the numeric age variable\n# lower break is excluded but upper break is included in each category\nlinelist &lt;- linelist %&gt;% \n  mutate(\n    age_cat = cut(\n      age_years,\n      breaks = c(0, 5, 10, 15, 20,\n                 30, 50, 70, 100),\n      include.lowest = TRUE         # include 0 in lowest group\n      ))\n\n# tabulate the number of observations per group\ntable(linelist$age_cat, useNA = \"always\")\n\n\n   [0,5]   (5,10]  (10,15]  (15,20]  (20,30]  (30,50]  (50,70] (70,100] \n    1315     1065      930      696     1013      694       84        5 \n    &lt;NA&gt; \n      86 \n\n\nCheck your work!!! Verify that each age value was assigned to the correct category by cross-tabulating the numeric and category columns. Examine assignment of boundary values (e.g. 15, if neighboring categories are 10-15 and 16-20).\n\n\n\nIn common understanding, “quantiles” or “percentiles” typically refer to a value below which a proportion of values fall. For example, the 95th percentile of ages in linelist would be the age below which 95% of the age fall.\nHowever in common speech, “quartiles” and “deciles” can also refer to the groups of data as equally divided into 4, or 10 groups (note there will be one more break point than group).\nTo get quantile break points, you can use quantile() from the stats package from base R. You provide a numeric vector (e.g. a column in a dataset) and vector of numeric probability values ranging from 0 to 1.0. The break points are returned as a numeric vector. Explore the details of the statistical methodologies by entering ?quantile.\n\nIf your input numeric vector has any missing values it is best to set na.rm = TRUE\n\nSet names = FALSE to get an un-named numeric vector\n\n\nquantile(linelist$age_years,               # specify numeric vector to work on\n  probs = c(0, .25, .50, .75, .90, .95),   # specify the percentiles you want\n  na.rm = TRUE)                            # ignore missing values \n\n  0%  25%  50%  75%  90%  95% \n 0.0  6.0 13.0 23.0 33.9 41.0 \n\n\nYou can use the results of quantile() as break points in age_categories() or cut(). Below we create a new column deciles using cut() where the breaks are defined using quantiles() on age_years. Below, we display the results using tabyl() from janitor so you can see the percentages. Note how they are not exactly 10% in each group.\n\nlinelist %&gt;%                                # begin with linelist\n  mutate(deciles = cut(age_years,           # create new column decile as cut() on column age_years\n    breaks = quantile(                      # define cut breaks using quantile()\n      age_years,                               # operate on age_years\n      probs = seq(0, 1, by = 0.1),             # 0.0 to 1.0 by 0.1\n      na.rm = TRUE),                           # ignore missing values\n    include.lowest = TRUE)) %&gt;%             # for cut() include age 0\n  janitor::tabyl(deciles)                   # pipe to table to display\n\n   deciles   n    percent valid_percent\n     [0,2] 658 0.11175272    0.11340917\n     (2,5] 657 0.11158288    0.11323681\n     (5,7] 447 0.07591712    0.07704240\n    (7,10] 618 0.10495924    0.10651499\n   (10,13] 572 0.09714674    0.09858669\n   (13,17] 674 0.11447011    0.11616684\n   (17,21] 520 0.08831522    0.08962427\n   (21,26] 547 0.09290082    0.09427784\n (26,33.9] 528 0.08967391    0.09100310\n (33.9,84] 581 0.09867527    0.10013788\n      &lt;NA&gt;  86 0.01460598            NA"
  },
  {
    "objectID": "readings/recoding-values.html#manually-changing-specific-values",
    "href": "readings/recoding-values.html#manually-changing-specific-values",
    "title": "Recoding Values",
    "section": "",
    "text": "To change values manually you can use the recode() function within the mutate() function.\nImagine there is a nonsensical date in the data (e.g. “2014-14-15”): you could fix the date manually in the raw source data, or, you could write the change into the cleaning pipeline via mutate() and recode(). The latter is more transparent and reproducible to anyone else seeking to understand or repeat your analysis.\n\n# fix incorrect values                   # old value       # new value\nlinelist &lt;- linelist %&gt;% \n  mutate(date_onset = recode(date_onset, \"2014-14-15\" = \"2014-04-15\"))\n\nThe mutate() line above can be read as: “mutate the column date_onset to equal the column date_onset re-coded so that OLD VALUE is changed to NEW VALUE”. Note that this pattern (OLD = NEW) for recode() is the opposite of most R patterns (new = old). The R development community is working on revising this."
  },
  {
    "objectID": "readings/recoding-values.html#by-logic",
    "href": "readings/recoding-values.html#by-logic",
    "title": "Recoding Values",
    "section": "",
    "text": "Below we demonstrate how to re-code values in a column using logic and conditions:\n\nUsing replace(), ifelse() and if_else() for simple logic\nUsing case_when() for more complex logic\n\n\n\n\n\nTo re-code with simple logical criteria, you can use replace() within mutate(). replace() is a function from base R. Use a logic condition to specify the rows to change . The general syntax is:\nmutate(col_to_change = replace(col_to_change, criteria for rows, new value)).\nOne common situation to use replace() is changing just one value in one row, using an unique row identifier. Below, the gender is changed to “Female” in the row where the column case_id is “2195”.\n\n# Example: change gender of one specific observation to \"Female\" \nlinelist &lt;- linelist %&gt;% \n  mutate(gender = replace(gender, case_id == \"2195\", \"Female\"))\n\nThe equivalent command using base R syntax and indexing brackets [ ] is below. It reads as “Change the value of the dataframe linelist‘s column gender (for the rows where linelist’s column case_id has the value ’2195’) to ‘Female’”.\n\nlinelist$gender[linelist$case_id == \"2195\"] &lt;- \"Female\"\n\n\n\n\nAnother tool for simple logic is ifelse() and its partner if_else(). However, in most cases for re-coding it is more clear to use case_when() (detailed below). These “if else” commands are simplified versions of an if and else programming statement. The general syntax is:\nifelse(condition, value to return if condition evaluates to TRUE, value to return if condition evaluates to FALSE)\nBelow, the column source_known is defined. Its value in a given row is set to “known” if the row’s value in column source is not missing. If the value in source is missing, then the value in source_known is set to “unknown”.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(source_known = ifelse(!is.na(source), \"known\", \"unknown\"))\n\nif_else() is a special version from dplyr that handles dates. Note that if the ‘true’ value is a date, the ‘false’ value must also qualify a date, hence using the special value NA_real_ instead of just NA.\n\n# Create a date of death column, which is NA if patient has not died.\nlinelist &lt;- linelist %&gt;% \n  mutate(date_death = if_else(outcome == \"Death\", date_outcome, NA_real_))\n\nAvoid stringing together many ifelse commands… use case_when() instead! case_when() is much easier to read and you’ll make fewer errors.\n\n\n\n\n\n\n\n\n\nOutside of the context of a data frame, if you want to have an object used in your code switch its value, consider using switch() from base R.\n\n\n\n\nUse dplyr’s case_when() if you are re-coding into many new groups, or if you need to use complex logic statements to re-code values. This function evaluates every row in the data frame, assess whether the rows meets specified criteria, and assigns the correct new value.\ncase_when() commands consist of statements that have a Right-Hand Side (RHS) and a Left-Hand Side (LHS) separated by a “tilde” ~. The logic criteria are in the left side and the pursuant values are in the right side of each statement. Statements are separated by commas.\nFor example, here we utilize the columns age and age_unit to create a column age_years:\n\nlinelist &lt;- linelist %&gt;% \n  mutate(age_years = case_when(\n       age_unit == \"years\"  ~ age,       # if age unit is years\n       age_unit == \"months\" ~ age/12,    # if age unit is months, divide age by 12\n       is.na(age_unit)      ~ age))      # if age unit is missing, assume years\n                                         # any other circumstance, assign NA (missing)\n\nAs each row in the data is evaluated, the criteria are applied/evaluated in the order the case_when() statements are written - from top-to-bottom. If the top criteria evaluates to TRUE for a given row, the RHS value is assigned, and the remaining criteria are not even tested for that row in the data. Thus, it is best to write the most specific criteria first, and the most general last. A data row that does not meet any of the RHS criteria will be assigned NA.\nSometimes, you may with to write a final statement that assigns a value for all other scenarios not described by one of the previous lines. To do this, place TRUE on the left-side, which will capture any row that did not meet any of the previous criteria. The right-side of this statement could be assigned a value like “check me!” or missing.\nBelow is another example of case_when() used to create a new column with the patient classification, according to a case definition for confirmed and suspect cases:\n\nlinelist &lt;- linelist %&gt;% \n     mutate(case_status = case_when(\n          \n          # if patient had lab test and it is positive,\n          # then they are marked as a confirmed case \n          ct_blood &lt; 20                   ~ \"Confirmed\",\n          \n          # given that a patient does not have a positive lab result,\n          # if patient has a \"source\" (epidemiological link) AND has fever, \n          # then they are marked as a suspect case\n          !is.na(source) & fever == \"yes\" ~ \"Suspect\",\n          \n          # any other patient not addressed above \n          # is marked for follow up\n          TRUE                            ~ \"To investigate\"))"
  },
  {
    "objectID": "readings/recoding-values.html#num_cats",
    "href": "readings/recoding-values.html#num_cats",
    "title": "Recoding Values",
    "section": "",
    "text": "Here we describe some special approaches for creating categories from numerical columns. Common examples include age categories, groups of lab values, etc. Here we will discuss:\n\nage_categories(), from the epikit package\n\ncut(), from base R\n\ncase_when()\n\nquantile breaks with quantile() and ntile()\n\n\n\nFor this example we will create an age_cat column using the age_years column.\n\n#check the class of the linelist variable age\nclass(linelist$age_years)\n\n[1] \"numeric\"\n\n\n\n\n\nThe basic syntax within cut() is to first provide the numeric column to be cut (age_years), and then the breaks argument, which is a numeric vector c() of break points. Using cut(), the resulting column is an ordered factor.\nBy default, the categorization occurs so that the right/upper side is “open” and inclusive (and the left/lower side is “closed” or exclusive). This is the opposite behavior from the age_categories() function. The default labels use the notation “(A, B]”, which means A is not included but B is. Reverse this behavior by providing the right = TRUE argument.\nThus, by default, “0” values are excluded from the lowest group, and categorized as NA! “0” values could be infants coded as age 0 so be careful! To change this, add the argument include.lowest = TRUE so that any “0” values will be included in the lowest group. The automatically-generated label for the lowest category will then be “[A],B]”. Note that if you include the include.lowest = TRUE argument and right = TRUE, the extreme inclusion will now apply to the highest break point value and category, not the lowest.\nYou can provide a vector of customized labels using the labels = argument. As these are manually written, be very careful to ensure they are accurate! Check your work using cross-tabulation, as described below.\nAn example of cut() applied to age_years to make the new variable age_cat is below:\n\n# Create new variable, by cutting the numeric age variable\n# lower break is excluded but upper break is included in each category\nlinelist &lt;- linelist %&gt;% \n  mutate(\n    age_cat = cut(\n      age_years,\n      breaks = c(0, 5, 10, 15, 20,\n                 30, 50, 70, 100),\n      include.lowest = TRUE         # include 0 in lowest group\n      ))\n\n# tabulate the number of observations per group\ntable(linelist$age_cat, useNA = \"always\")\n\n\n   [0,5]   (5,10]  (10,15]  (15,20]  (20,30]  (30,50]  (50,70] (70,100] \n    1315     1065      930      696     1013      694       84        5 \n    &lt;NA&gt; \n      86 \n\n\nCheck your work!!! Verify that each age value was assigned to the correct category by cross-tabulating the numeric and category columns. Examine assignment of boundary values (e.g. 15, if neighboring categories are 10-15 and 16-20).\n\n\n\nIn common understanding, “quantiles” or “percentiles” typically refer to a value below which a proportion of values fall. For example, the 95th percentile of ages in linelist would be the age below which 95% of the age fall.\nHowever in common speech, “quartiles” and “deciles” can also refer to the groups of data as equally divided into 4, or 10 groups (note there will be one more break point than group).\nTo get quantile break points, you can use quantile() from the stats package from base R. You provide a numeric vector (e.g. a column in a dataset) and vector of numeric probability values ranging from 0 to 1.0. The break points are returned as a numeric vector. Explore the details of the statistical methodologies by entering ?quantile.\n\nIf your input numeric vector has any missing values it is best to set na.rm = TRUE\n\nSet names = FALSE to get an un-named numeric vector\n\n\nquantile(linelist$age_years,               # specify numeric vector to work on\n  probs = c(0, .25, .50, .75, .90, .95),   # specify the percentiles you want\n  na.rm = TRUE)                            # ignore missing values \n\n  0%  25%  50%  75%  90%  95% \n 0.0  6.0 13.0 23.0 33.9 41.0 \n\n\nYou can use the results of quantile() as break points in age_categories() or cut(). Below we create a new column deciles using cut() where the breaks are defined using quantiles() on age_years. Below, we display the results using tabyl() from janitor so you can see the percentages. Note how they are not exactly 10% in each group.\n\nlinelist %&gt;%                                # begin with linelist\n  mutate(deciles = cut(age_years,           # create new column decile as cut() on column age_years\n    breaks = quantile(                      # define cut breaks using quantile()\n      age_years,                               # operate on age_years\n      probs = seq(0, 1, by = 0.1),             # 0.0 to 1.0 by 0.1\n      na.rm = TRUE),                           # ignore missing values\n    include.lowest = TRUE)) %&gt;%             # for cut() include age 0\n  janitor::tabyl(deciles)                   # pipe to table to display\n\n   deciles   n    percent valid_percent\n     [0,2] 658 0.11175272    0.11340917\n     (2,5] 657 0.11158288    0.11323681\n     (5,7] 447 0.07591712    0.07704240\n    (7,10] 618 0.10495924    0.10651499\n   (10,13] 572 0.09714674    0.09858669\n   (13,17] 674 0.11447011    0.11616684\n   (17,21] 520 0.08831522    0.08962427\n   (21,26] 547 0.09290082    0.09427784\n (26,33.9] 528 0.08967391    0.09100310\n (33.9,84] 581 0.09867527    0.10013788\n      &lt;NA&gt;  86 0.01460598            NA"
  },
  {
    "objectID": "readings/data-basics.html#assignment-operators",
    "href": "readings/data-basics.html#assignment-operators",
    "title": "Core Data Functions",
    "section": "",
    "text": "&lt;-\nThe basic assignment operator in R is &lt;-. Such that object_name &lt;- value.\nThis assignment operator can also be written as =. We advise use of &lt;- for general R use.\nWe also advise surrounding such operators with spaces, for readability."
  },
  {
    "objectID": "readings/data-basics.html#relational-and-logical-operators",
    "href": "readings/data-basics.html#relational-and-logical-operators",
    "title": "Core Data Functions",
    "section": "",
    "text": "Relational operators compare values and are often used when defining new variables and subsets of datasets. Here are the common relational operators in R:\n\n\n\n\n\n\n\n\n\nMeaning\nOperator\nExample\nExample Result\n\n\n\n\nEqual to\n==\n\"A\" == \"a\"\nFALSE (because R is case sensitive) Note that == (double equals) is different from = (single equals), which acts like the assignment operator &lt;-\n\n\nNot equal to\n!=\n2 != 0\nTRUE\n\n\nGreater than\n&gt;\n4 &gt; 2\nTRUE\n\n\nLess than\n&lt;\n4 &lt; 2\nFALSE\n\n\nGreater than or equal to\n&gt;=\n6 &gt;= 4\nTRUE\n\n\nLess than or equal to\n&lt;=\n6 &lt;= 4\nFALSE\n\n\nValue is missing\nis.na()\nis.na(7)\nFALSE\n\n\nValue is not missing\n!is.na()\n!is.na(7)\nTRUE\n\n\n\nLogical operators, such as AND and OR, are often used to connect relational operators and create more complicated criteria. Complex statements might require parentheses ( ) for grouping and order of application.\n\n\n\n\n\n\n\nMeaning\nOperator\n\n\n\n\nAND\n&\n\n\nOR\n| (vertical bar)\n\n\nParentheses\n( ) Used to group criteria together and clarify order of operations\n\n\n\nFor example, below, we have a linelist with two variables we want to use to create our case definition, hep_e_rdt, a test result and other_cases_in_hh, which will tell us if there are other cases in the household. The command below uses the function case_when() to create the new variable case_def such that:\n\nlinelist_cleaned &lt;- linelist %&gt;%\n  mutate(case_def = case_when(\n    is.na(rdt_result) & is.na(other_case_in_home)            ~ NA_character_,\n    rdt_result == \"Positive\"                                 ~ \"Confirmed\",\n    rdt_result != \"Positive\" & other_cases_in_home == \"Yes\"  ~ \"Probable\",\n    TRUE                                                     ~ \"Suspected\"\n  ))\n\n\n\n\n\n\n\n\nCriteria in example above\nResulting value in new variable “case_def”\n\n\n\n\nIf the value for variables rdt_result and other_cases_in_home are missing\nNA (missing)\n\n\nIf the value in rdt_result is “Positive”\n“Confirmed”\n\n\nIf the value in rdt_result is NOT “Positive” AND the value in other_cases_in_home is “Yes”\n“Probable”\n\n\nIf one of the above criteria are not met\n“Suspected”\n\n\n\nNote that R is case-sensitive, so “Positive” is different than “positive”…"
  },
  {
    "objectID": "readings/data-basics.html#missing-values",
    "href": "readings/data-basics.html#missing-values",
    "title": "Core Data Functions",
    "section": "",
    "text": "In R, missing values are represented by the special value NA (a “reserved” value) (capital letters N and A - not in quotation marks). To test whether a value is NA, use the special function is.na(), which returns TRUE or FALSE.\n\nrdt_result &lt;- c(\"Positive\", \"Suspected\", \"Positive\", NA)   # two positive cases, one suspected, and one unknown\nis.na(rdt_result)  # Tests whether the value of rdt_result is NA\n\n[1] FALSE FALSE FALSE  TRUE\n\n\nWe will be learning more about how to deal with missing data in future weeks."
  },
  {
    "objectID": "readings/data-basics.html#mathematics-and-statistics",
    "href": "readings/data-basics.html#mathematics-and-statistics",
    "title": "Core Data Functions",
    "section": "",
    "text": "All the operators and functions in this page are automatically available using base R.\n\n\nThese are often used to perform addition, division, to create new columns, etc. Below are common mathematical operators in R. Whether you put spaces around the operators is not important.\n\n\n\nPurpose\nExample in R\n\n\n\n\naddition\n2 + 3\n\n\nsubtraction\n2 - 3\n\n\nmultiplication\n2 * 3\n\n\ndivision\n30 / 5\n\n\nexponent\n2^3\n\n\norder of operations\n( )\n\n\n\n\n\n\n\n\n\nPurpose\nFunction\n\n\n\n\nrounding\nround(x, digits = n)\n\n\nrounding\njanitor::round_half_up(x, digits = n)\n\n\nceiling (round up)\nceiling(x)\n\n\nfloor (round down)\nfloor(x)\n\n\nabsolute value\nabs(x)\n\n\nsquare root\nsqrt(x)\n\n\nexponent\nexponent(x)\n\n\nnatural logarithm\nlog(x)\n\n\nlog base 10\nlog10(x)\n\n\nlog base 2\nlog2(x)\n\n\n\nNote: for round() the digits = specifies the number of decimal placed. Use signif() to round to a number of significant figures.\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe functions below will by default include missing values in calculations. Missing values will result in an output of NA, unless the argument na.rm = TRUE is specified. This can be written shorthand as na.rm = T.\n\n\n\n\n\nObjective\nFunction\n\n\n\n\nmean (average)\nmean(x, na.rm=T)\n\n\nmedian\nmedian(x, na.rm=T)\n\n\nstandard deviation\nsd(x, na.rm=T)\n\n\nquantiles*\nquantile(x, probs)\n\n\nsum\nsum(x, na.rm=T)\n\n\nminimum value\nmin(x, na.rm=T)\n\n\nmaximum value\nmax(x, na.rm=T)\n\n\nrange of numeric values\nrange(x, na.rm=T)\n\n\nsummary**\nsummary(x)\n\n\n\nNotes:\n\n*quantile(): x is the numeric vector to examine, and probs = is a numeric vector with probabilities within 0 and 1.0, e.g c(0.5, 0.8, 0.85)\n**summary(): gives a summary on a numeric vector including mean, median, and common percentiles\n\n\n\n\n\n\n\nWarning\n\n\n\nIf providing a vector of numbers to one of the above functions, be sure to wrap the numbers within c() .}\n\n# If supplying raw numbers to a function, wrap them in c()\nmean(1, 6, 12, 10, 5, 0)    # !!! INCORRECT !!!  \n\n[1] 1\n\nmean(c(1, 6, 12, 10, 5, 0)) # CORRECT\n\n[1] 5.666667"
  },
  {
    "objectID": "readings/data-basics.html#other-useful-functions",
    "href": "readings/data-basics.html#other-useful-functions",
    "title": "Core Data Functions",
    "section": "",
    "text": "Objective\nFunction\nExample\n\n\n\n\ncreate a sequence\nseq(from, to, by)\nseq(1, 10, 2)\n\n\nrepeat x, n times\nrep(x, ntimes)\nrep(1:3, 2) or rep(c(\"a\", \"b\", \"c\"), 3)\n\n\nsubdivide a numeric vector\ncut(x, n)\ncut(linelist$age, 5)\n\n\ntake a random sample\nsample(x, size)\nsample(linelist$id, size = 5, replace = TRUE)"
  },
  {
    "objectID": "readings/data-basics.html#in",
    "href": "readings/data-basics.html#in",
    "title": "Core Data Functions",
    "section": "",
    "text": "A very useful operator for matching values, and for quickly assessing if a value is within a vector or dataframe.\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\", \"d\")\n\n\n\"a\" %in% my_vector\n\n[1] TRUE\n\n\"h\" %in% my_vector\n\n[1] FALSE\n\n\nTo ask if a value is not %in% a vector, put an exclamation mark (!) in front of the logic statement:\n\n# to negate, put an exclamation in front\n!\"a\" %in% my_vector\n\n[1] FALSE\n\n!\"h\" %in% my_vector\n\n[1] TRUE\n\n\n%in% is very useful when using the dplyr function case_when(). You can define a vector previously, and then reference it later. For example:\n\naffirmative &lt;- c(\"1\", \"Yes\", \"YES\", \"yes\", \"y\", \"Y\", \"oui\", \"Oui\", \"Si\")\n\nlinelist &lt;- linelist %&gt;% \n  mutate(child_hospitaled = case_when(\n    hospitalized %in% affirmative & age &lt; 18 ~ \"Hospitalized Child\",\n    TRUE                                      ~ \"Not\"))"
  },
  {
    "objectID": "readings/data-basics.html#tidyverse-functions",
    "href": "readings/data-basics.html#tidyverse-functions",
    "title": "Core Data Functions",
    "section": "",
    "text": "We will be emphasizing use of the functions from the tidyverse family of R packages. The functions we will be learning about are listed below.\nMany of these functions belong to the dplyr R package, which provides “verb” functions to solve data manipulation challenges (the name is a reference to a “data frame-plier. dplyr is part of the tidyverse family of R packages (which also includes ggplot2, tidyr, stringr, tibble, purrr, magrittr, and forcats among others).\n\n\n\n\n\n\n\n\nFunction\nUtility\nPackage\n\n\n\n\n%&gt;%\n“pipe” (pass) data from one function to the next\nmagrittr\n\n\nmutate()\ncreate, transform, and re-define columns\ndplyr\n\n\nselect()\nkeep, remove, select, or re-name columns\ndplyr\n\n\nrename()\nrename columns\ndplyr\n\n\nclean_names()\nstandardize the syntax of column names\njanitor\n\n\nas.character(), as.numeric(), as.Date(), etc.\nconvert the class of a column\nbase R\n\n\nacross()\ntransform multiple columns at one time\ndplyr\n\n\ntidyselect functions\nuse logic to select columns\ntidyselect\n\n\nfilter()\nkeep certain rows\ndplyr\n\n\ndistinct()\nde-duplicate rows\ndplyr\n\n\nrowwise()\noperations by/within each row\ndplyr\n\n\nadd_row()\nadd rows manually\ntibble\n\n\narrange()\nsort rows\ndplyr\n\n\nrecode()\nre-code values in a column\ndplyr\n\n\ncase_when()\nre-code values in a column using more complex logical criteria\ndplyr\n\n\nreplace_na(), na_if(), coalesce()\nspecial functions for re-coding\ntidyr\n\n\nage_categories() and cut()\ncreate categorical groups from a numeric column\nepikit and base R\n\n\nmatch_df()\nre-code/clean values using a data dictionary\nmatchmaker\n\n\nwhich()\napply logical criteria; return indices\nbase R"
  },
  {
    "objectID": "readings/using-tables.html",
    "href": "readings/using-tables.html",
    "title": "Basic Data Operations",
    "section": "",
    "text": "Extended Materials\n\n\n\nYou can find the original, extended version of this chapter here.\n\n\n\n\nWe will continue to use the same linelist data we saw during Session 0. This is a fictional Ebola outbreak, expanded from the ebola_sim practice dataset in the outbreaks package.\n\nlinelist &lt;- import(\"linelist_cleaned.rds\")\n\nThe first 50 rows of linelist:\n\n\n   case_id generation date_infection date_onset date_hospitalisation\n1   5fe599          4     2014-05-08 2014-05-13           2014-05-15\n2   8689b7          4           &lt;NA&gt; 2014-05-13           2014-05-14\n3   11f8ea          2           &lt;NA&gt; 2014-05-16           2014-05-18\n4   b8812a          3     2014-05-04 2014-05-18           2014-05-20\n5   893f25          3     2014-05-18 2014-05-21           2014-05-22\n6   be99c8          3     2014-05-03 2014-05-22           2014-05-23\n7   07e3e8          4     2014-05-22 2014-05-27           2014-05-29\n8   369449          4     2014-05-28 2014-06-02           2014-06-03\n9   f393b4          4           &lt;NA&gt; 2014-06-05           2014-06-06\n10  1389ca          4           &lt;NA&gt; 2014-06-05           2014-06-07\n11  2978ac          4     2014-05-30 2014-06-06           2014-06-08\n12  57a565          4     2014-05-28 2014-06-13           2014-06-15\n13  fc15ef          6     2014-06-14 2014-06-16           2014-06-17\n14  2eaa9a          5     2014-06-07 2014-06-17           2014-06-17\n15  bbfa93          6     2014-06-09 2014-06-18           2014-06-20\n16  c97dd9          9           &lt;NA&gt; 2014-06-19           2014-06-19\n17  f50e8a         10           &lt;NA&gt; 2014-06-22           2014-06-23\n18  3a7673          8           &lt;NA&gt; 2014-06-23           2014-06-24\n19  7f5a01          7     2014-06-23 2014-06-25           2014-06-27\n20  ddddee          6     2014-06-18 2014-06-26           2014-06-28\n21  99e8fa          7     2014-06-24 2014-06-28           2014-06-29\n22  567136          6           &lt;NA&gt; 2014-07-02           2014-07-03\n23  9371a9          8           &lt;NA&gt; 2014-07-08           2014-07-09\n24  bc2adf          6     2014-07-03 2014-07-09           2014-07-09\n25  403057         10           &lt;NA&gt; 2014-07-09           2014-07-11\n26  8bd1e8          8     2014-07-10 2014-07-10           2014-07-11\n27  f327be          6     2014-06-14 2014-07-12           2014-07-13\n28  42e1a9         12           &lt;NA&gt; 2014-07-12           2014-07-14\n29  90e5fe          5     2014-06-18 2014-07-13           2014-07-14\n30  959170          8     2014-06-29 2014-07-13           2014-07-13\n31  8ebf6e          7     2014-07-02 2014-07-14           2014-07-14\n32  e56412          9     2014-07-12 2014-07-15           2014-07-17\n33  6d788e         11     2014-07-12 2014-07-16           2014-07-17\n34  a47529          5     2014-06-13 2014-07-17           2014-07-18\n35  67be4e          8     2014-07-15 2014-07-17           2014-07-19\n36  da8ecb          5     2014-06-20 2014-07-18           2014-07-20\n37  148f18          6           &lt;NA&gt; 2014-07-19           2014-07-20\n38  2cb9a5         11           &lt;NA&gt; 2014-07-22           2014-07-22\n39  f5c142          7     2014-07-20 2014-07-22           2014-07-24\n40  70a9fe          9           &lt;NA&gt; 2014-07-24           2014-07-26\n41  3ad520          7     2014-07-12 2014-07-24           2014-07-24\n42  062638          8     2014-07-19 2014-07-25           2014-07-27\n43  c76676          9     2014-07-18 2014-07-25           2014-07-25\n44  baacc1         12     2014-07-18 2014-07-27           2014-07-27\n45  497372         13     2014-07-27 2014-07-29           2014-07-31\n46  23e499          9           &lt;NA&gt; 2014-07-30           2014-08-01\n47  38cc4a          8     2014-07-19       &lt;NA&gt;           2014-08-03\n48  3789ee         10     2014-07-26 2014-08-01           2014-08-02\n49  c71dcd          8     2014-07-24 2014-08-02           2014-08-02\n50  6b70f0          7           &lt;NA&gt; 2014-08-03           2014-08-04\n   date_outcome outcome gender age age_unit age_years age_cat age_cat5\n1          &lt;NA&gt;    &lt;NA&gt;      m   2    years         2     0-4      0-4\n2    2014-05-18 Recover      f   3    years         3     0-4      0-4\n3    2014-05-30 Recover      m  56    years        56   50-69    55-59\n4          &lt;NA&gt;    &lt;NA&gt;      f  18    years        18   15-19    15-19\n5    2014-05-29 Recover      m   3    years         3     0-4      0-4\n6    2014-05-24 Recover      f  16    years        16   15-19    15-19\n7    2014-06-01 Recover      f  16    years        16   15-19    15-19\n8    2014-06-07   Death      f   0    years         0     0-4      0-4\n9    2014-06-18 Recover      m  61    years        61   50-69    60-64\n10   2014-06-09   Death      f  27    years        27   20-29    25-29\n11   2014-06-15   Death      m  12    years        12   10-14    10-14\n12         &lt;NA&gt;   Death      m  42    years        42   30-49    40-44\n13   2014-07-09 Recover      m  19    years        19   15-19    15-19\n14         &lt;NA&gt; Recover      f   7    years         7     5-9      5-9\n15   2014-06-30    &lt;NA&gt;      f   7    years         7     5-9      5-9\n16   2014-07-11 Recover      m  13    years        13   10-14    10-14\n17   2014-07-01    &lt;NA&gt;      f  35    years        35   30-49    35-39\n18   2014-06-25    &lt;NA&gt;      f  17    years        17   15-19    15-19\n19   2014-07-06   Death      f  11    years        11   10-14    10-14\n20   2014-07-02   Death      f  11    years        11   10-14    10-14\n21   2014-07-09 Recover      m  19    years        19   15-19    15-19\n22   2014-07-07    &lt;NA&gt;      m  54    years        54   50-69    50-54\n23   2014-07-20    &lt;NA&gt;      f  14    years        14   10-14    10-14\n24         &lt;NA&gt;    &lt;NA&gt;      m  28    years        28   20-29    25-29\n25   2014-07-22   Death      f   6    years         6     5-9      5-9\n26   2014-07-16    &lt;NA&gt;      m   3    years         3     0-4      0-4\n27   2014-07-14   Death      m  31    years        31   30-49    30-34\n28   2014-07-20   Death      f   6    years         6     5-9      5-9\n29   2014-07-16    &lt;NA&gt;      m  67    years        67   50-69    65-69\n30   2014-07-19   Death      f  14    years        14   10-14    10-14\n31   2014-07-27 Recover      f  10    years        10   10-14    10-14\n32   2014-07-19   Death      f  21    years        21   20-29    20-24\n33         &lt;NA&gt; Recover      m  20    years        20   20-29    20-24\n34   2014-07-26   Death      m  45    years        45   30-49    45-49\n35   2014-08-14 Recover      f   1    years         1     0-4      0-4\n36   2014-08-01    &lt;NA&gt;      m  12    years        12   10-14    10-14\n37   2014-07-23   Death      f   3    years         3     0-4      0-4\n38   2014-08-28 Recover      f  15    years        15   15-19    15-19\n39   2014-07-28 Recover      f  20    years        20   20-29    20-24\n40   2014-07-19   Death      m  36    years        36   30-49    35-39\n41         &lt;NA&gt;    &lt;NA&gt;      f   7    years         7     5-9      5-9\n42   2014-08-03    &lt;NA&gt;      m  13    years        13   10-14    10-14\n43         &lt;NA&gt;   Death      f  14    years        14   10-14    10-14\n44         &lt;NA&gt;   Death      m   3    years         3     0-4      0-4\n45         &lt;NA&gt;   Death      m  10    years        10   10-14    10-14\n46   2014-08-06   Death      f   1    years         1     0-4      0-4\n47   2014-08-21 Recover      m   0    years         0     0-4      0-4\n48   2014-09-13    &lt;NA&gt;      f  20    years        20   20-29    20-24\n49   2014-08-04   Death      m  26    years        26   20-29    25-29\n50         &lt;NA&gt;   Death      m  14    years        14   10-14    10-14\n                               hospital       lon      lat infector  source\n1                                 Other -13.21574 8.468973   f547d6   other\n2                               Missing -13.21523 8.451719     &lt;NA&gt;    &lt;NA&gt;\n3  St. Mark's Maternity Hospital (SMMH) -13.21291 8.464817     &lt;NA&gt;    &lt;NA&gt;\n4                         Port Hospital -13.23637 8.475476   f90f5f   other\n5                     Military Hospital -13.22286 8.460824   11f8ea   other\n6                         Port Hospital -13.22263 8.461831   aec8ec   other\n7                               Missing -13.23315 8.462729   893f25   other\n8                               Missing -13.23210 8.461444   133ee7   other\n9                               Missing -13.22255 8.461913     &lt;NA&gt;    &lt;NA&gt;\n10                              Missing -13.25722 8.472923     &lt;NA&gt;    &lt;NA&gt;\n11                        Port Hospital -13.22063 8.484016   996f3a   other\n12                    Military Hospital -13.25399 8.458371   133ee7   other\n13                              Missing -13.23851 8.477617   37a6f6   other\n14                              Missing -13.20939 8.475702   9f6884   other\n15                                Other -13.21573 8.477799   4802b1   other\n16                        Port Hospital -13.22434 8.471451     &lt;NA&gt;    &lt;NA&gt;\n17                        Port Hospital -13.23361 8.478048     &lt;NA&gt;    &lt;NA&gt;\n18                        Port Hospital -13.21422 8.485280     &lt;NA&gt;    &lt;NA&gt;\n19                              Missing -13.23397 8.469575   a75c7f   other\n20                                Other -13.25356 8.459574   8e104d   other\n21                        Port Hospital -13.22501 8.474049   ab634e   other\n22                        Port Hospital -13.21607 8.488029     &lt;NA&gt;    &lt;NA&gt;\n23 St. Mark's Maternity Hospital (SMMH) -13.26807 8.473437     &lt;NA&gt;    &lt;NA&gt;\n24                              Missing -13.22667 8.484083   b799eb   other\n25                                Other -13.21602 8.462422     &lt;NA&gt;    &lt;NA&gt;\n26                              Missing -13.24826 8.470268   5d9e4d   other\n27 St. Mark's Maternity Hospital (SMMH) -13.21563 8.463984   a15e13   other\n28                    Military Hospital -13.21424 8.464135     &lt;NA&gt;    &lt;NA&gt;\n29                        Port Hospital -13.26149 8.456231   ea3740   other\n30                     Central Hospital -13.24530 8.483346   beb26e funeral\n31                    Military Hospital -13.26306 8.474940   567136   other\n32                     Central Hospital -13.23433 8.478321   894024 funeral\n33                              Missing -13.21991 8.469393   36e2e7   other\n34                    Military Hospital -13.22273 8.484806   a2086d   other\n35                                Other -13.23431 8.471212   7baf73   other\n36                              Missing -13.21878 8.484384   eb2277 funeral\n37                              Missing -13.24837 8.484662     &lt;NA&gt;    &lt;NA&gt;\n38                        Port Hospital -13.20975 8.477142     &lt;NA&gt;    &lt;NA&gt;\n39                        Port Hospital -13.26809 8.462381   d6584f   other\n40                        Port Hospital -13.25875 8.455686     &lt;NA&gt;    &lt;NA&gt;\n41                              Missing -13.26264 8.463288   312ecf   other\n42                     Central Hospital -13.26972 8.479407   52ea64   other\n43                    Military Hospital -13.22090 8.463539   cfd79c   other\n44                                Other -13.23307 8.461790   d145b7   other\n45                                Other -13.26809 8.475087   174288   other\n46                                Other -13.25472 8.458258     &lt;NA&gt;    &lt;NA&gt;\n47                              Missing -13.25737 8.453257   53608c funeral\n48 St. Mark's Maternity Hospital (SMMH) -13.21374 8.473257   3b096b   other\n49 St. Mark's Maternity Hospital (SMMH) -13.21760 8.479116   f5c142   other\n50                              Missing -13.24864 8.484803     &lt;NA&gt;    &lt;NA&gt;\n   wt_kg ht_cm ct_blood fever chills cough aches vomit temp time_admission\n1     27    48       22    no     no   yes    no   yes 36.8           &lt;NA&gt;\n2     25    59       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          09:36\n3     91   238       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:48\n4     41   135       23    no     no    no    no    no 36.8          11:22\n5     36    71       23    no     no   yes    no   yes 36.9          12:60\n6     56   116       21    no     no   yes    no   yes 37.6          14:13\n7     47    87       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.3          14:33\n8      0    11       22    no     no   yes    no   yes 37.0          09:25\n9     86   226       22    no     no   yes    no   yes 36.4          11:16\n10    69   174       22    no     no   yes    no    no 35.9          10:55\n11    67   112       22    no     no   yes    no   yes 36.5          16:03\n12    84   186       22    no     no   yes    no    no 36.9          11:14\n13    68   174       22    no     no   yes    no    no 36.5          12:42\n14    44    90       21    no     no   yes    no    no 37.1          11:06\n15    34    91       23    no     no   yes    no   yes 36.5          09:10\n16    66   152       22    no     no   yes   yes    no 37.3          08:45\n17    78   214       23    no    yes   yes    no    no 37.0           &lt;NA&gt;\n18    47   137       21    no     no   yes    no    no 38.0          15:41\n19    53   117       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 38.0          13:34\n20    47   131       23    no     no   yes    no    no 36.0          18:58\n21    71   150       21    no     no   yes    no   yes 37.0          12:43\n22    86   241       23    no     no   yes    no    no 36.7          16:33\n23    53   131       21    no    yes   yes    no    no 36.9          14:29\n24    69   161       24    no     no   yes    no    no 36.5          07:18\n25    38    80       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.0          08:11\n26    46    69       22    no     no   yes    no    no 36.5          16:32\n27    68   188       24    no     no   yes    no    no 37.6          16:17\n28    37    66       23    no    yes   yes    no    no 36.6          07:32\n29   100   233       20  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.6          17:45\n30    56   142       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.2           &lt;NA&gt;\n31    50   110       24    no     no   yes    no    no 36.4          13:24\n32    57   182       20    no     no   yes    no   yes 37.1          14:43\n33    65   164       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.5          02:33\n34    72   214       21    no     no   yes    no   yes 37.5          11:36\n35    29    26       22    no     no   yes    no   yes 37.4          17:28\n36    69   157       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:27\n37    37    39       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.4           &lt;NA&gt;\n38    48   154       22    no     no   yes   yes   yes 37.3          20:49\n39    54   133       23    no     no   yes   yes   yes 37.0           &lt;NA&gt;\n40    71   168       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.8          11:38\n41    47   100       23    no     no   yes    no   yes 36.5          14:25\n42    61   125       22    no     no   yes    no   yes 37.5          13:42\n43    47   123       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.7          21:22\n44    35    67       22    no     no   yes    no   yes 37.0          13:33\n45    53   134       22    no    yes   yes    no   yes 37.3          19:06\n46    16    31       22    no     no   yes    no    no 36.6          17:14\n47    13    36       23    no     no   yes    no   yes 36.5          20:09\n48    59   125       22    no     no   yes    no   yes 36.6           &lt;NA&gt;\n49    69   183       22    no     no    no    no   yes 37.6          10:23\n50    67   169       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.8          09:09\n         bmi days_onset_hosp\n1  117.18750               2\n2   71.81844               1\n3   16.06525               2\n4   22.49657               2\n5   71.41440               1\n6   41.61712               1\n7   62.09539               2\n8    0.00000               1\n9   16.83765               1\n10  22.79033               2\n11  53.41199               2\n12  24.28026               2\n13  22.46003               1\n14  54.32099               0\n15  41.05784               2\n16  28.56648               0\n17  17.03206               1\n18  25.04129               1\n19  38.71722               2\n20  27.38768               2\n21  31.55556               1\n22  14.80691               1\n23  30.88398               1\n24  26.61934               0\n25  59.37500               2\n26  96.61836               1\n27  19.23947               1\n28  84.94031               2\n29  18.41994               1\n30  27.77227               0\n31  41.32231               0\n32  17.20807               2\n33  24.16716               1\n34  15.72190               1\n35 428.99408               2\n36  27.99302               2\n37 243.26101               1\n38  20.23950               0\n39  30.52745               2\n40  25.15590               2\n41  47.00000               0\n42  39.04000               2\n43  31.06616               0\n44  77.96837               0\n45  29.51660               2\n46 166.49324               2\n47 100.30864              NA\n48  37.76000               1\n49  20.60378               0\n50  23.45856               1\n\n\n\n\n\nUse select() from dplyr to select the columns you want to retain, and to specify their order in the data frame.\nHere are ALL the column names in the linelist at this point in the cleaning pipe chain:\n\nnames(linelist)\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_onset\"           \"date_hospitalisation\" \"date_outcome\"        \n [7] \"outcome\"              \"gender\"               \"age\"                 \n[10] \"age_unit\"             \"age_years\"            \"age_cat\"             \n[13] \"age_cat5\"             \"hospital\"             \"lon\"                 \n[16] \"lat\"                  \"infector\"             \"source\"              \n[19] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"            \n[22] \"fever\"                \"chills\"               \"cough\"               \n[25] \"aches\"                \"vomit\"                \"temp\"                \n[28] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\n\n\nSelect only the columns you want to remain\nPut their names in the select() command, with no quotation marks. They will appear in the data frame in the order you provide. Note that if you include a column that does not exist, R will return an error (see use of any_of() below if you want no error in this situation).\n\n# linelist dataset is piped through select() command, and names() prints just the column names\nlinelist %&gt;% \n  select(case_id, date_onset, date_hospitalisation, fever) %&gt;% \n  names()  # display the column names\n\n[1] \"case_id\"              \"date_onset\"           \"date_hospitalisation\"\n[4] \"fever\"               \n\n\n\n\n\nIndicate which columns to remove by placing a minus symbol “-” in front of the column name (e.g. select(-outcome)), or a vector of column names (as below). All other columns will be retained.\n\nlinelist %&gt;% \n  select(-c(date_onset, fever:vomit)) %&gt;% # remove date_onset and all columns from fever to vomit\n  names()\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_hospitalisation\" \"date_outcome\"         \"outcome\"             \n [7] \"gender\"               \"age\"                  \"age_unit\"            \n[10] \"age_years\"            \"age_cat\"              \"age_cat5\"            \n[13] \"hospital\"             \"lon\"                  \"lat\"                 \n[16] \"infector\"             \"source\"               \"wt_kg\"               \n[19] \"ht_cm\"                \"ct_blood\"             \"temp\"                \n[22] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\nYou can also remove a column using base R syntax, by defining it as NULL. For example:\n\nlinelist$date_onset &lt;- NULL   # deletes column with base R syntax \n\n\n\n\nselect() can also be used as an independent command (not in a pipe chain). In this case, the first argument is the original dataframe to be operated upon.\n\n# Create a new linelist with id and age-related columns\nlinelist_age &lt;- select(linelist, case_id, contains(\"age\"))\n\n# display the column names\nnames(linelist_age)\n\n[1] \"case_id\"   \"age\"       \"age_unit\"  \"age_years\" \"age_cat\"   \"age_cat5\" \n\n\n\n\n\n\nIn addition to selecting columns, we can create new columns with mutate(). The syntax is: mutate(new_column_name = value or transformation). mutate() can also be used to modify an existing column.\n\n\nThe most basic mutate() command to create a new column might look like this. It creates a new column new_col where the value in every row is 10.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(new_col = 10)\n\nYou can also reference values in other columns, to perform calculations. Below, a new column bmi is created to hold the Body Mass Index (BMI) for each case - as calculated using the formula BMI = kg/m^2, using column ht_cm and column wt_kg.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(bmi = wt_kg / (ht_cm/100)^2)\n\nIf creating multiple new columns, separate each with a comma and new line. Below are examples of new columns, including ones that consist of values from other columns combined using str_glue() from the stringr package.\n\nnew_col_demo &lt;- linelist %&gt;%                       \n  mutate(\n    new_var_dup    = case_id,             # new column = duplicate/copy another existing column\n    new_var_static = 7,                   # new column = all values the same\n    new_var_static = new_var_static + 5,  # you can overwrite a column, and it can be a calculation using other variables\n    new_var_paste  = stringr::str_glue(\"{hospital} on ({date_hospitalisation})\") # new column = pasting together values from other columns\n    ) %&gt;% \n  select(case_id, hospital, date_hospitalisation, contains(\"new\"))        # show only new columns, for demonstration purposes\n\nReview the new columns. For demonstration purposes, only the new columns and the columns used to create them are shown:\n\n\n   case_id                             hospital date_hospitalisation\n1   5fe599                                Other           2014-05-15\n2   8689b7                              Missing           2014-05-14\n3   11f8ea St. Mark's Maternity Hospital (SMMH)           2014-05-18\n4   b8812a                        Port Hospital           2014-05-20\n5   893f25                    Military Hospital           2014-05-22\n6   be99c8                        Port Hospital           2014-05-23\n7   07e3e8                              Missing           2014-05-29\n8   369449                              Missing           2014-06-03\n9   f393b4                              Missing           2014-06-06\n10  1389ca                              Missing           2014-06-07\n11  2978ac                        Port Hospital           2014-06-08\n12  57a565                    Military Hospital           2014-06-15\n13  fc15ef                              Missing           2014-06-17\n14  2eaa9a                              Missing           2014-06-17\n15  bbfa93                                Other           2014-06-20\n16  c97dd9                        Port Hospital           2014-06-19\n17  f50e8a                        Port Hospital           2014-06-23\n18  3a7673                        Port Hospital           2014-06-24\n19  7f5a01                              Missing           2014-06-27\n20  ddddee                                Other           2014-06-28\n21  99e8fa                        Port Hospital           2014-06-29\n22  567136                        Port Hospital           2014-07-03\n23  9371a9 St. Mark's Maternity Hospital (SMMH)           2014-07-09\n24  bc2adf                              Missing           2014-07-09\n25  403057                                Other           2014-07-11\n26  8bd1e8                              Missing           2014-07-11\n27  f327be St. Mark's Maternity Hospital (SMMH)           2014-07-13\n28  42e1a9                    Military Hospital           2014-07-14\n29  90e5fe                        Port Hospital           2014-07-14\n30  959170                     Central Hospital           2014-07-13\n31  8ebf6e                    Military Hospital           2014-07-14\n32  e56412                     Central Hospital           2014-07-17\n33  6d788e                              Missing           2014-07-17\n34  a47529                    Military Hospital           2014-07-18\n35  67be4e                                Other           2014-07-19\n36  da8ecb                              Missing           2014-07-20\n37  148f18                              Missing           2014-07-20\n38  2cb9a5                        Port Hospital           2014-07-22\n39  f5c142                        Port Hospital           2014-07-24\n40  70a9fe                        Port Hospital           2014-07-26\n41  3ad520                              Missing           2014-07-24\n42  062638                     Central Hospital           2014-07-27\n43  c76676                    Military Hospital           2014-07-25\n44  baacc1                                Other           2014-07-27\n45  497372                                Other           2014-07-31\n46  23e499                                Other           2014-08-01\n47  38cc4a                              Missing           2014-08-03\n48  3789ee St. Mark's Maternity Hospital (SMMH)           2014-08-02\n49  c71dcd St. Mark's Maternity Hospital (SMMH)           2014-08-02\n50  6b70f0                              Missing           2014-08-04\n   new_var_dup new_var_static\n1       5fe599             12\n2       8689b7             12\n3       11f8ea             12\n4       b8812a             12\n5       893f25             12\n6       be99c8             12\n7       07e3e8             12\n8       369449             12\n9       f393b4             12\n10      1389ca             12\n11      2978ac             12\n12      57a565             12\n13      fc15ef             12\n14      2eaa9a             12\n15      bbfa93             12\n16      c97dd9             12\n17      f50e8a             12\n18      3a7673             12\n19      7f5a01             12\n20      ddddee             12\n21      99e8fa             12\n22      567136             12\n23      9371a9             12\n24      bc2adf             12\n25      403057             12\n26      8bd1e8             12\n27      f327be             12\n28      42e1a9             12\n29      90e5fe             12\n30      959170             12\n31      8ebf6e             12\n32      e56412             12\n33      6d788e             12\n34      a47529             12\n35      67be4e             12\n36      da8ecb             12\n37      148f18             12\n38      2cb9a5             12\n39      f5c142             12\n40      70a9fe             12\n41      3ad520             12\n42      062638             12\n43      c76676             12\n44      baacc1             12\n45      497372             12\n46      23e499             12\n47      38cc4a             12\n48      3789ee             12\n49      c71dcd             12\n50      6b70f0             12\n                                          new_var_paste\n1                                 Other on (2014-05-15)\n2                               Missing on (2014-05-14)\n3  St. Mark's Maternity Hospital (SMMH) on (2014-05-18)\n4                         Port Hospital on (2014-05-20)\n5                     Military Hospital on (2014-05-22)\n6                         Port Hospital on (2014-05-23)\n7                               Missing on (2014-05-29)\n8                               Missing on (2014-06-03)\n9                               Missing on (2014-06-06)\n10                              Missing on (2014-06-07)\n11                        Port Hospital on (2014-06-08)\n12                    Military Hospital on (2014-06-15)\n13                              Missing on (2014-06-17)\n14                              Missing on (2014-06-17)\n15                                Other on (2014-06-20)\n16                        Port Hospital on (2014-06-19)\n17                        Port Hospital on (2014-06-23)\n18                        Port Hospital on (2014-06-24)\n19                              Missing on (2014-06-27)\n20                                Other on (2014-06-28)\n21                        Port Hospital on (2014-06-29)\n22                        Port Hospital on (2014-07-03)\n23 St. Mark's Maternity Hospital (SMMH) on (2014-07-09)\n24                              Missing on (2014-07-09)\n25                                Other on (2014-07-11)\n26                              Missing on (2014-07-11)\n27 St. Mark's Maternity Hospital (SMMH) on (2014-07-13)\n28                    Military Hospital on (2014-07-14)\n29                        Port Hospital on (2014-07-14)\n30                     Central Hospital on (2014-07-13)\n31                    Military Hospital on (2014-07-14)\n32                     Central Hospital on (2014-07-17)\n33                              Missing on (2014-07-17)\n34                    Military Hospital on (2014-07-18)\n35                                Other on (2014-07-19)\n36                              Missing on (2014-07-20)\n37                              Missing on (2014-07-20)\n38                        Port Hospital on (2014-07-22)\n39                        Port Hospital on (2014-07-24)\n40                        Port Hospital on (2014-07-26)\n41                              Missing on (2014-07-24)\n42                     Central Hospital on (2014-07-27)\n43                    Military Hospital on (2014-07-25)\n44                                Other on (2014-07-27)\n45                                Other on (2014-07-31)\n46                                Other on (2014-08-01)\n47                              Missing on (2014-08-03)\n48 St. Mark's Maternity Hospital (SMMH) on (2014-08-02)\n49 St. Mark's Maternity Hospital (SMMH) on (2014-08-02)\n50                              Missing on (2014-08-04)\n\n\n\n\n\n\n\n\nTransmute\n\n\n\nA variation on mutate() is the function transmute(). This function adds a new column just like mutate(), but also drops/removes all other columns that you do not mention within its parentheses.\n\n\n\n\n\nColumns containing values that are dates, numbers, or logical values (TRUE/FALSE) will only behave as expected if they are correctly classified. There is a difference between “2” of class character and 2 of class numeric! There are ways to set column class during the import commands, but this is often cumbersome.\nFirst, let’s run some checks on important columns to see if they are the correct class. Currently, the class of the age column is character. To perform quantitative analyses, we need these numbers to be recognized as numeric!\n\nclass(linelist$age)\n\n[1] \"numeric\"\n\n\nTo resolve this, use the ability of mutate() to re-define a column with a transformation. We define the column as itself, but converted to a different class. Here is a basic example, converting or ensuring that the column age is class Numeric:\n\nlinelist &lt;- linelist %&gt;% \n  mutate(age = as.numeric(age))\n\nIn a similar way, you can use as.character() and as.logical(). To convert to class Factor, you can use factor().\n\n\n\n\nA typical cleaning step after you have cleaned the columns and re-coded values is to filter the data frame for specific rows using the dplyr verb filter().\nWithin filter(), specify the logic that must be TRUE for a row in the dataset to be kept. Below we show how to filter rows based on simple and complex logical conditions.\n\n\n\nThis simple example re-defines the dataframe linelist as itself, having filtered the rows to meet a logical condition. Only the rows where the logical statement within the parentheses evaluates to TRUE are kept.\nIn this example, the logical statement is gender == \"f\", which is asking whether the value in the column gender is equal to “f” (case sensitive).\nBefore the filter is applied, the number of rows in linelist is nrow(linelist).\n\nlinelist &lt;- linelist %&gt;% \n  filter(gender == \"f\")   # keep only rows where gender is equal to \"f\"\n\nAfter the filter is applied, the number of rows in linelist is linelist %&gt;% filter(gender == \"f\") %&gt;% nrow().\n\n\n\nMore complex logical statements can be constructed using parentheses ( ), OR |, negate !, %in%, and AND & operators. An example is below:\nNote: You can use the ! operator in front of a logical criteria to negate it. For example, !is.na(column) evaluates to true if the column value is not missing. Likewise !column %in% c(\"a\", \"b\", \"c\") evaluates to true if the column value is not in the vector.\n\n\nBelow is a simple one-line command to create a histogram of onset dates. See that a second smaller outbreak from 2012-2013 is also included in this raw dataset. For our analyses, we want to remove entries from this earlier outbreak.\n\nhist(linelist$date_onset, breaks = 50)\n\n\n\n\n\n\n\nCan we just filter by date_onset to rows after June 2013? Caution! Applying the code filter(date_onset &gt; as.Date(\"2013-06-01\"))) would remove any rows in the later epidemic with a missing date of onset!\n\n\n\n\n\n\nConditions with NA\n\n\n\nFiltering to greater than (&gt;) or less than (&lt;) a date or number can remove any rows with missing values (NA)! This is because NA is treated as infinitely large and small.\n\n\n\n\n\n\nFiltering can also be done as a stand-alone command (not part of a pipe chain). Like other dplyr verbs, in this case the first argument must be the dataset itself.\n\n# dataframe &lt;- filter(dataframe, condition(s) for rows to keep)\n\nlinelist &lt;- filter(linelist, !is.na(case_id))\n\nYou can also use base R to subset using square brackets which reflect the [rows, columns] that you want to retain.\n\n# dataframe &lt;- dataframe[row conditions, column conditions] (blank means keep all)\n\nlinelist &lt;- linelist[!is.na(case_id), ]\n\n\n\n\n\n\nUse the dplyr function arrange() to sort or order the rows by column values.\nSimple list the columns in the order they should be sorted on. Specify .by_group = TRUE if you want the sorting to to first occur by any groupings applied to the data.\nBy default, column will be sorted in “ascending” order (which applies to numeric and also to character columns). You can sort a variable in “descending” order by wrapping it with desc().\nSorting data with arrange() is particularly useful when making tables for publication, using slice() to take the “top” rows per group, or setting factor level order by order of appearance.\nFor example, to sort the our linelist rows by hospital, then by date_onset in descending order, we would use:\n\nlinelist %&gt;% \n   arrange(hospital, desc(date_onset))"
  },
  {
    "objectID": "readings/using-tables.html#data",
    "href": "readings/using-tables.html#data",
    "title": "Basic Data Operations",
    "section": "",
    "text": "We will continue to use the same linelist data we saw during Session 0. This is a fictional Ebola outbreak, expanded from the ebola_sim practice dataset in the outbreaks package.\n\nlinelist &lt;- import(\"linelist_cleaned.rds\")\n\nThe first 50 rows of linelist:\n\n\n   case_id generation date_infection date_onset date_hospitalisation\n1   5fe599          4     2014-05-08 2014-05-13           2014-05-15\n2   8689b7          4           &lt;NA&gt; 2014-05-13           2014-05-14\n3   11f8ea          2           &lt;NA&gt; 2014-05-16           2014-05-18\n4   b8812a          3     2014-05-04 2014-05-18           2014-05-20\n5   893f25          3     2014-05-18 2014-05-21           2014-05-22\n6   be99c8          3     2014-05-03 2014-05-22           2014-05-23\n7   07e3e8          4     2014-05-22 2014-05-27           2014-05-29\n8   369449          4     2014-05-28 2014-06-02           2014-06-03\n9   f393b4          4           &lt;NA&gt; 2014-06-05           2014-06-06\n10  1389ca          4           &lt;NA&gt; 2014-06-05           2014-06-07\n11  2978ac          4     2014-05-30 2014-06-06           2014-06-08\n12  57a565          4     2014-05-28 2014-06-13           2014-06-15\n13  fc15ef          6     2014-06-14 2014-06-16           2014-06-17\n14  2eaa9a          5     2014-06-07 2014-06-17           2014-06-17\n15  bbfa93          6     2014-06-09 2014-06-18           2014-06-20\n16  c97dd9          9           &lt;NA&gt; 2014-06-19           2014-06-19\n17  f50e8a         10           &lt;NA&gt; 2014-06-22           2014-06-23\n18  3a7673          8           &lt;NA&gt; 2014-06-23           2014-06-24\n19  7f5a01          7     2014-06-23 2014-06-25           2014-06-27\n20  ddddee          6     2014-06-18 2014-06-26           2014-06-28\n21  99e8fa          7     2014-06-24 2014-06-28           2014-06-29\n22  567136          6           &lt;NA&gt; 2014-07-02           2014-07-03\n23  9371a9          8           &lt;NA&gt; 2014-07-08           2014-07-09\n24  bc2adf          6     2014-07-03 2014-07-09           2014-07-09\n25  403057         10           &lt;NA&gt; 2014-07-09           2014-07-11\n26  8bd1e8          8     2014-07-10 2014-07-10           2014-07-11\n27  f327be          6     2014-06-14 2014-07-12           2014-07-13\n28  42e1a9         12           &lt;NA&gt; 2014-07-12           2014-07-14\n29  90e5fe          5     2014-06-18 2014-07-13           2014-07-14\n30  959170          8     2014-06-29 2014-07-13           2014-07-13\n31  8ebf6e          7     2014-07-02 2014-07-14           2014-07-14\n32  e56412          9     2014-07-12 2014-07-15           2014-07-17\n33  6d788e         11     2014-07-12 2014-07-16           2014-07-17\n34  a47529          5     2014-06-13 2014-07-17           2014-07-18\n35  67be4e          8     2014-07-15 2014-07-17           2014-07-19\n36  da8ecb          5     2014-06-20 2014-07-18           2014-07-20\n37  148f18          6           &lt;NA&gt; 2014-07-19           2014-07-20\n38  2cb9a5         11           &lt;NA&gt; 2014-07-22           2014-07-22\n39  f5c142          7     2014-07-20 2014-07-22           2014-07-24\n40  70a9fe          9           &lt;NA&gt; 2014-07-24           2014-07-26\n41  3ad520          7     2014-07-12 2014-07-24           2014-07-24\n42  062638          8     2014-07-19 2014-07-25           2014-07-27\n43  c76676          9     2014-07-18 2014-07-25           2014-07-25\n44  baacc1         12     2014-07-18 2014-07-27           2014-07-27\n45  497372         13     2014-07-27 2014-07-29           2014-07-31\n46  23e499          9           &lt;NA&gt; 2014-07-30           2014-08-01\n47  38cc4a          8     2014-07-19       &lt;NA&gt;           2014-08-03\n48  3789ee         10     2014-07-26 2014-08-01           2014-08-02\n49  c71dcd          8     2014-07-24 2014-08-02           2014-08-02\n50  6b70f0          7           &lt;NA&gt; 2014-08-03           2014-08-04\n   date_outcome outcome gender age age_unit age_years age_cat age_cat5\n1          &lt;NA&gt;    &lt;NA&gt;      m   2    years         2     0-4      0-4\n2    2014-05-18 Recover      f   3    years         3     0-4      0-4\n3    2014-05-30 Recover      m  56    years        56   50-69    55-59\n4          &lt;NA&gt;    &lt;NA&gt;      f  18    years        18   15-19    15-19\n5    2014-05-29 Recover      m   3    years         3     0-4      0-4\n6    2014-05-24 Recover      f  16    years        16   15-19    15-19\n7    2014-06-01 Recover      f  16    years        16   15-19    15-19\n8    2014-06-07   Death      f   0    years         0     0-4      0-4\n9    2014-06-18 Recover      m  61    years        61   50-69    60-64\n10   2014-06-09   Death      f  27    years        27   20-29    25-29\n11   2014-06-15   Death      m  12    years        12   10-14    10-14\n12         &lt;NA&gt;   Death      m  42    years        42   30-49    40-44\n13   2014-07-09 Recover      m  19    years        19   15-19    15-19\n14         &lt;NA&gt; Recover      f   7    years         7     5-9      5-9\n15   2014-06-30    &lt;NA&gt;      f   7    years         7     5-9      5-9\n16   2014-07-11 Recover      m  13    years        13   10-14    10-14\n17   2014-07-01    &lt;NA&gt;      f  35    years        35   30-49    35-39\n18   2014-06-25    &lt;NA&gt;      f  17    years        17   15-19    15-19\n19   2014-07-06   Death      f  11    years        11   10-14    10-14\n20   2014-07-02   Death      f  11    years        11   10-14    10-14\n21   2014-07-09 Recover      m  19    years        19   15-19    15-19\n22   2014-07-07    &lt;NA&gt;      m  54    years        54   50-69    50-54\n23   2014-07-20    &lt;NA&gt;      f  14    years        14   10-14    10-14\n24         &lt;NA&gt;    &lt;NA&gt;      m  28    years        28   20-29    25-29\n25   2014-07-22   Death      f   6    years         6     5-9      5-9\n26   2014-07-16    &lt;NA&gt;      m   3    years         3     0-4      0-4\n27   2014-07-14   Death      m  31    years        31   30-49    30-34\n28   2014-07-20   Death      f   6    years         6     5-9      5-9\n29   2014-07-16    &lt;NA&gt;      m  67    years        67   50-69    65-69\n30   2014-07-19   Death      f  14    years        14   10-14    10-14\n31   2014-07-27 Recover      f  10    years        10   10-14    10-14\n32   2014-07-19   Death      f  21    years        21   20-29    20-24\n33         &lt;NA&gt; Recover      m  20    years        20   20-29    20-24\n34   2014-07-26   Death      m  45    years        45   30-49    45-49\n35   2014-08-14 Recover      f   1    years         1     0-4      0-4\n36   2014-08-01    &lt;NA&gt;      m  12    years        12   10-14    10-14\n37   2014-07-23   Death      f   3    years         3     0-4      0-4\n38   2014-08-28 Recover      f  15    years        15   15-19    15-19\n39   2014-07-28 Recover      f  20    years        20   20-29    20-24\n40   2014-07-19   Death      m  36    years        36   30-49    35-39\n41         &lt;NA&gt;    &lt;NA&gt;      f   7    years         7     5-9      5-9\n42   2014-08-03    &lt;NA&gt;      m  13    years        13   10-14    10-14\n43         &lt;NA&gt;   Death      f  14    years        14   10-14    10-14\n44         &lt;NA&gt;   Death      m   3    years         3     0-4      0-4\n45         &lt;NA&gt;   Death      m  10    years        10   10-14    10-14\n46   2014-08-06   Death      f   1    years         1     0-4      0-4\n47   2014-08-21 Recover      m   0    years         0     0-4      0-4\n48   2014-09-13    &lt;NA&gt;      f  20    years        20   20-29    20-24\n49   2014-08-04   Death      m  26    years        26   20-29    25-29\n50         &lt;NA&gt;   Death      m  14    years        14   10-14    10-14\n                               hospital       lon      lat infector  source\n1                                 Other -13.21574 8.468973   f547d6   other\n2                               Missing -13.21523 8.451719     &lt;NA&gt;    &lt;NA&gt;\n3  St. Mark's Maternity Hospital (SMMH) -13.21291 8.464817     &lt;NA&gt;    &lt;NA&gt;\n4                         Port Hospital -13.23637 8.475476   f90f5f   other\n5                     Military Hospital -13.22286 8.460824   11f8ea   other\n6                         Port Hospital -13.22263 8.461831   aec8ec   other\n7                               Missing -13.23315 8.462729   893f25   other\n8                               Missing -13.23210 8.461444   133ee7   other\n9                               Missing -13.22255 8.461913     &lt;NA&gt;    &lt;NA&gt;\n10                              Missing -13.25722 8.472923     &lt;NA&gt;    &lt;NA&gt;\n11                        Port Hospital -13.22063 8.484016   996f3a   other\n12                    Military Hospital -13.25399 8.458371   133ee7   other\n13                              Missing -13.23851 8.477617   37a6f6   other\n14                              Missing -13.20939 8.475702   9f6884   other\n15                                Other -13.21573 8.477799   4802b1   other\n16                        Port Hospital -13.22434 8.471451     &lt;NA&gt;    &lt;NA&gt;\n17                        Port Hospital -13.23361 8.478048     &lt;NA&gt;    &lt;NA&gt;\n18                        Port Hospital -13.21422 8.485280     &lt;NA&gt;    &lt;NA&gt;\n19                              Missing -13.23397 8.469575   a75c7f   other\n20                                Other -13.25356 8.459574   8e104d   other\n21                        Port Hospital -13.22501 8.474049   ab634e   other\n22                        Port Hospital -13.21607 8.488029     &lt;NA&gt;    &lt;NA&gt;\n23 St. Mark's Maternity Hospital (SMMH) -13.26807 8.473437     &lt;NA&gt;    &lt;NA&gt;\n24                              Missing -13.22667 8.484083   b799eb   other\n25                                Other -13.21602 8.462422     &lt;NA&gt;    &lt;NA&gt;\n26                              Missing -13.24826 8.470268   5d9e4d   other\n27 St. Mark's Maternity Hospital (SMMH) -13.21563 8.463984   a15e13   other\n28                    Military Hospital -13.21424 8.464135     &lt;NA&gt;    &lt;NA&gt;\n29                        Port Hospital -13.26149 8.456231   ea3740   other\n30                     Central Hospital -13.24530 8.483346   beb26e funeral\n31                    Military Hospital -13.26306 8.474940   567136   other\n32                     Central Hospital -13.23433 8.478321   894024 funeral\n33                              Missing -13.21991 8.469393   36e2e7   other\n34                    Military Hospital -13.22273 8.484806   a2086d   other\n35                                Other -13.23431 8.471212   7baf73   other\n36                              Missing -13.21878 8.484384   eb2277 funeral\n37                              Missing -13.24837 8.484662     &lt;NA&gt;    &lt;NA&gt;\n38                        Port Hospital -13.20975 8.477142     &lt;NA&gt;    &lt;NA&gt;\n39                        Port Hospital -13.26809 8.462381   d6584f   other\n40                        Port Hospital -13.25875 8.455686     &lt;NA&gt;    &lt;NA&gt;\n41                              Missing -13.26264 8.463288   312ecf   other\n42                     Central Hospital -13.26972 8.479407   52ea64   other\n43                    Military Hospital -13.22090 8.463539   cfd79c   other\n44                                Other -13.23307 8.461790   d145b7   other\n45                                Other -13.26809 8.475087   174288   other\n46                                Other -13.25472 8.458258     &lt;NA&gt;    &lt;NA&gt;\n47                              Missing -13.25737 8.453257   53608c funeral\n48 St. Mark's Maternity Hospital (SMMH) -13.21374 8.473257   3b096b   other\n49 St. Mark's Maternity Hospital (SMMH) -13.21760 8.479116   f5c142   other\n50                              Missing -13.24864 8.484803     &lt;NA&gt;    &lt;NA&gt;\n   wt_kg ht_cm ct_blood fever chills cough aches vomit temp time_admission\n1     27    48       22    no     no   yes    no   yes 36.8           &lt;NA&gt;\n2     25    59       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          09:36\n3     91   238       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:48\n4     41   135       23    no     no    no    no    no 36.8          11:22\n5     36    71       23    no     no   yes    no   yes 36.9          12:60\n6     56   116       21    no     no   yes    no   yes 37.6          14:13\n7     47    87       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.3          14:33\n8      0    11       22    no     no   yes    no   yes 37.0          09:25\n9     86   226       22    no     no   yes    no   yes 36.4          11:16\n10    69   174       22    no     no   yes    no    no 35.9          10:55\n11    67   112       22    no     no   yes    no   yes 36.5          16:03\n12    84   186       22    no     no   yes    no    no 36.9          11:14\n13    68   174       22    no     no   yes    no    no 36.5          12:42\n14    44    90       21    no     no   yes    no    no 37.1          11:06\n15    34    91       23    no     no   yes    no   yes 36.5          09:10\n16    66   152       22    no     no   yes   yes    no 37.3          08:45\n17    78   214       23    no    yes   yes    no    no 37.0           &lt;NA&gt;\n18    47   137       21    no     no   yes    no    no 38.0          15:41\n19    53   117       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 38.0          13:34\n20    47   131       23    no     no   yes    no    no 36.0          18:58\n21    71   150       21    no     no   yes    no   yes 37.0          12:43\n22    86   241       23    no     no   yes    no    no 36.7          16:33\n23    53   131       21    no    yes   yes    no    no 36.9          14:29\n24    69   161       24    no     no   yes    no    no 36.5          07:18\n25    38    80       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.0          08:11\n26    46    69       22    no     no   yes    no    no 36.5          16:32\n27    68   188       24    no     no   yes    no    no 37.6          16:17\n28    37    66       23    no    yes   yes    no    no 36.6          07:32\n29   100   233       20  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.6          17:45\n30    56   142       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.2           &lt;NA&gt;\n31    50   110       24    no     no   yes    no    no 36.4          13:24\n32    57   182       20    no     no   yes    no   yes 37.1          14:43\n33    65   164       24  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.5          02:33\n34    72   214       21    no     no   yes    no   yes 37.5          11:36\n35    29    26       22    no     no   yes    no   yes 37.4          17:28\n36    69   157       21  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.9          16:27\n37    37    39       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.4           &lt;NA&gt;\n38    48   154       22    no     no   yes   yes   yes 37.3          20:49\n39    54   133       23    no     no   yes   yes   yes 37.0           &lt;NA&gt;\n40    71   168       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 37.8          11:38\n41    47   100       23    no     no   yes    no   yes 36.5          14:25\n42    61   125       22    no     no   yes    no   yes 37.5          13:42\n43    47   123       23  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.7          21:22\n44    35    67       22    no     no   yes    no   yes 37.0          13:33\n45    53   134       22    no    yes   yes    no   yes 37.3          19:06\n46    16    31       22    no     no   yes    no    no 36.6          17:14\n47    13    36       23    no     no   yes    no   yes 36.5          20:09\n48    59   125       22    no     no   yes    no   yes 36.6           &lt;NA&gt;\n49    69   183       22    no     no    no    no   yes 37.6          10:23\n50    67   169       22  &lt;NA&gt;   &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; 36.8          09:09\n         bmi days_onset_hosp\n1  117.18750               2\n2   71.81844               1\n3   16.06525               2\n4   22.49657               2\n5   71.41440               1\n6   41.61712               1\n7   62.09539               2\n8    0.00000               1\n9   16.83765               1\n10  22.79033               2\n11  53.41199               2\n12  24.28026               2\n13  22.46003               1\n14  54.32099               0\n15  41.05784               2\n16  28.56648               0\n17  17.03206               1\n18  25.04129               1\n19  38.71722               2\n20  27.38768               2\n21  31.55556               1\n22  14.80691               1\n23  30.88398               1\n24  26.61934               0\n25  59.37500               2\n26  96.61836               1\n27  19.23947               1\n28  84.94031               2\n29  18.41994               1\n30  27.77227               0\n31  41.32231               0\n32  17.20807               2\n33  24.16716               1\n34  15.72190               1\n35 428.99408               2\n36  27.99302               2\n37 243.26101               1\n38  20.23950               0\n39  30.52745               2\n40  25.15590               2\n41  47.00000               0\n42  39.04000               2\n43  31.06616               0\n44  77.96837               0\n45  29.51660               2\n46 166.49324               2\n47 100.30864              NA\n48  37.76000               1\n49  20.60378               0\n50  23.45856               1"
  },
  {
    "objectID": "readings/using-tables.html#select-or-re-order-columns",
    "href": "readings/using-tables.html#select-or-re-order-columns",
    "title": "Basic Data Operations",
    "section": "",
    "text": "Use select() from dplyr to select the columns you want to retain, and to specify their order in the data frame.\nHere are ALL the column names in the linelist at this point in the cleaning pipe chain:\n\nnames(linelist)\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_onset\"           \"date_hospitalisation\" \"date_outcome\"        \n [7] \"outcome\"              \"gender\"               \"age\"                 \n[10] \"age_unit\"             \"age_years\"            \"age_cat\"             \n[13] \"age_cat5\"             \"hospital\"             \"lon\"                 \n[16] \"lat\"                  \"infector\"             \"source\"              \n[19] \"wt_kg\"                \"ht_cm\"                \"ct_blood\"            \n[22] \"fever\"                \"chills\"               \"cough\"               \n[25] \"aches\"                \"vomit\"                \"temp\"                \n[28] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\n\n\nSelect only the columns you want to remain\nPut their names in the select() command, with no quotation marks. They will appear in the data frame in the order you provide. Note that if you include a column that does not exist, R will return an error (see use of any_of() below if you want no error in this situation).\n\n# linelist dataset is piped through select() command, and names() prints just the column names\nlinelist %&gt;% \n  select(case_id, date_onset, date_hospitalisation, fever) %&gt;% \n  names()  # display the column names\n\n[1] \"case_id\"              \"date_onset\"           \"date_hospitalisation\"\n[4] \"fever\"               \n\n\n\n\n\nIndicate which columns to remove by placing a minus symbol “-” in front of the column name (e.g. select(-outcome)), or a vector of column names (as below). All other columns will be retained.\n\nlinelist %&gt;% \n  select(-c(date_onset, fever:vomit)) %&gt;% # remove date_onset and all columns from fever to vomit\n  names()\n\n [1] \"case_id\"              \"generation\"           \"date_infection\"      \n [4] \"date_hospitalisation\" \"date_outcome\"         \"outcome\"             \n [7] \"gender\"               \"age\"                  \"age_unit\"            \n[10] \"age_years\"            \"age_cat\"              \"age_cat5\"            \n[13] \"hospital\"             \"lon\"                  \"lat\"                 \n[16] \"infector\"             \"source\"               \"wt_kg\"               \n[19] \"ht_cm\"                \"ct_blood\"             \"temp\"                \n[22] \"time_admission\"       \"bmi\"                  \"days_onset_hosp\"     \n\n\nYou can also remove a column using base R syntax, by defining it as NULL. For example:\n\nlinelist$date_onset &lt;- NULL   # deletes column with base R syntax \n\n\n\n\nselect() can also be used as an independent command (not in a pipe chain). In this case, the first argument is the original dataframe to be operated upon.\n\n# Create a new linelist with id and age-related columns\nlinelist_age &lt;- select(linelist, case_id, contains(\"age\"))\n\n# display the column names\nnames(linelist_age)\n\n[1] \"case_id\"   \"age\"       \"age_unit\"  \"age_years\" \"age_cat\"   \"age_cat5\""
  },
  {
    "objectID": "readings/using-tables.html#column-creation-and-transformation",
    "href": "readings/using-tables.html#column-creation-and-transformation",
    "title": "Basic Data Operations",
    "section": "",
    "text": "In addition to selecting columns, we can create new columns with mutate(). The syntax is: mutate(new_column_name = value or transformation). mutate() can also be used to modify an existing column.\n\n\nThe most basic mutate() command to create a new column might look like this. It creates a new column new_col where the value in every row is 10.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(new_col = 10)\n\nYou can also reference values in other columns, to perform calculations. Below, a new column bmi is created to hold the Body Mass Index (BMI) for each case - as calculated using the formula BMI = kg/m^2, using column ht_cm and column wt_kg.\n\nlinelist &lt;- linelist %&gt;% \n  mutate(bmi = wt_kg / (ht_cm/100)^2)\n\nIf creating multiple new columns, separate each with a comma and new line. Below are examples of new columns, including ones that consist of values from other columns combined using str_glue() from the stringr package.\n\nnew_col_demo &lt;- linelist %&gt;%                       \n  mutate(\n    new_var_dup    = case_id,             # new column = duplicate/copy another existing column\n    new_var_static = 7,                   # new column = all values the same\n    new_var_static = new_var_static + 5,  # you can overwrite a column, and it can be a calculation using other variables\n    new_var_paste  = stringr::str_glue(\"{hospital} on ({date_hospitalisation})\") # new column = pasting together values from other columns\n    ) %&gt;% \n  select(case_id, hospital, date_hospitalisation, contains(\"new\"))        # show only new columns, for demonstration purposes\n\nReview the new columns. For demonstration purposes, only the new columns and the columns used to create them are shown:\n\n\n   case_id                             hospital date_hospitalisation\n1   5fe599                                Other           2014-05-15\n2   8689b7                              Missing           2014-05-14\n3   11f8ea St. Mark's Maternity Hospital (SMMH)           2014-05-18\n4   b8812a                        Port Hospital           2014-05-20\n5   893f25                    Military Hospital           2014-05-22\n6   be99c8                        Port Hospital           2014-05-23\n7   07e3e8                              Missing           2014-05-29\n8   369449                              Missing           2014-06-03\n9   f393b4                              Missing           2014-06-06\n10  1389ca                              Missing           2014-06-07\n11  2978ac                        Port Hospital           2014-06-08\n12  57a565                    Military Hospital           2014-06-15\n13  fc15ef                              Missing           2014-06-17\n14  2eaa9a                              Missing           2014-06-17\n15  bbfa93                                Other           2014-06-20\n16  c97dd9                        Port Hospital           2014-06-19\n17  f50e8a                        Port Hospital           2014-06-23\n18  3a7673                        Port Hospital           2014-06-24\n19  7f5a01                              Missing           2014-06-27\n20  ddddee                                Other           2014-06-28\n21  99e8fa                        Port Hospital           2014-06-29\n22  567136                        Port Hospital           2014-07-03\n23  9371a9 St. Mark's Maternity Hospital (SMMH)           2014-07-09\n24  bc2adf                              Missing           2014-07-09\n25  403057                                Other           2014-07-11\n26  8bd1e8                              Missing           2014-07-11\n27  f327be St. Mark's Maternity Hospital (SMMH)           2014-07-13\n28  42e1a9                    Military Hospital           2014-07-14\n29  90e5fe                        Port Hospital           2014-07-14\n30  959170                     Central Hospital           2014-07-13\n31  8ebf6e                    Military Hospital           2014-07-14\n32  e56412                     Central Hospital           2014-07-17\n33  6d788e                              Missing           2014-07-17\n34  a47529                    Military Hospital           2014-07-18\n35  67be4e                                Other           2014-07-19\n36  da8ecb                              Missing           2014-07-20\n37  148f18                              Missing           2014-07-20\n38  2cb9a5                        Port Hospital           2014-07-22\n39  f5c142                        Port Hospital           2014-07-24\n40  70a9fe                        Port Hospital           2014-07-26\n41  3ad520                              Missing           2014-07-24\n42  062638                     Central Hospital           2014-07-27\n43  c76676                    Military Hospital           2014-07-25\n44  baacc1                                Other           2014-07-27\n45  497372                                Other           2014-07-31\n46  23e499                                Other           2014-08-01\n47  38cc4a                              Missing           2014-08-03\n48  3789ee St. Mark's Maternity Hospital (SMMH)           2014-08-02\n49  c71dcd St. Mark's Maternity Hospital (SMMH)           2014-08-02\n50  6b70f0                              Missing           2014-08-04\n   new_var_dup new_var_static\n1       5fe599             12\n2       8689b7             12\n3       11f8ea             12\n4       b8812a             12\n5       893f25             12\n6       be99c8             12\n7       07e3e8             12\n8       369449             12\n9       f393b4             12\n10      1389ca             12\n11      2978ac             12\n12      57a565             12\n13      fc15ef             12\n14      2eaa9a             12\n15      bbfa93             12\n16      c97dd9             12\n17      f50e8a             12\n18      3a7673             12\n19      7f5a01             12\n20      ddddee             12\n21      99e8fa             12\n22      567136             12\n23      9371a9             12\n24      bc2adf             12\n25      403057             12\n26      8bd1e8             12\n27      f327be             12\n28      42e1a9             12\n29      90e5fe             12\n30      959170             12\n31      8ebf6e             12\n32      e56412             12\n33      6d788e             12\n34      a47529             12\n35      67be4e             12\n36      da8ecb             12\n37      148f18             12\n38      2cb9a5             12\n39      f5c142             12\n40      70a9fe             12\n41      3ad520             12\n42      062638             12\n43      c76676             12\n44      baacc1             12\n45      497372             12\n46      23e499             12\n47      38cc4a             12\n48      3789ee             12\n49      c71dcd             12\n50      6b70f0             12\n                                          new_var_paste\n1                                 Other on (2014-05-15)\n2                               Missing on (2014-05-14)\n3  St. Mark's Maternity Hospital (SMMH) on (2014-05-18)\n4                         Port Hospital on (2014-05-20)\n5                     Military Hospital on (2014-05-22)\n6                         Port Hospital on (2014-05-23)\n7                               Missing on (2014-05-29)\n8                               Missing on (2014-06-03)\n9                               Missing on (2014-06-06)\n10                              Missing on (2014-06-07)\n11                        Port Hospital on (2014-06-08)\n12                    Military Hospital on (2014-06-15)\n13                              Missing on (2014-06-17)\n14                              Missing on (2014-06-17)\n15                                Other on (2014-06-20)\n16                        Port Hospital on (2014-06-19)\n17                        Port Hospital on (2014-06-23)\n18                        Port Hospital on (2014-06-24)\n19                              Missing on (2014-06-27)\n20                                Other on (2014-06-28)\n21                        Port Hospital on (2014-06-29)\n22                        Port Hospital on (2014-07-03)\n23 St. Mark's Maternity Hospital (SMMH) on (2014-07-09)\n24                              Missing on (2014-07-09)\n25                                Other on (2014-07-11)\n26                              Missing on (2014-07-11)\n27 St. Mark's Maternity Hospital (SMMH) on (2014-07-13)\n28                    Military Hospital on (2014-07-14)\n29                        Port Hospital on (2014-07-14)\n30                     Central Hospital on (2014-07-13)\n31                    Military Hospital on (2014-07-14)\n32                     Central Hospital on (2014-07-17)\n33                              Missing on (2014-07-17)\n34                    Military Hospital on (2014-07-18)\n35                                Other on (2014-07-19)\n36                              Missing on (2014-07-20)\n37                              Missing on (2014-07-20)\n38                        Port Hospital on (2014-07-22)\n39                        Port Hospital on (2014-07-24)\n40                        Port Hospital on (2014-07-26)\n41                              Missing on (2014-07-24)\n42                     Central Hospital on (2014-07-27)\n43                    Military Hospital on (2014-07-25)\n44                                Other on (2014-07-27)\n45                                Other on (2014-07-31)\n46                                Other on (2014-08-01)\n47                              Missing on (2014-08-03)\n48 St. Mark's Maternity Hospital (SMMH) on (2014-08-02)\n49 St. Mark's Maternity Hospital (SMMH) on (2014-08-02)\n50                              Missing on (2014-08-04)\n\n\n\n\n\n\n\n\nTransmute\n\n\n\nA variation on mutate() is the function transmute(). This function adds a new column just like mutate(), but also drops/removes all other columns that you do not mention within its parentheses.\n\n\n\n\n\nColumns containing values that are dates, numbers, or logical values (TRUE/FALSE) will only behave as expected if they are correctly classified. There is a difference between “2” of class character and 2 of class numeric! There are ways to set column class during the import commands, but this is often cumbersome.\nFirst, let’s run some checks on important columns to see if they are the correct class. Currently, the class of the age column is character. To perform quantitative analyses, we need these numbers to be recognized as numeric!\n\nclass(linelist$age)\n\n[1] \"numeric\"\n\n\nTo resolve this, use the ability of mutate() to re-define a column with a transformation. We define the column as itself, but converted to a different class. Here is a basic example, converting or ensuring that the column age is class Numeric:\n\nlinelist &lt;- linelist %&gt;% \n  mutate(age = as.numeric(age))\n\nIn a similar way, you can use as.character() and as.logical(). To convert to class Factor, you can use factor()."
  },
  {
    "objectID": "readings/using-tables.html#filter-rows",
    "href": "readings/using-tables.html#filter-rows",
    "title": "Basic Data Operations",
    "section": "",
    "text": "A typical cleaning step after you have cleaned the columns and re-coded values is to filter the data frame for specific rows using the dplyr verb filter().\nWithin filter(), specify the logic that must be TRUE for a row in the dataset to be kept. Below we show how to filter rows based on simple and complex logical conditions.\n\n\n\nThis simple example re-defines the dataframe linelist as itself, having filtered the rows to meet a logical condition. Only the rows where the logical statement within the parentheses evaluates to TRUE are kept.\nIn this example, the logical statement is gender == \"f\", which is asking whether the value in the column gender is equal to “f” (case sensitive).\nBefore the filter is applied, the number of rows in linelist is nrow(linelist).\n\nlinelist &lt;- linelist %&gt;% \n  filter(gender == \"f\")   # keep only rows where gender is equal to \"f\"\n\nAfter the filter is applied, the number of rows in linelist is linelist %&gt;% filter(gender == \"f\") %&gt;% nrow().\n\n\n\nMore complex logical statements can be constructed using parentheses ( ), OR |, negate !, %in%, and AND & operators. An example is below:\nNote: You can use the ! operator in front of a logical criteria to negate it. For example, !is.na(column) evaluates to true if the column value is not missing. Likewise !column %in% c(\"a\", \"b\", \"c\") evaluates to true if the column value is not in the vector.\n\n\nBelow is a simple one-line command to create a histogram of onset dates. See that a second smaller outbreak from 2012-2013 is also included in this raw dataset. For our analyses, we want to remove entries from this earlier outbreak.\n\nhist(linelist$date_onset, breaks = 50)\n\n\n\n\n\n\n\nCan we just filter by date_onset to rows after June 2013? Caution! Applying the code filter(date_onset &gt; as.Date(\"2013-06-01\"))) would remove any rows in the later epidemic with a missing date of onset!\n\n\n\n\n\n\nConditions with NA\n\n\n\nFiltering to greater than (&gt;) or less than (&lt;) a date or number can remove any rows with missing values (NA)! This is because NA is treated as infinitely large and small.\n\n\n\n\n\n\nFiltering can also be done as a stand-alone command (not part of a pipe chain). Like other dplyr verbs, in this case the first argument must be the dataset itself.\n\n# dataframe &lt;- filter(dataframe, condition(s) for rows to keep)\n\nlinelist &lt;- filter(linelist, !is.na(case_id))\n\nYou can also use base R to subset using square brackets which reflect the [rows, columns] that you want to retain.\n\n# dataframe &lt;- dataframe[row conditions, column conditions] (blank means keep all)\n\nlinelist &lt;- linelist[!is.na(case_id), ]"
  },
  {
    "objectID": "readings/using-tables.html#arrange-and-sort",
    "href": "readings/using-tables.html#arrange-and-sort",
    "title": "Basic Data Operations",
    "section": "",
    "text": "Use the dplyr function arrange() to sort or order the rows by column values.\nSimple list the columns in the order they should be sorted on. Specify .by_group = TRUE if you want the sorting to to first occur by any groupings applied to the data.\nBy default, column will be sorted in “ascending” order (which applies to numeric and also to character columns). You can sort a variable in “descending” order by wrapping it with desc().\nSorting data with arrange() is particularly useful when making tables for publication, using slice() to take the “top” rows per group, or setting factor level order by order of appearance.\nFor example, to sort the our linelist rows by hospital, then by date_onset in descending order, we would use:\n\nlinelist %&gt;% \n   arrange(hospital, desc(date_onset))"
  },
  {
    "objectID": "session-materials/session3/session3.html#filter-relevant-population",
    "href": "session-materials/session3/session3.html#filter-relevant-population",
    "title": "Session 3 Notebook",
    "section": "Filter relevant population",
    "text": "Filter relevant population\nNext we need to filter the summary population. Luckily, the paper provides total numbers of participants for most of the filtering steps performed. This makes it much easier for us to check our work.\n\nThe total number of individuals who participated in the NHANES from 2005 to 2010 were 31,034 study-participants. Among them, 3,660 were nonedentulous adolescents (aged 13 to 18 years old at the time of screening) who had exam survey weights assigned. From those 3,660 adolescents, data to measure the main outcome variable (dental caries experience) were available for a final sample of 3,346 adolescents, representing the population of 24,386,135 U.S. adolescents after applying the NHANES sample weights, which was described and analyzed in this study.\n\nWe can start by filtering on age. However, RIDAGEYR is currently not a numeric column. If we try converting RIDAGEYR to be numeric using as.numeric, we get a warning:\n\nall_ado &lt;- tib_all %&gt;%\n  mutate(RIDAGEYR = as.numeric(RIDAGEYR)) # Convert age to be numeric\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `RIDAGEYR = as.numeric(RIDAGEYR)`.\nCaused by warning:\n! NAs introduced by coercion\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nWhat is causing this warning? Do we need to resolve it? Hint If we are getting NA when converting to numeric, then there must be some column entries which R cannot convert to be numbers.\nOnce you’ve decided how to deal with the warning, filter tib_all to only include the desired population as described in the paper. Check how many rows you have at each step to double-check your work.\n\n\nall_ado &lt;- tib_all %&gt;%\n  filter(RIDAGEYR &gt;= 13 & RIDAGEYR &lt;= 18) %&gt;% # Gets the 3660 nonedentulous adolescents\n  filter(!is.na(OHXDECAY)) # Gets the 3346 with non-NA dental carie variable"
  },
  {
    "objectID": "session-materials/session3/session3.html#final-data-cleanup",
    "href": "session-materials/session3/session3.html#final-data-cleanup",
    "title": "Session 3 Notebook",
    "section": "Final data cleanup",
    "text": "Final data cleanup\nWe can choose to leave the variables with their NHANES column names or change them to be a bit more human-readable. Either way, we also want to convert each variable to it’s appropriate type.\n\n# Set columns to have appropriate types\nconverted_tib &lt;- mutate(all_ado,\n                   sequence.id = SEQN,\n                   age.years = RIDAGEYR,\n                   gender = as.factor(RIAGENDR),\n                   ethnicity = as.factor(RIDRETH1),\n                   birthplace = as.factor(DMDBORN),\n                   family.PIR = INDFMPIR,\n                   dental.decay.present = (OHXDECAY == \"Yes\"),\n                   dental.restoration.present = (OHXREST == \"Yes\"),\n                   plasma.glucose = as.numeric(LBXGLU),\n                   hba1c = as.numeric(LBXGH),\n                   bmi = as.numeric(BMXBMI), \n                   .keep = \"unused\") #keep none of the old columns we converted\n\n\n\n\n\n\n\nExercise\n\n\n\nAdd a diabetes column to the dataset based on the guidelines from Beheshti et. al:\n\nIndividuals with an HbA1C of at least 6.5 percent or a plasma-fasting glucose value of at least 126 mg/dl were considered diabetics; prediabetics were those whose HbA1C ranged from 5.7 percent to 6.4 percent and whose fasting plasma glucose remained within 100 to 125 mg/dl; the remaining study participants, who had less than 5.7 percent HbA1C and less than 100 mg/dl fasting plasma glucose, were classified as nondiabetics.\n\nIt is reccomended to use case_when, but feel free to use any method you want.\n\n# Add diabetes column\nconverted_tib &lt;- converted_tib %&gt;% \n  mutate(diabetes = case_when(\n    hba1c &gt;= 6.5 | plasma.glucose &gt;= 126 ~ \"diabetic\",\n    hba1c &gt;= 5.7 | plasma.glucose &gt;= 100 ~ \"prediabetic\",\n    .default = \"nondiabetic\"\n  ))"
  }
]