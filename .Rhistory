group_by(age.cat) %>%
summarise(n = n())
nhanes %>%
count(RIDAGEYR, RIAGENDR)
#1
nhanes %>% filter(!is.na(LBXGLU)) %>%
group_by(age.years) %>%
count()
#1
nhanes %>% filter(!is.na(LBXGLU)) %>%
group_by(RIDAGEYR) %>%
count()
#2
nhanes %>% group_by(RIDRETH1) %>%
summarise(mean_BMI = mean(BMXBMI, na.rm = TRUE)) %>%
arrange(desc(mean_BMI))
nhanes |>
group_by(dental.caries, DMDBORN) |>
summarize(n = n())
nhanes |>
group_by(DMDBORN) |> # Group by birthplace
summarize(n = n(), caries = sum(dental.caries)) |>
mutate(perc_caries = caries/n)
tib_all |>
filter(diabetes == "diabetic") |>
group_by(birthplace, family.PIR.cat) |>
summarize(n = n(), insulin = sum((DIQ050) == "Yes")) |>
mutate(perc_insulin = insulin/n)
nhanes |>
filter(diabetes == "diabetic") |>
group_by(DMDBORN, family.PIR.cat) |>
summarize(n = n(), insulin = sum((DIQ050) == "Yes")) |>
mutate(perc_insulin = insulin/n)
nhanes %>%
group_by(birthplace) %>%
summarise(mean_bmi = mean(BMXBMI, na.rm = TRUE))
nhanes %>%
group_by(BMXBMI, RIDRETH1) %>%
summarise(mean_bmi = mean(BMXBMI, na.rm = TRUE))
nhanes %>%
group_by(RIDAGEYR, age.cat, RIDRETH1) %>%
summarise(mean_plasma_glucose = mean(LBXGLU, na.rm = TRUE),
median_plasma_glucose = median(LBXGLU, na.rm = TRUE))
nhanes %>%
filter(birthplace == 'Born in 50 US States or Washi') %>%
group_by(age.cat) %>%
summarise(mean_hba1c = mean(LBXGH, na.rm = TRUE))
nhanes %>%
filter(birthplace == 'Within the US') %>%
group_by(age.cat) %>%
summarise(mean_hba1c = mean(LBXGH, na.rm = TRUE))
nhanes %>%
count(RIDAGEYR)
nhanes %>%
group_by(age.cat) %>%
summarise(n = n())
nhanes %>%
count(RIDAGEYR, RIAGENDR)
#1
nhanes %>% filter(!is.na(LBXGLU)) %>%
group_by(RIDAGEYR) %>%
count()
#2
nhanes %>% group_by(RIDRETH1) %>%
summarise(mean_BMI = mean(BMXBMI, na.rm = TRUE)) %>%
arrange(desc(mean_BMI))
nhanes |>
group_by(dental.caries, birthplace) |>
summarize(n = n())
nhanes |>
group_by(birthplace) |> # Group by birthplace
summarize(n = n(), caries = sum(dental.caries)) |>
mutate(perc_caries = caries/n)
nhanes |>
filter(diabetes == "diabetic") |>
group_by(birthplace, family.PIR.cat) |>
summarize(n = n(), insulin = sum((DIQ050) == "Yes")) |>
mutate(perc_insulin = insulin/n)
insulin_tbl <- nhanes |>
filter(diabetes == "diabetic") |>
group_by(RIDRETH1, birthplace) |>
summarize(n = n(), insulin = sum((DIQ050) == "Yes")) |>
mutate(perc_insulin = insulin/n)
ggplot(insulin_tbl, aes(x = birthplace, y = perc_insulin)) +
geom_bar(stat = "identity") +
facet_grid(~RIDRETH1)
insulin_tbl <- nhanes |>
filter(diabetes == "diabetic") |>
group_by(RIDRETH1, birthplace) |>
summarize(n = n(), insulin = sum((DIQ050) == "Yes")) |>
mutate(perc_insulin = insulin/n)
insulin_tbl <- nhanes |>
filter(diabetes == "diabetic") |>
group_by(RIDRETH1, birthplace) |>
summarize(n = n(), insulin = sum((DIQ050) == "Yes"), na.rm=TRUE) |>
mutate(perc_insulin = insulin/n)
ggplot(insulin_tbl, aes(x = birthplace, y = perc_insulin)) +
geom_bar(stat = "identity") +
facet_grid(~RIDRETH1)
#| echo: true
infdeath = read.table( "infdeath.txt", head=TRUE, sep="\t")
dim(infdeath)
colnames(infdeath)
plot(infdeath$breast, infdeath$death, xlab="% Breast Feeding",
ylab="Infant Death Rate", pty="s", pch=19, cex.axis=1.5,
cex.lab=1.5)
plot(infdeath$safe, infdeath$breast, ylab="% Breast Feeding",
xlab="% Access to safe water", pty="s", pch=19, cex.axis=1.5,
cex.lab=1.5)
plot(infdeath$breast, infdeath$death, xlab="% Breast Feeding",
ylab="Infant Death Rate", pty="s", pch=19, cex.axis=1.5,
cex.lab=1.5, xlim=c(0, 100), ylim=c(-30,150))
lm1 = lm(infdeath$death~infdeath$breast)
abline(lm1, col="blue")
lm1
summary(lm1)
#| echo: true
set.seed(123)
# Generate some x values
x = runif(20, min=20, max=70)
# Set our regression
y = 5 + .2 *x
# Add in some random error
yobs = y + rnorm(20, sd=1.5)
# Create a linear model
lm2 = lm(yobs~x)
summary(lm2)
#| echo: true
# First, create empty vectors with the number of simulations we want to run.
NITER=1000
b0vec = rep(NA, NITER)
b1vec = rep(NA, NITER)
# Create NITER different simulated datasets and linear models using a for loop, storing the results into the vectors we created.
for( i in 1:NITER) {
ei = rnorm(20, sd=1.5)
yoi = y + ei
lmi = lm(yoi ~ x)
b0vec[i] = lmi$coefficients[1]
b1vec[i] = lmi$coefficients[2]
}
#| echo: true
# First, create empty vectors with the number of simulations we want to run.
NITER=1000
b0vec = rep(NA, NITER)
b1vec = rep(NA, NITER)
# Create NITER different simulated datasets and linear models using a for loop, storing the results into the vectors we created.
for( i in 1:NITER) {
ei = rnorm(20, sd=1.5)
yoi = y + ei
lmi = lm(yoi ~ x)
b0vec[i] = lmi$coefficients[1]
b1vec[i] = lmi$coefficients[2]
}
#| echo: false
par(mfrow=c(1,2))
hist(b0vec)
hist(b1vec)
# Intercept
round(mean(b0vec), digits=3)
round(sqrt(var(b0vec)), digits=3)
# Slope
round(mean(b1vec), digits=3)
round(sqrt(var(b1vec)), digits=3)
summary(lm2)
library(datasets)
datasets::anscombe
long_ans <- anscombe |>
pivot_longer(
everything(),
cols_vary = "slowest",
names_to = c(".value", "set"),
names_pattern = "(.)(.)"
)
ggplot(long_ans,aes(x=x,y=y,group=set))+geom_point()+facet_wrap(~set)
par(mfrow=c(1,2))
plot(lm1$fitted.values, lm1$residuals, xlab="Fitted Values", ylab="Residuals")
abline(h=0)
plot(lm1$model$`infdeath$breast`, lm1$residuals, xlab="Proportion of Mothers Breastfeeding at 6mo", ylab="Residuals")
abline(h=0)
a = 1.5
b = 0.3
x = runif(100, 1,11)
eps = rnorm(100, 2)
m1v = a*exp(b*x) + eps
m2v = log(a) + b*x + eps
par(mfrow=c(1,3))
plot(x,m1v, pch=19, xlab="x", ylab="y-hat", main="M1")
plot(x, log(m1v), pch=19, xlab="x", ylab = "log(y-hat)", main="M1 transformed")
plot(x,m2v, pch=19, xlab="x", ylab ="log(y)-hat", main="M2")
lm1 = lm(death~breast, data=infdeath)
summary(lm1)
predict(lm1, newdata=list(breast=62), interval="confidence")
predict(lm1, newdata=list(breast=62), interval="prediction")
heights = runif(40, min=60, max=75)
sex = sample(c("M","F"), 40, replace=TRUE)
lm1 = lm(heights ~ sex)
summary(lm1)
lm2 = lm(heights ~ sex - 1)
summary(lm2)
heights = runif(40, min=60, max=75)
sex = sample(c("M","F"), 40, replace=TRUE)
lm1 = lm(heights ~ sex)
summary(lm1)
knitr::opts_chunk$set(echo = TRUE)
library("splines")
library("DT")
nhanesDataPath = ""
load("d4.rda")
load("metaD.rda")
DT::datatable(metaD)
plot(d4$RIDAGEYR, d4$LBXTC, xlab="Age in Years", ylab="Total Cholesterol, mg/dL")
smoothScatter(d4$RIDAGEYR, d4$LBXTC, xlab="Age in Years", ylab="Total Cholesterol, mg/dL")
lm1 = lm(d4$LBXTC ~ d4$RIDAGEYR)
summary(lm1)
plot(lm1$fitted.values, lm1$residuals)
##fit a loess curve
l2 = loess(lm1$residuals ~ lm1$fitted.values)
pl = predict(l2, newdata=sort(lm1$fitted.values))
lines(x=sort(lm1$fitted.values), y=pl, col="blue", lwd=2)
abline(h=0, col="red")
library("splines")
lm2 = lm(d4$LBXTC ~ ns(d4$RIDAGEYR, df=7))
summary(lm2)
library("splines")
lm2 = lm(d4$LBXTC ~ ns(d4$RIDAGEYR, df=7))
summary(lm2)
anova(lm1, lm2)
lm3 = lm(LBXTC ~ RIAGENDR-1, data=d4)
summary(lm3)
lm3 = lm(LBXTC ~ RIAGENDR, data=d4)
summary(lm3)
ivars = c("RIDAGEYR", "RIAGENDR", "RIDRETH1", "DMDEDUC2", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
d4sub = d4[,ivars]
compCases = apply(d4sub, 1, function(x) sum(is.na(x)))
cC = compCases==0
d4sub = d4sub[cC,]
dim(d4sub)
table(d4sub$DMDEDUC2)
dd = d4sub$DMDEDUC2
dd[dd=="Don't Know"] = NA
eduS = ifelse(dd == "Less than 9th grade" | dd =="9-11th grade (Includes 12th grade with no diploma)", "<HS", ifelse(dd == "High school graduate/GED or equivalent", "HS", ">HS" ))
#stick this into our dataframe
#and drop the NA
d4sub$eduS = eduS
d4sub = d4sub[-which(is.na(eduS)), ]
table(eduS, dd, useNA = "always")
cvars = c("RIDAGEYR", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
contd4sub=d4sub[, cvars]
pcs = prcomp(contd4sub)
##based on pc plot we have at least 3 outliers that are dominating the first 2 pcs
contd4sub = contd4sub[-c(1077, 2876, 2933),]
d4sub = d4sub[-c(1077, 2876, 2933),]
pcs = prcomp(contd4sub)
pcvals=pcs$x
##which(abs(pcs$x[,1]) > 300)
##which(abs(pcs$x[,2]) > 100)
knitr::opts_chunk$set(echo = TRUE)
library("splines")
library("DT")
library("ggfortify")
install.packages("ggfortify")
knitr::opts_chunk$set(echo = TRUE)
library("splines")
library("DT")
library("ggfortify")
knitr::opts_chunk$set(echo = TRUE)
library("splines")
library("DT")
library("ggfortify")
cvars = c("RIDAGEYR", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
contd4sub=d4sub[, cvars]
pcs = prcomp(contd4sub)
autoplot(pca_res)
cvars = c("RIDAGEYR", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
contd4sub=d4sub[, cvars]
pcs = prcomp(contd4sub)
autoplot(pcs)
##based on pc plot we have at least 3 outliers that are dominating the first 2 pcs
contd4sub = contd4sub[-c(1077, 2876, 2933),]
d4sub = d4sub[-c(1077, 2876, 2933),]
pcs = prcomp(contd4sub)
pcvals=pcs$x
##which(abs(pcs$x[,1]) > 300)
##which(abs(pcs$x[,2]) > 100)
# Get only the continuous variables
cvars = c("RIDAGEYR", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
contd4sub=d4sub[, cvars]
pcs = prcomp(contd4sub)
autoplot(pcs)
# Based on pc plot we have at least 3 outliers that are dominating the first 2 pcs
contd4sub = contd4sub[-c(1077, 2876, 2933),]
d4sub = d4sub[-c(1077, 2876, 2933),]
pcs = prcomp(contd4sub)
autoplot(pcs)
pcvals=pcs$x
##which(abs(pcs$x[,1]) > 300)
##which(abs(pcs$x[,2]) > 100)
# Get only the continuous variables
cvars = c("RIDAGEYR", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
contd4sub=d4sub[, cvars]
pcs = prcomp(contd4sub)
autoplot(pcs)
# Based on pc plot we have at least 3 outliers that are dominating the first 2 pcs
contd4sub = contd4sub[-c(1077, 2876, 2933),]
d4sub = d4sub[-c(1077, 2876, 2933),]
pcs = prcomp(contd4sub)
autoplot(pcs)
pcvals=pcs$x
##which(abs(pcs$x[,1]) > 300)
##which(abs(pcs$x[,2]) > 100)
# Get only the continuous variables
cvars = c("RIDAGEYR", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
contd4sub=d4sub[, cvars]
pcs = prcomp(contd4sub)
autoplot(pcs)
pcvals=pcs$x
which(abs(pcs$x[,1]) > 300)
which(abs(pcs$x[,2]) > 100)
knitr::opts_chunk$set(echo = TRUE)
library("splines")
library("DT")
lm3 = lm(LBXTC ~ RIAGENDR-1, data=d4)
summary(lm3)
lm3 = lm(LBXTC ~ RIAGENDR, data=d4)
summary(lm3)
ivars = c("RIDAGEYR", "RIAGENDR", "RIDRETH1", "DMDEDUC2", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
d4sub = d4[,ivars]
compCases = apply(d4sub, 1, function(x) sum(is.na(x)))
cC = compCases==0
d4sub = d4sub[cC,]
dim(d4sub)
table(d4sub$DMDEDUC2)
dd = d4sub$DMDEDUC2
dd[dd=="Don't Know"] = NA
eduS = ifelse(dd == "Less than 9th grade" | dd =="9-11th grade (Includes 12th grade with no diploma)", "<HS", ifelse(dd == "High school graduate/GED or equivalent", "HS", ">HS" ))
#stick this into our dataframe
#and drop the NA
d4sub$eduS = eduS
d4sub = d4sub[-which(is.na(eduS)), ]
table(eduS, dd, useNA = "always")
lmF = lm(LBXTC ~ ., data=d4sub)
summary(lmF)
Black = ifelse(d4sub$RIDRETH1 == "Non-Hispanic Black", "B", "nonB")
ivars = c("RIDAGEYR", "INDFMPIR", "LBDHDD", "LBXGH", "BMXBMI", "LBXTC")
d5sub = cbind(d4sub[,ivars], Black)
lmFx = lm(LBXTC ~ . , data=d5sub)
summary(lmFx)
anova(lmFx, lmF)
Age80 = d5sub$RIDAGEYR == 80
d6sub=cbind(d5sub, Age80)
lmFx2  = lm(LBXTC ~ . + Age80 , data=d6sub)
summary(lmFx2)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
#| echo: false
#| message: false
library(tidyverse)
library(reactable)
library(reactablefmtr)
# Load schedule
sched <- read_csv("schedule.csv")
reactable(select(sched, `Module`,  `Class Session Date`), theme = flatly(), sortable = FALSE)
reactable(select(sched, `Module`,  `Class Session Date`), theme = flatly(), sortable = FALSE)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
library(tidyverse)
?arrange
?sort
vec1 <- c("4", T, F, F)
vec2 <- c(9, "banana", 16, "apple")
vec3 <- c(TRUE + TRUE, TRUE, FALSE, TRUE)
vec4 <- c(3**2, 19%%2)
vec1
summart(vec1)
summary(vec1)
vec2
vec3
vec4
rep(vec1, 2)
?rep
library(tidyverse)
nhanes <- read.csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
plasma_mean <- mean(select(nhanes, plasma.glucose),  na.rm = TRUE)
select(nhanes, plasma.glucose)
plasma_mean <- mean(select(nhanes, plasma.glucose),  na.rm = TRUE)
library(tidyverse)
nhanes <- read.csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
nhanes_mean_filled <- nhanes |>
mutate(plasma.glucose = is.na(plasma.glucose) <- plasma_mean)
View(nhanes_mean_filled)
nhanes_mean_filled$plasma.glucose
is.na(nhanes_mean_filled$plasma.glucose) <- plasma_mean
nhanes_mean_filled$plasma.glucose
nhanes$plasma.glucose
nhanes_mean_filled$plasma.glucose
nhanes_mean_filled <- nhanes
nhanes_mean_filled$plasma.glucose[is.na(nhanes_mean_filled$plasma.glucose)] <- plasma_mean
nhanes_mean_filled$plasma.glucose
library(tidyverse)
nhanes <- read_csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
?arrange
nhanes_sorted <- nhanes |>
arrange(bmi)
nhanes_sorted4bmi
nhanes_sorted$bmi
nhanes_sorted <- nhanes_sorted |>
mutate(bmi_rank = seq(1:nrow(nhanes_sorted)))
nhanes_sorted$bmi_rank
nhanes_sorted <- nhanes_sorted |>
mutate(bmi_rank = seq(bmi)
)
nhanes_sorted$bmi_rank
?seq
seq(vec1)
seq(1, 4)
nhanes <- read.csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
## PART 1, A##
? arrange
## ANSWER: orders the rows of a data frame by the values of selected columns.
## PART1, b##
##ANSWER:
##1.always sorted to the end for local data, even when wrapped with desc()##
##2.treated differently for remote data, depending on the backend##
## PART 2##
nhanes %>% arrange(bmi)
##Part 3##
seq(along.with=nhanes$bmi)
seq(along.with=nhanes$bmi)
quarto::quarto_render(output_format = "all")
library(tidyverse)
nhanes <- read.csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
library(tidyverse)
nhanes <- read.csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
# Solution from part a
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
# The base R way:
nhanes_mean_filled <- nhanes
nhanes_mean_filled$plasma.glucose[is.na(nhanes_mean_filled$plasma.glucose)] <- plasma_mean
# The Tidyverse way
nhanes_mean_filled <- nhanes |>
mutate(plasma.glucose = replace_na(plasma.glucose, plasma_mean))
library(tidyverse)
nhanes <- read.csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
# Solution from part a
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
# The base R way:
nhanes_mean_filled <- nhanes
nhanes_mean_filled$plasma.glucose[is.na(nhanes_mean_filled$plasma.glucose)] <- plasma_mean
# The Tidyverse way
nhanes_mean_filled <- nhanes |>
mutate(plasma.glucose = replace_na(plasma.glucose, plasma_mean))
# Solution from part a
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
# The base R way:
nhanes_mean_filled <- nhanes
nhanes_mean_filled$plasma.glucose[is.na(nhanes_mean_filled$plasma.glucose)] <- plasma_mean
# The Tidyverse way
nhanes_mean_filled <- nhanes |>
mutate(plasma.glucose = replace_na(plasma.glucose, round(plasma_mean)))
# Solution from part a
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
# The base R way:
nhanes_mean_filled <- nhanes
nhanes_mean_filled$plasma.glucose[is.na(nhanes_mean_filled$plasma.glucose)] <- plasma_mean
# The Tidyverse way
nhanes_mean_filled <- nhanes |>
mutate(plasma.glucose = replace_na(plasma.glucose, round(plasma_mean)))
sum(is.na(nhanes_mean_filled$plasma.glucose))
# Solution from part a
plasma_mean <- mean(nhanes$plasma.glucose, na.rm = TRUE)
# The base R way:
nhanes_mean_filled <- nhanes
nhanes_mean_filled$plasma.glucose[is.na(nhanes_mean_filled$plasma.glucose)] <- plasma_mean
# The Tidyverse way
nhanes_mean_filled <- nhanes |>
mutate(plasma.glucose = replace_na(plasma.glucose, round(plasma_mean)))
#double check NA count
sum(is.na(nhanes_mean_filled$plasma.glucose))
quarto::quarto_render(output_format = "all")
library(tidyverse)
nhanes <- read.csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
library(tidyverse)
nhanes <- read_csv("https://raw.githubusercontent.com/ccb-hms/hsdm-r-course/main/session-materials/session0/session0Data.csv")
View(nhanes)
sum(nhanes$age.years >= 14)
sum(nhanes$age.years >= 14 | nhanes$bmi < 18.5)
sum(nhanes$age.years >= 14 | nhanes$bmi > 25)
sum(nhanes$age.years >= 14 | nhanes$bmi >= 25)
sum(nhanes$age.years >= 14 | nhanes$bmi >= 26)
nhanes$bmi
sum(nhanes$age.years >= 14 | nhanes$bmi >= 26)
sum((nhanes$age.years >= 14) | (nhanes$bmi >= 26))
sum((nhanes$age.years >= 14) | (nhanes$bmi >= 24))
sum((nhanes$age.years >= 14) | (nhanes$bmi >= 25))
sum((nhanes$age.years >= 14) | (nhanes$bmi > 25))
sum(((nhanes$age.years >= 14) | (nhanes$bmi > 25)) & nhanes$dental.decay.present == TRUE)
mean(nhanes$family.PIR[nhanes$age.years >= 14])
mean(nhanes$family.PIR[nhanes$age.years >= 14], na.rm = TRUE)
mean(nhanes$family.PIR[nhanes$birthplace == "Born in the 50 States or Washi"], na.rm = TRUE)
nhanes$birthplace == "Born in the 50 States or Washi"
nhanes$birthplace
unique(nhanes$birthplace)
nhanes |>
count(birthplace)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
