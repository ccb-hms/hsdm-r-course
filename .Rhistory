?readRDS
#| echo: False
#| output: False
library(rio)
library(here)
library(apyramid)
library(dplyr)
linelist <- rio::import("data/case_linelists/linelist_cleaned.rds")
#| label: load-data
#| output: false
library(tidyverse)
nhanes_processed <- read_csv(file.choose())
#| label: preview-data
#| echo: false
#| message: false
DT::datatable(head(nhanes_processed,200), rownames = FALSE, options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
ggplot(nhanes_processed) # <1>
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose))
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose)) +
geom_point()
# TODO make your histogram here
ggplot(nhanes_processed,
aes(x = age.years)
) + geom_histogram()
# TODO your improved age distribution code here
#TODO your plot here
ggplot(nhanes_processed, aes(x = ethnicity, y = bmi)) +
geom_boxplot()
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes)) +
geom_point()
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes)) +
geom_point(size = 2.5)
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes, shape = diabetes)) +
geom_point(size = 2.5)
# We can't color by age since it's numeric, ggplot gives an error.
ggplot(nhanes_processed, aes(x = ethnicity, y = bmi, fill = age.years)) +
geom_boxplot()
ggplot(nhanes_processed, aes(x = ethnicity, y = bmi, fill = age.cat)) +
geom_boxplot()
ggplot(nhanes_processed, aes(x = age.cat, y = bmi, fill = ethnicity)) +
geom_boxplot()
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = birthplace)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C of subject population stratified by birthplace") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_gradientn(colors = pal) +
theme(text = element_text(size=18))
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = birthplace)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C of subject population stratified by birthplace") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(colors = pal) +
theme(text = element_text(size=18))
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = birthplace)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C of subject population stratified by birthplace") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal) +
theme(text = element_text(size=18))
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 7, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = birthplace)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C of subject population stratified by birthplace") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal) +
theme(text = element_text(size=18))
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 7, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C of subject population stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal) +
theme(text = element_text(size=18))
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C of subject population stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal) +
theme(text = element_text(size=18))
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal, name = "Ethnicity") +
theme(text = element_text(size=18))
#| fig-width: 10
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal, name = "Ethnicity") +
theme(text = element_text(size=18))
#| fig-width: 14
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal, name = "Ethnicity") +
theme(text = element_text(size=18))
#| out-width: 150%
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal, name = "Ethnicity") +
theme(text = element_text(size=18))
#| fig-width: 20
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal, name = "Ethnicity") +
theme(text = element_text(size=18))
#| fig.width: 20
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal, name = "Ethnicity") +
theme(text = element_text(size=18))
#| fig.width: 12
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)
#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")
ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) +
geom_histogram() +
theme_minimal() +
ggtitle("HbA1C stratified by ethnicity") +
xlab("HbA1C (%)") +
ylab("Count") +
scale_fill_manual(values = pal, name = "Ethnicity") +
theme(text = element_text(size=18))
colnames(base_df_d)
library(tidyverse)
load(file.choose())
summary(base_df_d)
summary(base_df_e)
summary(base_df_f)
colnames(base_df_d)
colnames(base_df_e)
colnames(base_df_f)
colnames(base_df_d)
colnames(base_df_e)
colnames(base_df_f)
colnames(base_df_d) == colnames(base_df_e)
colnames(base_df_e) == colnames(base_df_f)
colnames(base_df_f) == colnames(base_df_d)
colnames(base_df_d)
colnames(base_df_e)
colnames(base_df_f)
colnames(base_df_d)[colnames(base_df_d) == colnames(base_df_e)]
colnames(base_df_e)[colnames(base_df_e) == colnames(base_df_f)]
colnames(base_df_f)[colnames(base_df_f) == colnames(base_df_d)]
colnames(base_df_d)
colnames(base_df_e)
colnames(base_df_f)
colnames(base_df_d)[colnames(base_df_d) != colnames(base_df_e)]
colnames(base_df_e)[colnames(base_df_e) != colnames(base_df_f)]
colnames(base_df_f)[colnames(base_df_f) != colnames(base_df_d)]
colnames(base_df_d)
colnames(base_df_e)
colnames(base_df_f)
colnames(base_df_d)[colnames(base_df_d) != colnames(base_df_e)]
colnames(base_df_e)[colnames(base_df_e) != colnames(base_df_f)]
colnames(base_df_f)[colnames(base_df_f) != colnames(base_df_d)]
library(tidyverse)
load(file.choose())
summary(base_df_d)
summary(base_df_e)
summary(base_df_f)
colnames(base_df_d)
colnames(base_df_e)
colnames(base_df_f)
colnames(base_df_d)[colnames(base_df_d) != colnames(base_df_e)]
colnames(base_df_e)[colnames(base_df_e) != colnames(base_df_f)]
colnames(base_df_f)[colnames(base_df_f) != colnames(base_df_d)]
tib_d <- as_tibble(base_df_d)
tib_e <- as_tibble(base_df_e)
tib_f <- as_tibble(base_df_f)
# Step 1: Change things to have the same sets of values
# TODO your code here
# Step 2: Rename the columns to fit between the datasets
tib_e <- rename(tib_e, DMDBORN = DMDBORN2)
tib_f <- rename(tib_f, DMDBORN = DMDBORN2)
# Combine all years together
tib_all <- tib_d %>%
bind_rows(tib_e) %>%
bind_rows(tib_f)
# Set columns to have appropriate types
converted_tib <- mutate(all_ado,
sequence.id = SEQN,
age.years = RIDAGEYR,
gender = as.factor(RIAGENDR),
ethnicity = as.factor(RIDRETH1),
birthplace = as.factor(DMDBORN),
family.PIR = INDFMPIR,
dental.decay.present = (OHXDECAY == "Yes"),
dental.restoration.present = (OHXREST == "Yes"),
plasma.glucose = as.numeric(LBXGLU),
hba1c = as.numeric(LBXGH),
bmi = as.numeric(BMXBMI),
.keep = "unused") #keep none of the old columns we converted
all_ado <- tib_all %>%
mutate(RIDAGEYR = as.numeric(RIDAGEYR)) %>% # Convert age to be numeric
filter(RIDAGEYR >= 13 & RIDAGEYR <= 18) %>% # Gets the 3660 nonedentulous adolescents
filter(!is.na(OHXDECAY)) # Gets the 3346 with non-NA dental carie variable
distinct(tib_all, RIDAGEYR)
x <- distinct(tib_all, RIDAGEYR)
View(x)
View(all_ado)
View(nhanes_processed)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("xfun")
install.packages("rmarkdown")
install.packages("DT")
install.packages("DT")
DT::datatable(age_by_outcome, rownames = FALSE, options = list(pageLength = 12, scrollX=T), class = 'white-space: nowrap' )
install.packages("quarto")
update.packages()
update.packages()
?update.packages()
update.packages(ask=F)
