---
title: "Session 2 Notebook"
author: "Center for Computational Biomedicine"
format: 
  html: 
    anchor-sections: true
code-annotations: select
---

# Data

We will be picking up where we left off with the data last week. 
If you have the data at hand you're all set, or you can download the week 2 data [here]().
You should check that the categorical variables you added last week are correctly encoded before continuing. 

```{r}
#| label: load-data
#| output: false
library(tidyverse) 

nhanes_processed <- read_csv(file.choose()) 

#| label: preview-data
#| echo: false
#| message: false
DT::datatable(head(nhanes_processed,200), rownames = FALSE, options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```

# First steps with ggplot2 

As you saw in this week's reading, ggplot2 utilizes a specific syntax for creating plots. 
We can summarize it as:

```r
ggplot(data = <DATA>, mapping = aes(<MAPPINGS>)) +  <GEOM_FUNCTION>()
```

Where we define a dataset, choose which variables map to which aspects of the plot, and then choose the `geom()` or type of plot to draw. 

Let's plug the NHANES dataset into a plot. 

```{r}
ggplot(nhanes_processed) # <1>
```
1. `data` and `mapping` are positional arguments in the `ggplot` function, so we don't have to name them. However, it can be good practice to include the argument names so that it's immediately obvious what each argument is. 


Since we haven't told `ggplot` what we want to display, we just get a blank plot.
If we add some mappings for the x and y axes:

```{r}
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose))
```
We now get labeled axes and scales based on the variable range. 
Finally, we can add a `geom()`.
Let's make a scatterplot, created with `geom_point()` in ggplot. 

```{r}
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose)) +
  geom_point()
```
::: {.callout-tip appearance="minimal"}
## Exercise

a. Try making a histogram displaying age in years with `geom_histogram`.
Do you agree with the authors' decision in [Beheshti et. al.](https://pubmed.ncbi.nlm.nih.gov/33892837/) to create two age categories to study this population?

```{r}
# TODO make your histogram here
ggplot(nhanes_processed,
       aes(x = age.years)
       ) + geom_histogram()
```
b. Typically, the bars in a histogram touch each other. Why is that not the case here? Is there a parameter you could change or different `geom()` you could use which might work better in this situation? 

Try your solution out.

```{r}
# TODO your improved age distribution code here
```
:::

::: {.callout-tip appearance="minimal"}
## Exercise
Choose a numeric variable in the data and make a boxplot showing how it varies by subject ethnicity. 

```{r}
#TODO your plot here
ggplot(nhanes_processed, aes(x = ethnicity, y = bmi)) + 
  geom_boxplot()
```
:::

# Mapping Variables

Beyond the actual axes we can use mappings to encode variables as various aspects of a plot. Some of the most commonly used other mapping types are `shape`, `fill`, `color`, `size`, and `linetype`.

For instance, let's take our scatterplot from before and color the points by diabetic status. 

```{r}
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes)) +
  geom_point() 
```

Remember we can also change parts of the plot outside of `aes()` to have them not depend on any variable. 

```{r}
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes)) +
  geom_point(size = 2.5) 
```
We can also have a single variable encoded into multiple parts of the plot.

```{r}
ggplot(nhanes_processed, aes(x = hba1c, y = plasma.glucose, color = diabetes, shape = diabetes)) +
  geom_point(size = 2.5) 
```
::: {.callout-tip appearance="minimal"}
## Exercise
a. Try coloring your boxplot from before by `age.years`. What happens? What about when you use `age.cat`? *Remember to use `fill` instead of `color` for shapes like boxplots.*

```{r}
# We can't color by age since it's numeric, ggplot gives an error. 
ggplot(nhanes_processed, aes(x = ethnicity, y = bmi, fill = age.years)) + 
  geom_boxplot()
```
```{r}
ggplot(nhanes_processed, aes(x = ethnicity, y = bmi, fill = age.cat)) + 
  geom_boxplot()
```
b. Now try flipping which variables are encoded in `x` and `fill`. Which version do you think works better?

```{r}
ggplot(nhanes_processed, aes(x = age.cat, y = bmi, fill = ethnicity)) + 
  geom_boxplot()
```
:::

# Customizing Plots

Taking a figure all the way to publication-quality can require careful fine tuning. 
ggplot has a variety of useful themes and other ways to improve a figure's appearance and readability. 

Here's an example of some of what you can do.
Note that changing the `fig.width` setting for the code block will not effect how the image looks when exported. 

```{r}
#| fig.width: 10
#Maybe we want a color scheme from a Wes Anderson movie:
library(wesanderson)

#Note that this font import can take multiple minutes to run
pal <- wes_palette("Zissou1", 5, type = "continuous")

ggplot(nhanes_processed, aes(x = hba1c, fill = ethnicity)) + 
 geom_histogram() +
 theme_minimal() +
 ggtitle("HbA1C stratified by ethnicity") +
 xlab("HbA1C (%)") +
 ylab("Count") +
 scale_fill_manual(values = pal, name = "Ethnicity") +
 theme(text = element_text(size=18))
```
::: {.callout-tip appearance="minimal"}
## Exercise

Use a figure you've already created, or choose a new plot to create. 
Try to get that figure to as close to publication-ready as possible. 
The [R Graph Gallery](https://r-graph-gallery.com/) is a great place to look for inspiration on what you can do to improve your plots. 

If there's something you want to change but don't know how, try checking the [ggplot2 cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html), the [extended ggplot chapter](https://epirhandbook.com/en/ggplot-basics.html), and the [official documentation](https://ggplot2.tidyverse.org/).  

```{r}
# TODO your plotting code here
```
:::


# Exporting plots

::: {.callout-tip appearance="minimal"}
## Exercise
The [Journal of the American Dental Association (JADA) manuscript guidlines](https://jada.ada.org/content/authorinfo#Manuscript%20Preparation%20and%20Formatting) list the following as their figure formatting requirements:

> Formats for Figures
> If your electronic artwork is created in a Microsoft Office application (Word, PowerPoint, Excel) then please supply "as is" in the native document format. Otherwise, regardless of the application used to create figures, the final artwork should be saved as or converted to 1 of the following formats:
> 
> - TIFF, JPEG, or PPT: Color or grayscale photographs (halftones): always use a minimum of 300 dpi.
> - TIFF, JPEG, or PPT: Bitmapped line drawings: use a minimum of 1,000 dpi.
> - TIFF, JPEG, or PPT: Combinations bitmapped line/halftone (color or grayscale): a minimum of 500 dpi is required.

While [Nature's formatting guidelines](https://www.nature.com/nature/for-authors/final-submission) are

Nature preferred formats are:

>    Layered Photoshop (PSD) or TIFF format (high resolution, 300–600 dots per inch (dpi) for photographic images. In Photoshop, it is possible to create images with separate components on different layers. This is particularly useful for placing text labels or arrows over an image, as it allows them to be edited later. If you have done this, please send the Photoshop file (.psd) with the layers intact.
>
>    Adobe Illustrator (AI), Postscript, Vector EPS or PDF format for figures containing line drawings and graphs, including figures combining text and line art with photographs or scans.
> 
> If these formats are not possible, we can also accept the following formats: JPEG (high-resolution, 300–600 dpi), CorelDraw (up to version 8), Microsoft Word, Excel or PowerPoint.

Export your figure using `ggsave` to comply with one of these sets of guidelines. 
:::

